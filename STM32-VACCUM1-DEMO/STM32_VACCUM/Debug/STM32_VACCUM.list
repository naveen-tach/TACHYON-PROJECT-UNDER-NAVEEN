
STM32_VACCUM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d594  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800d6a8  0800d6a8  0001d6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800deb8  0800deb8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800deb8  0800deb8  0001deb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec0  0800dec0  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800dec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001d8  0800e0a0  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800e0a0  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015399  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032c6  00000000  00000000  000355dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  000388a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e84  00000000  00000000  00039b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ab62  00000000  00000000  0003a9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018bb0  00000000  00000000  0005551e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000946fa  00000000  00000000  0006e0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006430  00000000  00000000  001027c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00108bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d68c 	.word	0x0800d68c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800d68c 	.word	0x0800d68c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_uldivmod>:
 800119c:	b953      	cbnz	r3, 80011b4 <__aeabi_uldivmod+0x18>
 800119e:	b94a      	cbnz	r2, 80011b4 <__aeabi_uldivmod+0x18>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bf08      	it	eq
 80011a4:	2800      	cmpeq	r0, #0
 80011a6:	bf1c      	itt	ne
 80011a8:	f04f 31ff 	movne.w	r1, #4294967295
 80011ac:	f04f 30ff 	movne.w	r0, #4294967295
 80011b0:	f000 b9aa 	b.w	8001508 <__aeabi_idiv0>
 80011b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011bc:	f000 f83e 	bl	800123c <__udivmoddi4>
 80011c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c8:	b004      	add	sp, #16
 80011ca:	4770      	bx	lr

080011cc <__aeabi_d2lz>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	4605      	mov	r5, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	4628      	mov	r0, r5
 80011d8:	4621      	mov	r1, r4
 80011da:	f7ff fbef 	bl	80009bc <__aeabi_dcmplt>
 80011de:	b928      	cbnz	r0, 80011ec <__aeabi_d2lz+0x20>
 80011e0:	4628      	mov	r0, r5
 80011e2:	4621      	mov	r1, r4
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e8:	f000 b80a 	b.w	8001200 <__aeabi_d2ulz>
 80011ec:	4628      	mov	r0, r5
 80011ee:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011f2:	f000 f805 	bl	8001200 <__aeabi_d2ulz>
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <__aeabi_d2ulz>:
 8001200:	b5d0      	push	{r4, r6, r7, lr}
 8001202:	2200      	movs	r2, #0
 8001204:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <__aeabi_d2ulz+0x34>)
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	f7ff f965 	bl	80004d8 <__aeabi_dmul>
 800120e:	f7ff fc3b 	bl	8000a88 <__aeabi_d2uiz>
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff f8e6 	bl	80003e4 <__aeabi_ui2d>
 8001218:	2200      	movs	r2, #0
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <__aeabi_d2ulz+0x38>)
 800121c:	f7ff f95c 	bl	80004d8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7fe ff9e 	bl	8000168 <__aeabi_dsub>
 800122c:	f7ff fc2c 	bl	8000a88 <__aeabi_d2uiz>
 8001230:	4621      	mov	r1, r4
 8001232:	bdd0      	pop	{r4, r6, r7, pc}
 8001234:	3df00000 	.word	0x3df00000
 8001238:	41f00000 	.word	0x41f00000

0800123c <__udivmoddi4>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	9e08      	ldr	r6, [sp, #32]
 8001242:	460d      	mov	r5, r1
 8001244:	4604      	mov	r4, r0
 8001246:	468e      	mov	lr, r1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14c      	bne.n	80012e6 <__udivmoddi4+0xaa>
 800124c:	428a      	cmp	r2, r1
 800124e:	4694      	mov	ip, r2
 8001250:	d967      	bls.n	8001322 <__udivmoddi4+0xe6>
 8001252:	fab2 f382 	clz	r3, r2
 8001256:	b153      	cbz	r3, 800126e <__udivmoddi4+0x32>
 8001258:	fa02 fc03 	lsl.w	ip, r2, r3
 800125c:	f1c3 0220 	rsb	r2, r3, #32
 8001260:	fa01 fe03 	lsl.w	lr, r1, r3
 8001264:	fa20 f202 	lsr.w	r2, r0, r2
 8001268:	ea42 0e0e 	orr.w	lr, r2, lr
 800126c:	409c      	lsls	r4, r3
 800126e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001272:	fbbe f1f7 	udiv	r1, lr, r7
 8001276:	fa1f f58c 	uxth.w	r5, ip
 800127a:	fb07 ee11 	mls	lr, r7, r1, lr
 800127e:	fb01 f005 	mul.w	r0, r1, r5
 8001282:	0c22      	lsrs	r2, r4, #16
 8001284:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001288:	4290      	cmp	r0, r2
 800128a:	d90a      	bls.n	80012a2 <__udivmoddi4+0x66>
 800128c:	eb1c 0202 	adds.w	r2, ip, r2
 8001290:	f101 3eff 	add.w	lr, r1, #4294967295
 8001294:	f080 8119 	bcs.w	80014ca <__udivmoddi4+0x28e>
 8001298:	4290      	cmp	r0, r2
 800129a:	f240 8116 	bls.w	80014ca <__udivmoddi4+0x28e>
 800129e:	3902      	subs	r1, #2
 80012a0:	4462      	add	r2, ip
 80012a2:	1a12      	subs	r2, r2, r0
 80012a4:	fbb2 f0f7 	udiv	r0, r2, r7
 80012a8:	fb07 2210 	mls	r2, r7, r0, r2
 80012ac:	fb00 f505 	mul.w	r5, r0, r5
 80012b0:	b2a4      	uxth	r4, r4
 80012b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80012b6:	42a5      	cmp	r5, r4
 80012b8:	d90a      	bls.n	80012d0 <__udivmoddi4+0x94>
 80012ba:	eb1c 0404 	adds.w	r4, ip, r4
 80012be:	f100 32ff 	add.w	r2, r0, #4294967295
 80012c2:	f080 8104 	bcs.w	80014ce <__udivmoddi4+0x292>
 80012c6:	42a5      	cmp	r5, r4
 80012c8:	f240 8101 	bls.w	80014ce <__udivmoddi4+0x292>
 80012cc:	4464      	add	r4, ip
 80012ce:	3802      	subs	r0, #2
 80012d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012d4:	2100      	movs	r1, #0
 80012d6:	1b64      	subs	r4, r4, r5
 80012d8:	b11e      	cbz	r6, 80012e2 <__udivmoddi4+0xa6>
 80012da:	40dc      	lsrs	r4, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	e9c6 4300 	strd	r4, r3, [r6]
 80012e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e6:	428b      	cmp	r3, r1
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0xc0>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	f000 80ea 	beq.w	80014c4 <__udivmoddi4+0x288>
 80012f0:	2100      	movs	r1, #0
 80012f2:	e9c6 0500 	strd	r0, r5, [r6]
 80012f6:	4608      	mov	r0, r1
 80012f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012fc:	fab3 f183 	clz	r1, r3
 8001300:	2900      	cmp	r1, #0
 8001302:	d148      	bne.n	8001396 <__udivmoddi4+0x15a>
 8001304:	42ab      	cmp	r3, r5
 8001306:	d302      	bcc.n	800130e <__udivmoddi4+0xd2>
 8001308:	4282      	cmp	r2, r0
 800130a:	f200 80f8 	bhi.w	80014fe <__udivmoddi4+0x2c2>
 800130e:	1a84      	subs	r4, r0, r2
 8001310:	eb65 0203 	sbc.w	r2, r5, r3
 8001314:	2001      	movs	r0, #1
 8001316:	4696      	mov	lr, r2
 8001318:	2e00      	cmp	r6, #0
 800131a:	d0e2      	beq.n	80012e2 <__udivmoddi4+0xa6>
 800131c:	e9c6 4e00 	strd	r4, lr, [r6]
 8001320:	e7df      	b.n	80012e2 <__udivmoddi4+0xa6>
 8001322:	b902      	cbnz	r2, 8001326 <__udivmoddi4+0xea>
 8001324:	deff      	udf	#255	; 0xff
 8001326:	fab2 f382 	clz	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	f040 808e 	bne.w	800144c <__udivmoddi4+0x210>
 8001330:	1a88      	subs	r0, r1, r2
 8001332:	2101      	movs	r1, #1
 8001334:	0c17      	lsrs	r7, r2, #16
 8001336:	fa1f fe82 	uxth.w	lr, r2
 800133a:	fbb0 f5f7 	udiv	r5, r0, r7
 800133e:	fb07 0015 	mls	r0, r7, r5, r0
 8001342:	0c22      	lsrs	r2, r4, #16
 8001344:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001348:	fb0e f005 	mul.w	r0, lr, r5
 800134c:	4290      	cmp	r0, r2
 800134e:	d908      	bls.n	8001362 <__udivmoddi4+0x126>
 8001350:	eb1c 0202 	adds.w	r2, ip, r2
 8001354:	f105 38ff 	add.w	r8, r5, #4294967295
 8001358:	d202      	bcs.n	8001360 <__udivmoddi4+0x124>
 800135a:	4290      	cmp	r0, r2
 800135c:	f200 80cc 	bhi.w	80014f8 <__udivmoddi4+0x2bc>
 8001360:	4645      	mov	r5, r8
 8001362:	1a12      	subs	r2, r2, r0
 8001364:	fbb2 f0f7 	udiv	r0, r2, r7
 8001368:	fb07 2210 	mls	r2, r7, r0, r2
 800136c:	fb0e fe00 	mul.w	lr, lr, r0
 8001370:	b2a4      	uxth	r4, r4
 8001372:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001376:	45a6      	cmp	lr, r4
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x150>
 800137a:	eb1c 0404 	adds.w	r4, ip, r4
 800137e:	f100 32ff 	add.w	r2, r0, #4294967295
 8001382:	d202      	bcs.n	800138a <__udivmoddi4+0x14e>
 8001384:	45a6      	cmp	lr, r4
 8001386:	f200 80b4 	bhi.w	80014f2 <__udivmoddi4+0x2b6>
 800138a:	4610      	mov	r0, r2
 800138c:	eba4 040e 	sub.w	r4, r4, lr
 8001390:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001394:	e7a0      	b.n	80012d8 <__udivmoddi4+0x9c>
 8001396:	f1c1 0720 	rsb	r7, r1, #32
 800139a:	408b      	lsls	r3, r1
 800139c:	fa22 fc07 	lsr.w	ip, r2, r7
 80013a0:	ea4c 0c03 	orr.w	ip, ip, r3
 80013a4:	fa25 fa07 	lsr.w	sl, r5, r7
 80013a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013ac:	fbba f8f9 	udiv	r8, sl, r9
 80013b0:	408d      	lsls	r5, r1
 80013b2:	fa20 f307 	lsr.w	r3, r0, r7
 80013b6:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ba:	fa1f fe8c 	uxth.w	lr, ip
 80013be:	432b      	orrs	r3, r5
 80013c0:	fa00 f501 	lsl.w	r5, r0, r1
 80013c4:	fb08 f00e 	mul.w	r0, r8, lr
 80013c8:	0c1c      	lsrs	r4, r3, #16
 80013ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ce:	42a0      	cmp	r0, r4
 80013d0:	fa02 f201 	lsl.w	r2, r2, r1
 80013d4:	d90b      	bls.n	80013ee <__udivmoddi4+0x1b2>
 80013d6:	eb1c 0404 	adds.w	r4, ip, r4
 80013da:	f108 3aff 	add.w	sl, r8, #4294967295
 80013de:	f080 8086 	bcs.w	80014ee <__udivmoddi4+0x2b2>
 80013e2:	42a0      	cmp	r0, r4
 80013e4:	f240 8083 	bls.w	80014ee <__udivmoddi4+0x2b2>
 80013e8:	f1a8 0802 	sub.w	r8, r8, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1a24      	subs	r4, r4, r0
 80013f0:	b298      	uxth	r0, r3
 80013f2:	fbb4 f3f9 	udiv	r3, r4, r9
 80013f6:	fb09 4413 	mls	r4, r9, r3, r4
 80013fa:	fb03 fe0e 	mul.w	lr, r3, lr
 80013fe:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001402:	45a6      	cmp	lr, r4
 8001404:	d908      	bls.n	8001418 <__udivmoddi4+0x1dc>
 8001406:	eb1c 0404 	adds.w	r4, ip, r4
 800140a:	f103 30ff 	add.w	r0, r3, #4294967295
 800140e:	d26a      	bcs.n	80014e6 <__udivmoddi4+0x2aa>
 8001410:	45a6      	cmp	lr, r4
 8001412:	d968      	bls.n	80014e6 <__udivmoddi4+0x2aa>
 8001414:	3b02      	subs	r3, #2
 8001416:	4464      	add	r4, ip
 8001418:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800141c:	fba0 9302 	umull	r9, r3, r0, r2
 8001420:	eba4 040e 	sub.w	r4, r4, lr
 8001424:	429c      	cmp	r4, r3
 8001426:	46c8      	mov	r8, r9
 8001428:	469e      	mov	lr, r3
 800142a:	d354      	bcc.n	80014d6 <__udivmoddi4+0x29a>
 800142c:	d051      	beq.n	80014d2 <__udivmoddi4+0x296>
 800142e:	2e00      	cmp	r6, #0
 8001430:	d067      	beq.n	8001502 <__udivmoddi4+0x2c6>
 8001432:	ebb5 0308 	subs.w	r3, r5, r8
 8001436:	eb64 040e 	sbc.w	r4, r4, lr
 800143a:	40cb      	lsrs	r3, r1
 800143c:	fa04 f707 	lsl.w	r7, r4, r7
 8001440:	431f      	orrs	r7, r3
 8001442:	40cc      	lsrs	r4, r1
 8001444:	e9c6 7400 	strd	r7, r4, [r6]
 8001448:	2100      	movs	r1, #0
 800144a:	e74a      	b.n	80012e2 <__udivmoddi4+0xa6>
 800144c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001450:	f1c3 0020 	rsb	r0, r3, #32
 8001454:	40c1      	lsrs	r1, r0
 8001456:	409d      	lsls	r5, r3
 8001458:	fa24 f000 	lsr.w	r0, r4, r0
 800145c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001460:	4328      	orrs	r0, r5
 8001462:	fbb1 f5f7 	udiv	r5, r1, r7
 8001466:	fb07 1115 	mls	r1, r7, r5, r1
 800146a:	fa1f fe8c 	uxth.w	lr, ip
 800146e:	0c02      	lsrs	r2, r0, #16
 8001470:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001474:	fb05 f10e 	mul.w	r1, r5, lr
 8001478:	4291      	cmp	r1, r2
 800147a:	fa04 f403 	lsl.w	r4, r4, r3
 800147e:	d908      	bls.n	8001492 <__udivmoddi4+0x256>
 8001480:	eb1c 0202 	adds.w	r2, ip, r2
 8001484:	f105 38ff 	add.w	r8, r5, #4294967295
 8001488:	d22f      	bcs.n	80014ea <__udivmoddi4+0x2ae>
 800148a:	4291      	cmp	r1, r2
 800148c:	d92d      	bls.n	80014ea <__udivmoddi4+0x2ae>
 800148e:	3d02      	subs	r5, #2
 8001490:	4462      	add	r2, ip
 8001492:	1a52      	subs	r2, r2, r1
 8001494:	fbb2 f1f7 	udiv	r1, r2, r7
 8001498:	fb07 2211 	mls	r2, r7, r1, r2
 800149c:	b280      	uxth	r0, r0
 800149e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80014a2:	fb01 f20e 	mul.w	r2, r1, lr
 80014a6:	4282      	cmp	r2, r0
 80014a8:	d908      	bls.n	80014bc <__udivmoddi4+0x280>
 80014aa:	eb1c 0000 	adds.w	r0, ip, r0
 80014ae:	f101 38ff 	add.w	r8, r1, #4294967295
 80014b2:	d216      	bcs.n	80014e2 <__udivmoddi4+0x2a6>
 80014b4:	4282      	cmp	r2, r0
 80014b6:	d914      	bls.n	80014e2 <__udivmoddi4+0x2a6>
 80014b8:	3902      	subs	r1, #2
 80014ba:	4460      	add	r0, ip
 80014bc:	1a80      	subs	r0, r0, r2
 80014be:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80014c2:	e73a      	b.n	800133a <__udivmoddi4+0xfe>
 80014c4:	4631      	mov	r1, r6
 80014c6:	4630      	mov	r0, r6
 80014c8:	e70b      	b.n	80012e2 <__udivmoddi4+0xa6>
 80014ca:	4671      	mov	r1, lr
 80014cc:	e6e9      	b.n	80012a2 <__udivmoddi4+0x66>
 80014ce:	4610      	mov	r0, r2
 80014d0:	e6fe      	b.n	80012d0 <__udivmoddi4+0x94>
 80014d2:	454d      	cmp	r5, r9
 80014d4:	d2ab      	bcs.n	800142e <__udivmoddi4+0x1f2>
 80014d6:	ebb9 0802 	subs.w	r8, r9, r2
 80014da:	eb63 0e0c 	sbc.w	lr, r3, ip
 80014de:	3801      	subs	r0, #1
 80014e0:	e7a5      	b.n	800142e <__udivmoddi4+0x1f2>
 80014e2:	4641      	mov	r1, r8
 80014e4:	e7ea      	b.n	80014bc <__udivmoddi4+0x280>
 80014e6:	4603      	mov	r3, r0
 80014e8:	e796      	b.n	8001418 <__udivmoddi4+0x1dc>
 80014ea:	4645      	mov	r5, r8
 80014ec:	e7d1      	b.n	8001492 <__udivmoddi4+0x256>
 80014ee:	46d0      	mov	r8, sl
 80014f0:	e77d      	b.n	80013ee <__udivmoddi4+0x1b2>
 80014f2:	4464      	add	r4, ip
 80014f4:	3802      	subs	r0, #2
 80014f6:	e749      	b.n	800138c <__udivmoddi4+0x150>
 80014f8:	3d02      	subs	r5, #2
 80014fa:	4462      	add	r2, ip
 80014fc:	e731      	b.n	8001362 <__udivmoddi4+0x126>
 80014fe:	4608      	mov	r0, r1
 8001500:	e70a      	b.n	8001318 <__udivmoddi4+0xdc>
 8001502:	4631      	mov	r1, r6
 8001504:	e6ed      	b.n	80012e2 <__udivmoddi4+0xa6>
 8001506:	bf00      	nop

08001508 <__aeabi_idiv0>:
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop

0800150c <auth_init>:
};
uint8_t aFlag = 1;
uint8_t auth_flag_switch_page = 0 ;

void auth_init(uint8_t *displayUartFlag, uint8_t *authFlag)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08c      	sub	sp, #48	; 0x30
 8001510:	af02      	add	r7, sp, #8
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
	if(*authFlag == 0)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <auth_init+0x24>
	{
		auth_page_read(displayUartFlag,&auth_flag_switch_page, &ee24_auth_params, &aFlag, authFlag);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	9300      	str	r3, [sp, #0]
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <auth_init+0x64>)
 8001524:	4a13      	ldr	r2, [pc, #76]	; (8001574 <auth_init+0x68>)
 8001526:	4914      	ldr	r1, [pc, #80]	; (8001578 <auth_init+0x6c>)
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f001 fedf 	bl	80032ec <auth_page_read>
		uint8_t data[30];
		memset(data,0,sizeof(data));
		sprintf(data,"authentication flag is not set as defualt\n");
		HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
	}
}
 800152e:	e01a      	b.n	8001566 <auth_init+0x5a>
		memset(data,0,sizeof(data));
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	221e      	movs	r2, #30
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f008 fcde 	bl	8009efa <memset>
		sprintf(data,"authentication flag is not set as defualt\n");
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <auth_init+0x70>)
 8001544:	4618      	mov	r0, r3
 8001546:	f008 fc75 	bl	8009e34 <siprintf>
		HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fdfe 	bl	8000150 <strlen>
 8001554:	4603      	mov	r3, r0
 8001556:	b29a      	uxth	r2, r3
 8001558:	f107 0108 	add.w	r1, r7, #8
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <auth_init+0x74>)
 8001562:	f006 fe83 	bl	800826c <HAL_UART_Transmit>
}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000000 	.word	0x20000000
 8001574:	200001f4 	.word	0x200001f4
 8001578:	200001fc 	.word	0x200001fc
 800157c:	0800d6a8 	.word	0x0800d6a8
 8001580:	200004a0 	.word	0x200004a0
 8001584:	00000000 	.word	0x00000000

08001588 <controller_getCalculated_PID_value>:


//float controller_getCalculated_PID_value(uint32_t *arr,	displayParams *displayparam, controller_params *controller,	pid_params *pid)

float controller_getCalculated_PID_value(uint32_t *arr,	uint16_t homepage_t_mmhg, controller_params *controller,	pid_params *pid)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 800158e:	af00      	add	r7, sp, #0
 8001590:	f507 7452 	add.w	r4, r7, #840	; 0x348
 8001594:	f5a4 744f 	sub.w	r4, r4, #828	; 0x33c
 8001598:	6020      	str	r0, [r4, #0]
 800159a:	4608      	mov	r0, r1
 800159c:	f507 7152 	add.w	r1, r7, #840	; 0x348
 80015a0:	f5a1 7151 	sub.w	r1, r1, #836	; 0x344
 80015a4:	600a      	str	r2, [r1, #0]
 80015a6:	f507 7252 	add.w	r2, r7, #840	; 0x348
 80015aa:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80015b4:	f2a3 333e 	subw	r3, r3, #830	; 0x33e
 80015b8:	4602      	mov	r2, r0
 80015ba:	801a      	strh	r2, [r3, #0]
//				arr[j + 1] = temp;
//			}
//		}
//	}

	uint32_t temp_adc = controller_calculateFilteredValue(arr,sizeof(arr)/sizeof(arr[0]), controller->adc);
 80015bc:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80015c0:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fdc7 	bl	800115c <__aeabi_f2uiz>
 80015ce:	4602      	mov	r2, r0
 80015d0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80015d4:	f5a3 734f 	sub.w	r3, r3, #828	; 0x33c
 80015d8:	2101      	movs	r1, #1
 80015da:	6818      	ldr	r0, [r3, #0]
 80015dc:	f000 f970 	bl	80018c0 <controller_calculateFilteredValue>
 80015e0:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338

	controller->adc 	= temp_adc	;
 80015e4:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 80015e8:	f7ff fb74 	bl	8000cd4 <__aeabi_ui2f>
 80015ec:	4602      	mov	r2, r0
 80015ee:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80015f2:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	609a      	str	r2, [r3, #8]

	controller->volt = controller->adc /ADC_TO_VOLTAGE ;
 80015fa:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80015fe:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ff0e 	bl	8000428 <__aeabi_f2d>
 800160c:	a384      	add	r3, pc, #528	; (adr r3, 8001820 <controller_getCalculated_PID_value+0x298>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f88b 	bl	800072c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	f7ff fa53 	bl	8000ac8 <__aeabi_d2f>
 8001622:	4602      	mov	r2, r0
 8001624:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001628:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60da      	str	r2, [r3, #12]


	memset(arrval,0,sizeof(arrval));
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f008 fc5d 	bl	8009efa <memset>
	for(uint8_t i=0; i< sizeof(arrval)/sizeof(arrval[0]) ; i++)
 8001640:	2300      	movs	r3, #0
 8001642:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
 8001646:	e02a      	b.n	800169e <controller_getCalculated_PID_value+0x116>
	{

		arrval[i] =( controller->volt + 0.475 )/0.045 ;
 8001648:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800164c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fee7 	bl	8000428 <__aeabi_f2d>
 800165a:	a373      	add	r3, pc, #460	; (adr r3, 8001828 <controller_getCalculated_PID_value+0x2a0>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe fd84 	bl	800016c <__adddf3>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4610      	mov	r0, r2
 800166a:	4619      	mov	r1, r3
 800166c:	a370      	add	r3, pc, #448	; (adr r3, 8001830 <controller_getCalculated_PID_value+0x2a8>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7ff f85b 	bl	800072c <__aeabi_ddiv>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	f897 4347 	ldrb.w	r4, [r7, #839]	; 0x347
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fa21 	bl	8000ac8 <__aeabi_d2f>
 8001686:	4602      	mov	r2, r0
 8001688:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800168c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8001690:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(uint8_t i=0; i< sizeof(arrval)/sizeof(arrval[0]) ; i++)
 8001694:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8001698:	3301      	adds	r3, #1
 800169a:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
 800169e:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 80016a2:	2bc7      	cmp	r3, #199	; 0xc7
 80016a4:	d9d0      	bls.n	8001648 <controller_getCalculated_PID_value+0xc0>
	}

	controller->kPa = controller_calculateFilteredValueFloat(arrval,sizeof(arrval)/sizeof(arrval[0]) , controller->kPa);
 80016a6:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80016aa:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	21c8      	movs	r1, #200	; 0xc8
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f8c3 	bl	8001844 <controller_calculateFilteredValueFloat>
 80016be:	4602      	mov	r2, r0
 80016c0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80016c4:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	601a      	str	r2, [r3, #0]

	memset(arrval,0,sizeof(arrval));
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f008 fc0f 	bl	8009efa <memset>
	for(int i=0 ; i<sizeof(arrval) / sizeof(arrval[0]) ; i++)
 80016dc:	2300      	movs	r3, #0
 80016de:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 80016e2:	e028      	b.n	8001736 <controller_getCalculated_PID_value+0x1ae>
	{
		arrval[i] =  760 - (  (controller->kPa) * 7.5001 ) ; //832.568
 80016e4:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80016e8:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe fe99 	bl	8000428 <__aeabi_f2d>
 80016f6:	a350      	add	r3, pc, #320	; (adr r3, 8001838 <controller_getCalculated_PID_value+0x2b0>)
 80016f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fc:	f7fe feec 	bl	80004d8 <__aeabi_dmul>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	f04f 0000 	mov.w	r0, #0
 8001708:	494d      	ldr	r1, [pc, #308]	; (8001840 <controller_getCalculated_PID_value+0x2b8>)
 800170a:	f7fe fd2d 	bl	8000168 <__aeabi_dsub>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4610      	mov	r0, r2
 8001714:	4619      	mov	r1, r3
 8001716:	f7ff f9d7 	bl	8000ac8 <__aeabi_d2f>
 800171a:	4601      	mov	r1, r0
 800171c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001720:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8001724:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0 ; i<sizeof(arrval) / sizeof(arrval[0]) ; i++)
 800172c:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
 8001736:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800173a:	2bc7      	cmp	r3, #199	; 0xc7
 800173c:	d9d2      	bls.n	80016e4 <controller_getCalculated_PID_value+0x15c>
	}

	controller->mmhg = controller_calculateFilteredValueFloat(arrval,sizeof(arrval)/sizeof(arrval[0]) , controller->mmhg);
 800173e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001742:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	21c8      	movs	r1, #200	; 0xc8
 8001750:	4618      	mov	r0, r3
 8001752:	f000 f877 	bl	8001844 <controller_calculateFilteredValueFloat>
 8001756:	4602      	mov	r2, r0
 8001758:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800175c:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]

    memset(arrval,0,sizeof(arrval));
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	f44f 7248 	mov.w	r2, #800	; 0x320
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f008 fbc3 	bl	8009efa <memset>
//	for(int i=0 ; i<sizeof(arrval) / sizeof(arrval[0]) ; i++)
//	{
//		  arrval[i] = displayparam->setpointt - controller->mmhg ;
//	}
	for(int i=0 ; i<sizeof(arrval) / sizeof(arrval[0]) ; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800177a:	e021      	b.n	80017c0 <controller_getCalculated_PID_value+0x238>
	{
		  arrval[i] = homepage_t_mmhg - controller->mmhg ;
 800177c:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001780:	f2a3 333e 	subw	r3, r3, #830	; 0x33e
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff faa8 	bl	8000cdc <__aeabi_i2f>
 800178c:	4602      	mov	r2, r0
 800178e:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001792:	f5a3 7351 	sub.w	r3, r3, #836	; 0x344
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff f9e7 	bl	8000b70 <__aeabi_fsub>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4619      	mov	r1, r3
 80017a6:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80017aa:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 80017ae:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80017b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0 ; i<sizeof(arrval) / sizeof(arrval[0]) ; i++)
 80017b6:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80017c0:	f8d7 333c 	ldr.w	r3, [r7, #828]	; 0x33c
 80017c4:	2bc7      	cmp	r3, #199	; 0xc7
 80017c6:	d9d9      	bls.n	800177c <controller_getCalculated_PID_value+0x1f4>
	}
	pid->error = controller_calculateFilteredValueFloat(arrval,sizeof(arrval)/sizeof(arrval[0]) , pid->error);
 80017c8:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80017cc:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	21c8      	movs	r1, #200	; 0xc8
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f832 	bl	8001844 <controller_calculateFilteredValueFloat>
 80017e0:	4602      	mov	r2, r0
 80017e2:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80017e6:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	611a      	str	r2, [r3, #16]

	float _ut = PID(pid ) ;
 80017ee:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80017f2:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	f002 fd09 	bl	800420e <PID>
 80017fc:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
	pid->ut = _ut	;
 8001800:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001804:	f5a3 7352 	sub.w	r3, r3, #840	; 0x348
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800180e:	625a      	str	r2, [r3, #36]	; 0x24




}
 8001810:	bf00      	nop
 8001812:	4618      	mov	r0, r3
 8001814:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 8001818:	46bd      	mov	sp, r7
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	f3af 8000 	nop.w
 8001820:	d0e56042 	.word	0xd0e56042
 8001824:	409363a2 	.word	0x409363a2
 8001828:	66666666 	.word	0x66666666
 800182c:	3fde6666 	.word	0x3fde6666
 8001830:	70a3d70a 	.word	0x70a3d70a
 8001834:	3fa70a3d 	.word	0x3fa70a3d
 8001838:	36e2eb1c 	.word	0x36e2eb1c
 800183c:	401e001a 	.word	0x401e001a
 8001840:	4087c000 	.word	0x4087c000

08001844 <controller_calculateFilteredValueFloat>:


float controller_calculateFilteredValueFloat(float arr[],uint8_t dataSize, float prevVal)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	460b      	mov	r3, r1
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	72fb      	strb	r3, [r7, #11]
	float val =0;
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
	uint8_t counter =0;
 8001858:	2300      	movs	r3, #0
 800185a:	74fb      	strb	r3, [r7, #19]

	for(uint8_t i=0; i<dataSize ; i++)
 800185c:	2300      	movs	r3, #0
 800185e:	74bb      	strb	r3, [r7, #18]
 8001860:	e010      	b.n	8001884 <controller_calculateFilteredValueFloat+0x40>
	{

		val = val + arr[i];
 8001862:	7cbb      	ldrb	r3, [r7, #18]
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4619      	mov	r1, r3
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff f980 	bl	8000b74 <__addsf3>
 8001874:	4603      	mov	r3, r0
 8001876:	617b      	str	r3, [r7, #20]
		counter++;
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	3301      	adds	r3, #1
 800187c:	74fb      	strb	r3, [r7, #19]
	for(uint8_t i=0; i<dataSize ; i++)
 800187e:	7cbb      	ldrb	r3, [r7, #18]
 8001880:	3301      	adds	r3, #1
 8001882:	74bb      	strb	r3, [r7, #18]
 8001884:	7cba      	ldrb	r2, [r7, #18]
 8001886:	7afb      	ldrb	r3, [r7, #11]
 8001888:	429a      	cmp	r2, r3
 800188a:	d3ea      	bcc.n	8001862 <controller_calculateFilteredValueFloat+0x1e>
	}
	val = val/counter ;
 800188c:	7cfb      	ldrb	r3, [r7, #19]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fa24 	bl	8000cdc <__aeabi_i2f>
 8001894:	4603      	mov	r3, r0
 8001896:	4619      	mov	r1, r3
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f7ff fb27 	bl	8000eec <__aeabi_fdiv>
 800189e:	4603      	mov	r3, r0
 80018a0:	617b      	str	r3, [r7, #20]

	return ( val + prevVal )/2 ;
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	6978      	ldr	r0, [r7, #20]
 80018a6:	f7ff f965 	bl	8000b74 <__addsf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fb1b 	bl	8000eec <__aeabi_fdiv>
 80018b6:	4603      	mov	r3, r0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <controller_calculateFilteredValue>:


uint32_t controller_calculateFilteredValue(uint32_t data[], uint8_t dataSize, uint32_t prevAdc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	460b      	mov	r3, r1
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	72fb      	strb	r3, [r7, #11]
	uint32_t filterValue =0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
	uint8_t count =0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	76fb      	strb	r3, [r7, #27]
	for(uint8_t i=0 ; i<dataSize ;i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	76bb      	strb	r3, [r7, #26]
 80018da:	e00d      	b.n	80018f8 <controller_calculateFilteredValue+0x38>
	{
		filterValue = filterValue + data[i];
 80018dc:	7ebb      	ldrb	r3, [r7, #26]
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	69fa      	ldr	r2, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	61fb      	str	r3, [r7, #28]
		count++ ;
 80018ec:	7efb      	ldrb	r3, [r7, #27]
 80018ee:	3301      	adds	r3, #1
 80018f0:	76fb      	strb	r3, [r7, #27]
	for(uint8_t i=0 ; i<dataSize ;i++)
 80018f2:	7ebb      	ldrb	r3, [r7, #26]
 80018f4:	3301      	adds	r3, #1
 80018f6:	76bb      	strb	r3, [r7, #26]
 80018f8:	7eba      	ldrb	r2, [r7, #26]
 80018fa:	7afb      	ldrb	r3, [r7, #11]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3ed      	bcc.n	80018dc <controller_calculateFilteredValue+0x1c>
	}
	filterValue = filterValue /count ;
 8001900:	7efb      	ldrb	r3, [r7, #27]
 8001902:	69fa      	ldr	r2, [r7, #28]
 8001904:	fbb2 f3f3 	udiv	r3, r2, r3
 8001908:	61fb      	str	r3, [r7, #28]

	uint32_t op = (prevAdc + filterValue )/2 ;
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	4413      	add	r3, r2
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	617b      	str	r3, [r7, #20]
	return  op ;
 8001914:	697b      	ldr	r3, [r7, #20]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <display_clearModemBuffer>:
#include "auth.h"

uint8_t modemRxBuff[MAX_MODEM_RX_BUFF];
uint8_t current_page  = 200;

void display_clearModemBuffer(){
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0

	memset(modemRxBuff,0,sizeof(modemRxBuff));
 8001924:	22fa      	movs	r2, #250	; 0xfa
 8001926:	2100      	movs	r1, #0
 8001928:	4803      	ldr	r0, [pc, #12]	; (8001938 <display_clearModemBuffer+0x18>)
 800192a:	f008 fae6 	bl	8009efa <memset>
	rxBufferCount=0;
 800192e:	4b03      	ldr	r3, [pc, #12]	; (800193c <display_clearModemBuffer+0x1c>)
 8001930:	2200      	movs	r2, #0
 8001932:	801a      	strh	r2, [r3, #0]

}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000200 	.word	0x20000200
 800193c:	20000530 	.word	0x20000530

08001940 <display_mmhgValueUpdateToDisplay>:
}



void display_mmhgValueUpdateToDisplay( float mmhg,uint8_t runStopFlag)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b098      	sub	sp, #96	; 0x60
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]

	  uint8_t _mmhgPayLoad[50]  ; //= {0x5A ,0xA5, 0x07 ,0x82 ,0x14 ,0x00};
	  uint8_t _mmhglen 	=	sizeof(_mmhgPayLoad);
 800194c:	2332      	movs	r3, #50	; 0x32
 800194e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

	  memset(_mmhgPayLoad,0,_mmhglen);
 8001952:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001956:	f107 0320 	add.w	r3, r7, #32
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f008 facc 	bl	8009efa <memset>




	  _mmhgPayLoad[0]	=	0x5A	;
 8001962:	235a      	movs	r3, #90	; 0x5a
 8001964:	f887 3020 	strb.w	r3, [r7, #32]
	  _mmhgPayLoad[1]	=	0xA5	;
 8001968:	23a5      	movs	r3, #165	; 0xa5
 800196a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  _mmhgPayLoad[2]	=	0x06	;
 800196e:	2306      	movs	r3, #6
 8001970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  _mmhgPayLoad[3]	=	0x82	;
 8001974:	2382      	movs	r3, #130	; 0x82
 8001976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  _mmhgPayLoad[4]	=	0x14	;
 800197a:	2314      	movs	r3, #20
 800197c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  _mmhgPayLoad[5]	=	0x00	;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


	  uint64_t 	_mmhg		 = (int)(mmhg) ;
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff fbc2 	bl	8001110 <__aeabi_f2iz>
 800198c:	4603      	mov	r3, r0
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	461c      	mov	r4, r3
 8001992:	4615      	mov	r5, r2
 8001994:	e9c7 4516 	strd	r4, r5, [r7, #88]	; 0x58
//	  memset(exp,0,sizeof(exp));
//	  sprintf(exp,"mmhg:%d\n",_mmhg);
//
//	  HAL_UART_Transmit(&huart1, &exp, sizeof(exp), HAL_MAX_DELAY);

	  uint8_t 	iteration 	 =	0 	;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  uint8_t 	arr[20] ;
	  uint8_t	j			 =	0	;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  memset(arr, 0 ,sizeof(arr));
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2214      	movs	r2, #20
 80019aa:	2100      	movs	r1, #0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 faa4 	bl	8009efa <memset>

	  while(_mmhg>0)
 80019b2:	e010      	b.n	80019d6 <display_mmhgValueUpdateToDisplay+0x96>
	  {
		  _mmhg 			= _mmhg/10		;
 80019b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80019b8:	f04f 020a 	mov.w	r2, #10
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f7ff fbec 	bl	800119c <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		  iteration++;
 80019cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019d0:	3301      	adds	r3, #1
 80019d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  while(_mmhg>0)
 80019d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80019da:	4313      	orrs	r3, r2
 80019dc:	d1ea      	bne.n	80019b4 <display_mmhgValueUpdateToDisplay+0x74>
	  }

//	  _mmhg =	(int)(mmhg);

	  sprintf(&arr,"%03d",(int)(mmhg));
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb96 	bl	8001110 <__aeabi_f2iz>
 80019e4:	4602      	mov	r2, r0
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	491c      	ldr	r1, [pc, #112]	; (8001a5c <display_mmhgValueUpdateToDisplay+0x11c>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f008 fa21 	bl	8009e34 <siprintf>


	  for(uint8_t i= 6 ;i <=6+iteration ; i++)
 80019f2:	2306      	movs	r3, #6
 80019f4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 80019f8:	e015      	b.n	8001a26 <display_mmhgValueUpdateToDisplay+0xe6>
	  {
		  _mmhgPayLoad[i] =  arr[j];
 80019fa:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 80019fe:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a02:	3260      	adds	r2, #96	; 0x60
 8001a04:	443a      	add	r2, r7
 8001a06:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8001a0a:	3360      	adds	r3, #96	; 0x60
 8001a0c:	443b      	add	r3, r7
 8001a0e:	f803 2c40 	strb.w	r2, [r3, #-64]
		  j++;
 8001a12:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001a16:	3301      	adds	r3, #1
 8001a18:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	  for(uint8_t i= 6 ;i <=6+iteration ; i++)
 8001a1c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001a20:	3301      	adds	r3, #1
 8001a22:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001a26:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8001a2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001a2e:	3306      	adds	r3, #6
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dde2      	ble.n	80019fa <display_mmhgValueUpdateToDisplay+0xba>
	  }

//	  if(runStopFlag != 2)//stop button clicked if value is 2
//	  {
		  HAL_UART_Transmit(&huart2, &_mmhgPayLoad, 9, HAL_MAX_DELAY);
 8001a34:	f107 0120 	add.w	r1, r7, #32
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3c:	2209      	movs	r2, #9
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <display_mmhgValueUpdateToDisplay+0x120>)
 8001a40:	f006 fc14 	bl	800826c <HAL_UART_Transmit>
//	  }

	  memset(_mmhgPayLoad,0,_mmhglen);
 8001a44:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8001a48:	f107 0320 	add.w	r3, r7, #32
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f008 fa53 	bl	8009efa <memset>


}
 8001a54:	bf00      	nop
 8001a56:	3760      	adds	r7, #96	; 0x60
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5c:	0800d704 	.word	0x0800d704
 8001a60:	200004e8 	.word	0x200004e8

08001a64 <display_secUpdate>:


static void display_secUpdate(controller_params *display )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0a0      	sub	sp, #128	; 0x80
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	uint8_t _arr[100];
	memset(_arr,0, sizeof(_arr));
 8001a6c:	f107 0318 	add.w	r3, r7, #24
 8001a70:	2264      	movs	r2, #100	; 0x64
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f008 fa40 	bl	8009efa <memset>

	_arr[0]		= 	0x5A 	;
 8001a7a:	235a      	movs	r3, #90	; 0x5a
 8001a7c:	763b      	strb	r3, [r7, #24]
	_arr[1]		= 	0xA5	;
 8001a7e:	23a5      	movs	r3, #165	; 0xa5
 8001a80:	767b      	strb	r3, [r7, #25]
	_arr[2]		=	0x05	;
 8001a82:	2305      	movs	r3, #5
 8001a84:	76bb      	strb	r3, [r7, #26]
	_arr[3]		=	0x82	;
 8001a86:	2382      	movs	r3, #130	; 0x82
 8001a88:	76fb      	strb	r3, [r7, #27]
	_arr[4]		=	0x16	;
 8001a8a:	2316      	movs	r3, #22
 8001a8c:	773b      	strb	r3, [r7, #28]
	_arr[5]		=	0x00	;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	777b      	strb	r3, [r7, #29]


	uint8_t _sec		=	(display->sec)	;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7c5b      	ldrb	r3, [r3, #17]
 8001a96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	uint8_t arr[10] 			;
	uint8_t iter		=	0	;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	uint8_t j			=	0	;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

	memset(arr,0,sizeof(arr));
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	220a      	movs	r2, #10
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f008 fa23 	bl	8009efa <memset>


	while(_sec > 0)
 8001ab4:	e00c      	b.n	8001ad0 <display_secUpdate+0x6c>
	{
		_sec 		=	_sec/10		;
 8001ab6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001aba:	4a29      	ldr	r2, [pc, #164]	; (8001b60 <display_secUpdate+0xfc>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		iter++;
 8001ac6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001aca:	3301      	adds	r3, #1
 8001acc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
	while(_sec > 0)
 8001ad0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1ee      	bne.n	8001ab6 <display_secUpdate+0x52>
	}
	sprintf(&arr,"%02d",(display->sec));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7c5b      	ldrb	r3, [r3, #17]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	491f      	ldr	r1, [pc, #124]	; (8001b64 <display_secUpdate+0x100>)
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f008 f9a4 	bl	8009e34 <siprintf>

	for(uint8_t i= 6 ; i<=6+iter ;i++)
 8001aec:	2306      	movs	r3, #6
 8001aee:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8001af2:	e015      	b.n	8001b20 <display_secUpdate+0xbc>
	{
		_arr[i] = arr[j];
 8001af4:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 8001af8:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001afc:	3280      	adds	r2, #128	; 0x80
 8001afe:	443a      	add	r2, r7
 8001b00:	f812 2c74 	ldrb.w	r2, [r2, #-116]
 8001b04:	3380      	adds	r3, #128	; 0x80
 8001b06:	443b      	add	r3, r7
 8001b08:	f803 2c68 	strb.w	r2, [r3, #-104]
		j++;
 8001b0c:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8001b10:	3301      	adds	r3, #1
 8001b12:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
	for(uint8_t i= 6 ; i<=6+iter ;i++)
 8001b16:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8001b20:	f897 207c 	ldrb.w	r2, [r7, #124]	; 0x7c
 8001b24:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001b28:	3306      	adds	r3, #6
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	dde2      	ble.n	8001af4 <display_secUpdate+0x90>
	}
	if( (display->runStopButton != 2) )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d007      	beq.n	8001b48 <display_secUpdate+0xe4>
	{
		HAL_UART_Transmit(&huart2, &_arr, 8, HAL_MAX_DELAY);
 8001b38:	f107 0118 	add.w	r1, r7, #24
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	2208      	movs	r2, #8
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <display_secUpdate+0x104>)
 8001b44:	f006 fb92 	bl	800826c <HAL_UART_Transmit>
	}

	memset(_arr,0,sizeof(_arr));
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	2264      	movs	r2, #100	; 0x64
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f008 f9d2 	bl	8009efa <memset>

}
 8001b56:	bf00      	nop
 8001b58:	3780      	adds	r7, #128	; 0x80
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	0800d70c 	.word	0x0800d70c
 8001b68:	200004e8 	.word	0x200004e8

08001b6c <display_runTimeUpdateToDisplay>:


void display_runTimeUpdateToDisplay(controller_params *display,uint64_t currenttime)
{
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b0be      	sub	sp, #248	; 0xf8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	e9c7 2300 	strd	r2, r3, [r7]
	uint8_t _arr[100];
	memset(_arr,0, sizeof(_arr));
 8001b78:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b7c:	2264      	movs	r2, #100	; 0x64
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f008 f9ba 	bl	8009efa <memset>



	uint8_t buff[100];
	memset(buff,0, sizeof(buff));
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	2264      	movs	r2, #100	; 0x64
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 f9b3 	bl	8009efa <memset>
	uint64_t  ms = currenttime -	display->runTime	;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b9e:	1a84      	subs	r4, r0, r2
 8001ba0:	eb61 0503 	sbc.w	r5, r1, r3
 8001ba4:	e9c7 453a 	strd	r4, r5, [r7, #232]	; 0xe8
	display->sec = (ms/1000);
 8001ba8:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	f7ff faf2 	bl	800119c <__aeabi_uldivmod>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	745a      	strb	r2, [r3, #17]

	display_secUpdate(display);
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff ff4e 	bl	8001a64 <display_secUpdate>

	_arr[0]		= 	0x5A 	;
 8001bc8:	235a      	movs	r3, #90	; 0x5a
 8001bca:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	_arr[1]		= 	0xA5	;
 8001bce:	23a5      	movs	r3, #165	; 0xa5
 8001bd0:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	_arr[2]		=	0x05	;
 8001bd4:	2305      	movs	r3, #5
 8001bd6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	_arr[3]		=	0x82	;
 8001bda:	2382      	movs	r3, #130	; 0x82
 8001bdc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	_arr[4]		=	0x15	;
 8001be0:	2315      	movs	r3, #21
 8001be2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
	_arr[5]		=	0x00	;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89


	if(display->sec == 60 )
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	7c5b      	ldrb	r3, [r3, #17]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b3c      	cmp	r3, #60	; 0x3c
 8001bf4:	d10e      	bne.n	8001c14 <display_runTimeUpdateToDisplay+0xa8>
	{
		display->runTime = currenttime ;
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
		display->sec =0;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	745a      	strb	r2, [r3, #17]
		display->min++;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	7c1b      	ldrb	r3, [r3, #16]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	741a      	strb	r2, [r3, #16]
//		memset(_arr,0,sizeof(_arr));
	}

	uint8_t _min		= (display->min)	;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	7c1b      	ldrb	r3, [r3, #16]
 8001c18:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
	uint8_t arr[10] 			;
	uint8_t iter		=	0	;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	uint8_t j			=	0	;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5

	memset(arr,0,sizeof(arr));
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	220a      	movs	r2, #10
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f008 f962 	bl	8009efa <memset>

	while(_min > 0)
 8001c36:	e00c      	b.n	8001c52 <display_runTimeUpdateToDisplay+0xe6>
	{
		_min 		=	_min/10		;
 8001c38:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001c3c:	4a25      	ldr	r2, [pc, #148]	; (8001cd4 <display_runTimeUpdateToDisplay+0x168>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	08db      	lsrs	r3, r3, #3
 8001c44:	f887 30f7 	strb.w	r3, [r7, #247]	; 0xf7
		iter++;
 8001c48:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
	while(_min > 0)
 8001c52:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ee      	bne.n	8001c38 <display_runTimeUpdateToDisplay+0xcc>
	}
	sprintf(&arr,"%02d",display->min);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	7c1b      	ldrb	r3, [r3, #16]
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	491c      	ldr	r1, [pc, #112]	; (8001cd8 <display_runTimeUpdateToDisplay+0x16c>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f008 f8e3 	bl	8009e34 <siprintf>

	for(uint8_t i= 6 ; i<=6+iter ;i++)
 8001c6e:	2306      	movs	r3, #6
 8001c70:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8001c74:	e015      	b.n	8001ca2 <display_runTimeUpdateToDisplay+0x136>
	{
		_arr[i] = arr[j];
 8001c76:	f897 20f5 	ldrb.w	r2, [r7, #245]	; 0xf5
 8001c7a:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8001c7e:	32f8      	adds	r2, #248	; 0xf8
 8001c80:	443a      	add	r2, r7
 8001c82:	f812 2ce4 	ldrb.w	r2, [r2, #-228]
 8001c86:	33f8      	adds	r3, #248	; 0xf8
 8001c88:	443b      	add	r3, r7
 8001c8a:	f803 2c74 	strb.w	r2, [r3, #-116]
		j++;
 8001c8e:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 8001c92:	3301      	adds	r3, #1
 8001c94:	f887 30f5 	strb.w	r3, [r7, #245]	; 0xf5
	for(uint8_t i= 6 ; i<=6+iter ;i++)
 8001c98:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
 8001ca2:	f897 20f4 	ldrb.w	r2, [r7, #244]	; 0xf4
 8001ca6:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 8001caa:	3306      	adds	r3, #6
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dde2      	ble.n	8001c76 <display_runTimeUpdateToDisplay+0x10a>
	}

	if( ( display->runStopButton != 2 )  )//stop button value 2
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <display_runTimeUpdateToDisplay+0x15e>
	{
		HAL_UART_Transmit(&huart2, _arr, 8, HAL_MAX_DELAY);
 8001cba:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4805      	ldr	r0, [pc, #20]	; (8001cdc <display_runTimeUpdateToDisplay+0x170>)
 8001cc6:	f006 fad1 	bl	800826c <HAL_UART_Transmit>
	}


}
 8001cca:	bf00      	nop
 8001ccc:	37f8      	adds	r7, #248	; 0xf8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	0800d70c 	.word	0x0800d70c
 8001cdc:	200004e8 	.word	0x200004e8

08001ce0 <getTargetAddr>:



static void getTargetAddr(uint8_t *_arr, uint8_t _arrSize,uint16_t targetAddr , uint8_t value)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	70fb      	strb	r3, [r7, #3]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	803b      	strh	r3, [r7, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	70bb      	strb	r3, [r7, #2]
	_arr[0]		= 	0x5A 	;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	225a      	movs	r2, #90	; 0x5a
 8001cfe:	701a      	strb	r2, [r3, #0]
	_arr[1]		= 	0xA5	;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3301      	adds	r3, #1
 8001d04:	22a5      	movs	r2, #165	; 0xa5
 8001d06:	701a      	strb	r2, [r3, #0]
	_arr[2]		=	0x05	;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	701a      	strb	r2, [r3, #0]
	_arr[3]		=	0x82	;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3303      	adds	r3, #3
 8001d14:	2282      	movs	r2, #130	; 0x82
 8001d16:	701a      	strb	r2, [r3, #0]
	_arr[5]		=	targetAddr>>0	;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3305      	adds	r3, #5
 8001d1c:	883a      	ldrh	r2, [r7, #0]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
	_arr[4]		=	targetAddr>>8 	;
 8001d22:	883b      	ldrh	r3, [r7, #0]
 8001d24:	0a1b      	lsrs	r3, r3, #8
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]
//		memset(data,0,sizeof(data));
//		sprintf(data," tr :%d\n",targetAddr>>8);
//	uint8_t data = targetAddr>>0 ;
//		HAL_UART_Transmit(&huart1, &data, sizeof(data), HAL_MAX_DELAY);

	uint8_t _srNo		=	value	;
 8001d30:	78bb      	ldrb	r3, [r7, #2]
 8001d32:	75fb      	strb	r3, [r7, #23]
	uint8_t arr[10] 			;
	uint8_t iter		=	0	;
 8001d34:	2300      	movs	r3, #0
 8001d36:	75bb      	strb	r3, [r7, #22]
	uint8_t j			=	0	;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	757b      	strb	r3, [r7, #21]


	memset(arr,0,sizeof(arr));
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	220a      	movs	r2, #10
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f008 f8d8 	bl	8009efa <memset>


	while(_srNo > 0)
 8001d4a:	e008      	b.n	8001d5e <getTargetAddr+0x7e>
	{
		_srNo 		=	_srNo/10		;
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <getTargetAddr+0xc8>)
 8001d50:	fba2 2303 	umull	r2, r3, r2, r3
 8001d54:	08db      	lsrs	r3, r3, #3
 8001d56:	75fb      	strb	r3, [r7, #23]
		iter++;
 8001d58:	7dbb      	ldrb	r3, [r7, #22]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	75bb      	strb	r3, [r7, #22]
	while(_srNo > 0)
 8001d5e:	7dfb      	ldrb	r3, [r7, #23]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f3      	bne.n	8001d4c <getTargetAddr+0x6c>
	}
	sprintf(&arr,"%02d",value);
 8001d64:	78ba      	ldrb	r2, [r7, #2]
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4910      	ldr	r1, [pc, #64]	; (8001dac <getTargetAddr+0xcc>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f008 f861 	bl	8009e34 <siprintf>


	for(uint8_t i= 6 ; i<8 ;i++)
 8001d72:	2306      	movs	r3, #6
 8001d74:	753b      	strb	r3, [r7, #20]
 8001d76:	e00e      	b.n	8001d96 <getTargetAddr+0xb6>
	{
		_arr[i] = arr[j];
 8001d78:	7d7a      	ldrb	r2, [r7, #21]
 8001d7a:	7d3b      	ldrb	r3, [r7, #20]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	440b      	add	r3, r1
 8001d80:	3218      	adds	r2, #24
 8001d82:	443a      	add	r2, r7
 8001d84:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001d88:	701a      	strb	r2, [r3, #0]
		j++;
 8001d8a:	7d7b      	ldrb	r3, [r7, #21]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	757b      	strb	r3, [r7, #21]
	for(uint8_t i= 6 ; i<8 ;i++)
 8001d90:	7d3b      	ldrb	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	753b      	strb	r3, [r7, #20]
 8001d96:	7d3b      	ldrb	r3, [r7, #20]
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d9ed      	bls.n	8001d78 <getTargetAddr+0x98>
	}


}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	cccccccd 	.word	0xcccccccd
 8001dac:	0800d70c 	.word	0x0800d70c

08001db0 <getTargetAddrfor16bit>:

static void getTargetAddrfor16bit(uint8_t *_arr, uint8_t _arrSize,uint16_t targetAddr , uint16_t value)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	4608      	mov	r0, r1
 8001dba:	4611      	mov	r1, r2
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	72fb      	strb	r3, [r7, #11]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	813b      	strh	r3, [r7, #8]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	80fb      	strh	r3, [r7, #6]
	_arr[0]		= 	0x5A 	;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	225a      	movs	r2, #90	; 0x5a
 8001dce:	701a      	strb	r2, [r3, #0]
	_arr[1]		= 	0xA5	;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	22a5      	movs	r2, #165	; 0xa5
 8001dd6:	701a      	strb	r2, [r3, #0]
	_arr[2]		=	0x06	;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3302      	adds	r3, #2
 8001ddc:	2206      	movs	r2, #6
 8001dde:	701a      	strb	r2, [r3, #0]
	_arr[3]		=	0x82	;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3303      	adds	r3, #3
 8001de4:	2282      	movs	r2, #130	; 0x82
 8001de6:	701a      	strb	r2, [r3, #0]
	_arr[5]		=	targetAddr>>0	;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3305      	adds	r3, #5
 8001dec:	893a      	ldrh	r2, [r7, #8]
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	701a      	strb	r2, [r3, #0]
	_arr[4]		=	targetAddr>>8 	;
 8001df2:	893b      	ldrh	r3, [r7, #8]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

	uint16_t _srNo		=	value	;
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	83fb      	strh	r3, [r7, #30]
	uint8_t arr[10] 			;
	uint8_t iter		=	0	;
 8001e04:	2300      	movs	r3, #0
 8001e06:	777b      	strb	r3, [r7, #29]
	uint8_t j			=	0	;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	773b      	strb	r3, [r7, #28]


	memset(arr,0,sizeof(arr));
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	220a      	movs	r2, #10
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f008 f870 	bl	8009efa <memset>


	while(_srNo > 0)
 8001e1a:	e008      	b.n	8001e2e <getTargetAddrfor16bit+0x7e>
	{
		_srNo 		=	_srNo/10		;
 8001e1c:	8bfb      	ldrh	r3, [r7, #30]
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <getTargetAddrfor16bit+0xc8>)
 8001e20:	fba2 2303 	umull	r2, r3, r2, r3
 8001e24:	08db      	lsrs	r3, r3, #3
 8001e26:	83fb      	strh	r3, [r7, #30]
		iter++	;
 8001e28:	7f7b      	ldrb	r3, [r7, #29]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	777b      	strb	r3, [r7, #29]
	while(_srNo > 0)
 8001e2e:	8bfb      	ldrh	r3, [r7, #30]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f3      	bne.n	8001e1c <getTargetAddrfor16bit+0x6c>
	}
	sprintf(&arr,"%03d",value);
 8001e34:	88fa      	ldrh	r2, [r7, #6]
 8001e36:	f107 0310 	add.w	r3, r7, #16
 8001e3a:	4910      	ldr	r1, [pc, #64]	; (8001e7c <getTargetAddrfor16bit+0xcc>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 fff9 	bl	8009e34 <siprintf>


	for(uint8_t i= 6 ; i<10 ;i++)
 8001e42:	2306      	movs	r3, #6
 8001e44:	76fb      	strb	r3, [r7, #27]
 8001e46:	e00e      	b.n	8001e66 <getTargetAddrfor16bit+0xb6>
	{
		_arr[i] = arr[j];
 8001e48:	7f3a      	ldrb	r2, [r7, #28]
 8001e4a:	7efb      	ldrb	r3, [r7, #27]
 8001e4c:	68f9      	ldr	r1, [r7, #12]
 8001e4e:	440b      	add	r3, r1
 8001e50:	3220      	adds	r2, #32
 8001e52:	443a      	add	r2, r7
 8001e54:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8001e58:	701a      	strb	r2, [r3, #0]
		j++;
 8001e5a:	7f3b      	ldrb	r3, [r7, #28]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	773b      	strb	r3, [r7, #28]
	for(uint8_t i= 6 ; i<10 ;i++)
 8001e60:	7efb      	ldrb	r3, [r7, #27]
 8001e62:	3301      	adds	r3, #1
 8001e64:	76fb      	strb	r3, [r7, #27]
 8001e66:	7efb      	ldrb	r3, [r7, #27]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d9ed      	bls.n	8001e48 <getTargetAddrfor16bit+0x98>
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	3720      	adds	r7, #32
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	0800d704 	.word	0x0800d704

08001e80 <profile_write_serialNo_details_update>:

/*
 * profile write page methods are below
 */
void profile_write_serialNo_details_update(uint8_t serNo, ProfileWrieParamAddrs *writeProfileParamsAddrs, uint8_t *serialNoReadFlag, uint8_t *displayUartFlag)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b094      	sub	sp, #80	; 0x50
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60b9      	str	r1, [r7, #8]
 8001e88:	607a      	str	r2, [r7, #4]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	73fb      	strb	r3, [r7, #15]
	if(*serialNoReadFlag == 1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	f040 80a4 	bne.w	8001fe2 <profile_write_serialNo_details_update+0x162>
		/** below detials are for send serial NO. */

		uint8_t _arr[50] ;

		//below code is for write Serial number to display for eeprom
		memset(_arr , 0 , sizeof(_arr));
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	2232      	movs	r2, #50	; 0x32
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f008 f829 	bl	8009efa <memset>
		getTargetAddr(_arr, sizeof(_arr),writeProfileParamsAddrs->srNoAddr , serNo) ;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	881a      	ldrh	r2, [r3, #0]
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	f107 0014 	add.w	r0, r7, #20
 8001eb2:	2132      	movs	r1, #50	; 0x32
 8001eb4:	f7ff ff14 	bl	8001ce0 <getTargetAddr>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe f947 	bl	8000150 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f107 0114 	add.w	r1, r7, #20
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	4847      	ldr	r0, [pc, #284]	; (8001fec <profile_write_serialNo_details_update+0x16c>)
 8001ed0:	f006 f9cc 	bl	800826c <HAL_UART_Transmit>
		HAL_Delay(100);
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f002 ffaf 	bl	8004e38 <HAL_Delay>

		//below code is for Read data from Eeprom based on Serial number
		memset(_arr,0,sizeof(_arr));
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	2232      	movs	r2, #50	; 0x32
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f008 f809 	bl	8009efa <memset>
		uint8_t eepromRead[5] = {0};
 8001ee8:	2300      	movs	r3, #0
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		readEe24(eepromRead,sizeof(eepromRead),serNo);
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ef8:	2105      	movs	r1, #5
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 fcc8 	bl	8003890 <readEe24>

		uint16_t __mmhg = eepromRead[1] << 0 | eepromRead[2] << 8 ;
 8001f00:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
//		uint8_t data[30];

		//below code is for write mmhg value to display from EEprom with respect to serial number
		memset(_arr , 0 , sizeof(_arr));
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	2232      	movs	r2, #50	; 0x32
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f007 ffeb 	bl	8009efa <memset>
		getTargetAddrfor16bit(_arr, sizeof(_arr),writeProfileParamsAddrs->mmhgAddr, __mmhg) ;
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	885a      	ldrh	r2, [r3, #2]
 8001f28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f2c:	f107 0014 	add.w	r0, r7, #20
 8001f30:	2132      	movs	r1, #50	; 0x32
 8001f32:	f7ff ff3d 	bl	8001db0 <getTargetAddrfor16bit>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe f908 	bl	8000150 <strlen>
 8001f40:	4603      	mov	r3, r0
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	f107 0114 	add.w	r1, r7, #20
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4c:	4827      	ldr	r0, [pc, #156]	; (8001fec <profile_write_serialNo_details_update+0x16c>)
 8001f4e:	f006 f98d 	bl	800826c <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart1, &_arr, strlen(_arr), HAL_MAX_DELAY);
		HAL_Delay(100);
 8001f52:	2064      	movs	r0, #100	; 0x64
 8001f54:	f002 ff70 	bl	8004e38 <HAL_Delay>

		//belowcode is for profile write min to display from eeprom with respect to Serial number
		memset(_arr , 0 , sizeof(_arr));
 8001f58:	f107 0314 	add.w	r3, r7, #20
 8001f5c:	2232      	movs	r2, #50	; 0x32
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f007 ffca 	bl	8009efa <memset>
		getTargetAddr(_arr, sizeof(_arr),writeProfileParamsAddrs->minAddr, eepromRead[3]) ;
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	889a      	ldrh	r2, [r3, #4]
 8001f6a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001f6e:	f107 0014 	add.w	r0, r7, #20
 8001f72:	2132      	movs	r1, #50	; 0x32
 8001f74:	f7ff feb4 	bl	8001ce0 <getTargetAddr>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe f8e7 	bl	8000150 <strlen>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	f107 0114 	add.w	r1, r7, #20
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	4817      	ldr	r0, [pc, #92]	; (8001fec <profile_write_serialNo_details_update+0x16c>)
 8001f90:	f006 f96c 	bl	800826c <HAL_UART_Transmit>
		HAL_Delay(100);
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	f002 ff4f 	bl	8004e38 <HAL_Delay>

		//below code is for profile write sec to display from eeprom with respect to Serial number
		memset(_arr , 0 , sizeof(_arr));
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	2232      	movs	r2, #50	; 0x32
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f007 ffa9 	bl	8009efa <memset>
		getTargetAddr(_arr, sizeof(_arr),writeProfileParamsAddrs->secAddr, eepromRead[4]) ;
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	88da      	ldrh	r2, [r3, #6]
 8001fac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fb0:	f107 0014 	add.w	r0, r7, #20
 8001fb4:	2132      	movs	r1, #50	; 0x32
 8001fb6:	f7ff fe93 	bl	8001ce0 <getTargetAddr>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe f8c6 	bl	8000150 <strlen>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f107 0114 	add.w	r1, r7, #20
 8001fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd0:	4806      	ldr	r0, [pc, #24]	; (8001fec <profile_write_serialNo_details_update+0x16c>)
 8001fd2:	f006 f94b 	bl	800826c <HAL_UART_Transmit>
		HAL_Delay(100);
 8001fd6:	2064      	movs	r0, #100	; 0x64
 8001fd8:	f002 ff2e 	bl	8004e38 <HAL_Delay>

		*serialNoReadFlag = 2;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	701a      	strb	r2, [r3, #0]
//		*serialNoReadFlag == 0 ;


	}

}
 8001fe2:	bf00      	nop
 8001fe4:	3750      	adds	r7, #80	; 0x50
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200004e8 	.word	0x200004e8

08001ff0 <profile_page_change>:
        str[len - n] = '\0';
    }
}

static void profile_page_change(uint8_t value)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
//	if(addr == 0)//home Page
//	{

		uint8_t nextPage_buff[] = { 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01, 00, value } ;
 8001ffa:	235a      	movs	r3, #90	; 0x5a
 8001ffc:	733b      	strb	r3, [r7, #12]
 8001ffe:	23a5      	movs	r3, #165	; 0xa5
 8002000:	737b      	strb	r3, [r7, #13]
 8002002:	2307      	movs	r3, #7
 8002004:	73bb      	strb	r3, [r7, #14]
 8002006:	2382      	movs	r3, #130	; 0x82
 8002008:	73fb      	strb	r3, [r7, #15]
 800200a:	2300      	movs	r3, #0
 800200c:	743b      	strb	r3, [r7, #16]
 800200e:	2384      	movs	r3, #132	; 0x84
 8002010:	747b      	strb	r3, [r7, #17]
 8002012:	235a      	movs	r3, #90	; 0x5a
 8002014:	74bb      	strb	r3, [r7, #18]
 8002016:	2301      	movs	r3, #1
 8002018:	74fb      	strb	r3, [r7, #19]
 800201a:	2300      	movs	r3, #0
 800201c:	753b      	strb	r3, [r7, #20]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	757b      	strb	r3, [r7, #21]
		HAL_UART_Transmit(&huart2, &nextPage_buff, sizeof(nextPage_buff), HAL_MAX_DELAY);
 8002022:	f107 010c 	add.w	r1, r7, #12
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	220a      	movs	r2, #10
 800202c:	4804      	ldr	r0, [pc, #16]	; (8002040 <profile_page_change+0x50>)
 800202e:	f006 f91d 	bl	800826c <HAL_UART_Transmit>
		current_page = PROFILE_HOME_PAGE ;
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <profile_page_change+0x54>)
 8002034:	22c8      	movs	r2, #200	; 0xc8
 8002036:	701a      	strb	r2, [r3, #0]
//	}


}
 8002038:	bf00      	nop
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200004e8 	.word	0x200004e8
 8002044:	20000001 	.word	0x20000001

08002048 <profile_write_details_to_ee24>:

void profile_write_details_to_ee24(uint8_t serialNo ,uint8_t *writeButtonFlag, home_page_t *homePage_t, uint8_t *serialNoReadFlag, uint8_t *displayUartFlag, ProfileWrieParamAddrs *writeProfileParamsAddrs )
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b09e      	sub	sp, #120	; 0x78
 800204c:	af00      	add	r7, sp, #0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]

	if(*writeButtonFlag == 1)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 8088 	bne.w	8002172 <profile_write_details_to_ee24+0x12a>
	{
		uint8_t flag = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

		if(*serialNoReadFlag == 3)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b03      	cmp	r3, #3
 800206e:	d11d      	bne.n	80020ac <profile_write_details_to_ee24+0x64>
		{
			flag = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			ee24Params params = {
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
					.mmhg		=	homePage_t->mmhg,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	881b      	ldrh	r3, [r3, #0]
			ee24Params params = {
 8002080:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
					.setMin		=	homePage_t->setMin,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	789b      	ldrb	r3, [r3, #2]
			ee24Params params = {
 8002088:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
					.setSec		=	homePage_t->setSec,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	78db      	ldrb	r3, [r3, #3]
			ee24Params params = {
 8002090:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
					.serialNum	=	serialNo
			};
			writeEe24(&params);
 8002094:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002098:	4618      	mov	r0, r3
 800209a:	f001 fb5b 	bl	8003754 <writeEe24>
			profile_page_change(HOME_PAGE_NUMBER);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7ff ffa6 	bl	8001ff0 <profile_page_change>
			*serialNoReadFlag = 0 ;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e05f      	b.n	800216c <profile_write_details_to_ee24+0x124>

		}
		else if( flag == 0)
 80020ac:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d15b      	bne.n	800216c <profile_write_details_to_ee24+0x124>
		{
			uint8_t data[30];
			memset(data,0,sizeof(data));
 80020b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020b8:	221e      	movs	r2, #30
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f007 ff1c 	bl	8009efa <memset>
			sprintf(data," write button clieked without serial No!!\n");
 80020c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020c6:	492d      	ldr	r1, [pc, #180]	; (800217c <profile_write_details_to_ee24+0x134>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f007 feb3 	bl	8009e34 <siprintf>
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 80020ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe f83c 	bl	8000150 <strlen>
 80020d8:	4603      	mov	r3, r0
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	4826      	ldr	r0, [pc, #152]	; (8002180 <profile_write_details_to_ee24+0x138>)
 80020e6:	f006 f8c1 	bl	800826c <HAL_UART_Transmit>
			uint8_t _arr[50] = { 0 } ;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	222e      	movs	r2, #46	; 0x2e
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f007 feff 	bl	8009efa <memset>
			//below code is for write Warning to display for eeprom
			_arr[0]		= 	0x5A 	;
 80020fc:	235a      	movs	r3, #90	; 0x5a
 80020fe:	753b      	strb	r3, [r7, #20]
			_arr[1]		= 	0xA5	;
 8002100:	23a5      	movs	r3, #165	; 0xa5
 8002102:	757b      	strb	r3, [r7, #21]
			_arr[2]		=	0x32	;
 8002104:	2332      	movs	r3, #50	; 0x32
 8002106:	75bb      	strb	r3, [r7, #22]
			_arr[3]		=	0x82	;
 8002108:	2382      	movs	r3, #130	; 0x82
 800210a:	75fb      	strb	r3, [r7, #23]
			_arr[5]		=	writeProfileParamsAddrs->warningAddr>>0		;
 800210c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002110:	891b      	ldrh	r3, [r3, #8]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	767b      	strb	r3, [r7, #25]
			_arr[4]		=	writeProfileParamsAddrs->warningAddr>>8 	;
 8002116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800211a:	891b      	ldrh	r3, [r3, #8]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b29b      	uxth	r3, r3
 8002120:	b2db      	uxtb	r3, r3
 8002122:	763b      	strb	r3, [r7, #24]
			uint8_t * warningStr ="please enter the serial No:(";
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <profile_write_details_to_ee24+0x13c>)
 8002126:	673b      	str	r3, [r7, #112]	; 0x70
			strcat(_arr,warningStr);
 8002128:	f107 0314 	add.w	r3, r7, #20
 800212c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800212e:	4618      	mov	r0, r3
 8002130:	f007 feeb 	bl	8009f0a <strcat>
			HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002134:	f107 0314 	add.w	r3, r7, #20
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f809 	bl	8000150 <strlen>
 800213e:	4603      	mov	r3, r0
 8002140:	b29a      	uxth	r2, r3
 8002142:	f107 0114 	add.w	r1, r7, #20
 8002146:	f04f 33ff 	mov.w	r3, #4294967295
 800214a:	480f      	ldr	r0, [pc, #60]	; (8002188 <profile_write_details_to_ee24+0x140>)
 800214c:	f006 f88e 	bl	800826c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4618      	mov	r0, r3
 8002156:	f7fd fffb 	bl	8000150 <strlen>
 800215a:	4603      	mov	r3, r0
 800215c:	b29a      	uxth	r2, r3
 800215e:	f107 0114 	add.w	r1, r7, #20
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <profile_write_details_to_ee24+0x140>)
 8002168:	f006 f880 	bl	800826c <HAL_UART_Transmit>
//			strdecat(_arr,strlen(warningStr));
//			HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
//			uint8_t *warningStrEmp = ""
		}

		*writeButtonFlag = 0 ;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
	}
//	*displayUartFlag = 0 ;

}
 8002172:	bf00      	nop
 8002174:	3778      	adds	r7, #120	; 0x78
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	0800d714 	.word	0x0800d714
 8002180:	200004a0 	.word	0x200004a0
 8002184:	0800d740 	.word	0x0800d740
 8002188:	200004e8 	.word	0x200004e8

0800218c <profile_write_serialNo_read>:

void profile_write_serialNo_read( uint8_t *displayUartFlag, uint8_t *op, uint8_t *serialNo_read_flag,uint8_t *write_button_flag) //,uint8_t rxBufferCount
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b0d1      	sub	sp, #324	; 0x144
 8002190:	af00      	add	r7, sp, #0
 8002192:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8002196:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800219a:	6020      	str	r0, [r4, #0]
 800219c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80021a0:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80021a4:	6001      	str	r1, [r0, #0]
 80021a6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80021aa:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80021ae:	600a      	str	r2, [r1, #0]
 80021b0:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80021b4:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80021b8:	6013      	str	r3, [r2, #0]
	/** example packate  = 5A A5 0A 83 90 06 03 5A 02 39 38 FF FF #98 */
	uint8_t tempbuff[MAX_MODEM_RX_BUFF] = {0};
 80021ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	3304      	adds	r3, #4
 80021c8:	22f6      	movs	r2, #246	; 0xf6
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 fe94 	bl	8009efa <memset>
	char 	*c 				= NULL ;
 80021d2:	2300      	movs	r3, #0
 80021d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	uint8_t indexX = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	uint8_t size = 0 ;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint8_t receivedBuff[2]= {0} ;
 80021e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ec:	2200      	movs	r2, #0
 80021ee:	801a      	strh	r2, [r3, #0]

	uint8_t read_serialNo_addr[] = { 0x90,0x06 } ;
 80021f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80021f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021f8:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80021fc:	801a      	strh	r2, [r3, #0]
	uint8_t home_page_buff[]	= { 0x5A, 0xA5, 0x06, 0x83, 0x99, 0x99, 0x01, 0x00, 0x01 }	;
 80021fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002202:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002206:	4a7b      	ldr	r2, [pc, #492]	; (80023f4 <profile_write_serialNo_read+0x268>)
 8002208:	ca07      	ldmia	r2, {r0, r1, r2}
 800220a:	c303      	stmia	r3!, {r0, r1}
 800220c:	701a      	strb	r2, [r3, #0]
	uint8_t write_button_buff[]	= { 0x5A, 0xA5, 0x06, 0x83, 0x90, 0x08, 0x01, 0x00, 0x01 }	;
 800220e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002212:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002216:	4a78      	ldr	r2, [pc, #480]	; (80023f8 <profile_write_serialNo_read+0x26c>)
 8002218:	ca07      	ldmia	r2, {r0, r1, r2}
 800221a:	c303      	stmia	r3!, {r0, r1}
 800221c:	701a      	strb	r2, [r3, #0]
	home_page_buff[sizeof(home_page_buff) -  1 ] 				=	'\0'	;
 800221e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002222:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002226:	2200      	movs	r2, #0
 8002228:	721a      	strb	r2, [r3, #8]
	read_serialNo_addr[sizeof(read_serialNo_addr) -  1 ] 		=	'\0'	;
 800222a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800222e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002232:	2200      	movs	r2, #0
 8002234:	705a      	strb	r2, [r3, #1]
	write_button_buff[sizeof(write_button_buff) -  1 ] 			=	'\0'	;
 8002236:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800223a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800223e:	2200      	movs	r2, #0
 8002240:	721a      	strb	r2, [r3, #8]

	if( *displayUartFlag == 1)
 8002242:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002246:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b01      	cmp	r3, #1
 8002250:	f040 80cb 	bne.w	80023ea <profile_write_serialNo_read+0x25e>
	{
		HAL_Delay(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f002 fdef 	bl	8004e38 <HAL_Delay>

		for(int i=0; i< rxBufferCount ; i++)
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002260:	e012      	b.n	8002288 <profile_write_serialNo_read+0xfc>
		{
			tempbuff[i] = modemRxBuff[i];
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <profile_write_serialNo_read+0x270>)
 8002264:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002268:	4413      	add	r3, r2
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002270:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8002274:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002278:	4413      	add	r3, r2
 800227a:	460a      	mov	r2, r1
 800227c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i< rxBufferCount ; i++)
 800227e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002288:	4b5d      	ldr	r3, [pc, #372]	; (8002400 <profile_write_serialNo_read+0x274>)
 800228a:	881b      	ldrh	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002294:	4293      	cmp	r3, r2
 8002296:	dbe4      	blt.n	8002262 <profile_write_serialNo_read+0xd6>
		}
		display_clearModemBuffer();
 8002298:	f7ff fb42 	bl	8001920 <display_clearModemBuffer>
//		HAL_UART_Transmit(&huart1, &tempbuff, strlen(tempbuff), HAL_MAX_DELAY);

		c = strstr((char *)tempbuff, (char *)read_serialNo_addr ) ;
 800229c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80022a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f007 fe3e 	bl	8009f28 <strstr>
 80022ac:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		if( c != NULL )
 80022b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d065      	beq.n	8002384 <profile_write_serialNo_read+0x1f8>
		{
			indexX = 0 ;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
			indexX = c - (char *)tempbuff ;
 80022be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022c2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f


			if(tempbuff[ indexX - 1 ]	==	0x83 )
 80022cc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80022d0:	3b01      	subs	r3, #1
 80022d2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80022d6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	2b83      	cmp	r3, #131	; 0x83
 80022de:	d151      	bne.n	8002384 <profile_write_serialNo_read+0x1f8>
			{
				if(tempbuff[ indexX - 2 ]	==	0x0A)
 80022e0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80022e4:	3b02      	subs	r3, #2
 80022e6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80022ea:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	2b0a      	cmp	r3, #10
 80022f2:	d147      	bne.n	8002384 <profile_write_serialNo_read+0x1f8>
				{
					size		= 0 ;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
					size 		= tempbuff[ indexX + 4 ] ;
 80022fa:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80022fe:	3304      	adds	r3, #4
 8002300:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002304:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002308:	5cd3      	ldrb	r3, [r2, r3]
 800230a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
					indexX 		= indexX + 5 ;
 800230e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002312:	3305      	adds	r3, #5
 8002314:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

					for(uint8_t i =0; i< size; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800231e:	e017      	b.n	8002350 <profile_write_serialNo_read+0x1c4>
					{
						receivedBuff[i] = tempbuff[indexX] ;
 8002320:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8002324:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002328:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800232c:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 8002330:	5c89      	ldrb	r1, [r1, r2]
 8002332:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002336:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800233a:	54d1      	strb	r1, [r2, r3]
						indexX++;
 800233c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8002340:	3301      	adds	r3, #1
 8002342:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
					for(uint8_t i =0; i< size; i++)
 8002346:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800234a:	3301      	adds	r3, #1
 800234c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002350:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8002354:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002358:	429a      	cmp	r2, r3
 800235a:	d3e1      	bcc.n	8002320 <profile_write_serialNo_read+0x194>
					}
					 *serialNo_read_flag = 1 ;//true
 800235c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002360:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
					 *op = atoi(receivedBuff);
 800236a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800236e:	4618      	mov	r0, r3
 8002370:	f006 fda4 	bl	8008ebc <atoi>
 8002374:	4603      	mov	r3, r0
 8002376:	b2da      	uxtb	r2, r3
 8002378:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800237c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	701a      	strb	r2, [r3, #0]

				}
			}

		}
		c = NULL ;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		c = strstr((char *)tempbuff, (char *)home_page_buff ) ;
 800238a:	f107 0220 	add.w	r2, r7, #32
 800238e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f007 fdc7 	bl	8009f28 <strstr>
 800239a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		if( c != NULL)
 800239e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <profile_write_serialNo_read+0x220>
		{
			current_page 	= 	PROFILE_HOME_PAGE	;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <profile_write_serialNo_read+0x278>)
 80023a8:	22c8      	movs	r2, #200	; 0xc8
 80023aa:	701a      	strb	r2, [r3, #0]
		}
		c = NULL ;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
		c = strstr((char *)tempbuff, (char *)write_button_buff ) ;
 80023b2:	f107 0214 	add.w	r2, r7, #20
 80023b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f007 fdb3 	bl	8009f28 <strstr>
 80023c2:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
		if( c != NULL)
 80023c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <profile_write_serialNo_read+0x250>
		{
			*write_button_flag = 1 ;//write command
 80023ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
		}


		*displayUartFlag = 0 ;
 80023dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]

	}

}
 80023ea:	bf00      	nop
 80023ec:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}
 80023f4:	0800d760 	.word	0x0800d760
 80023f8:	0800d76c 	.word	0x0800d76c
 80023fc:	20000200 	.word	0x20000200
 8002400:	20000530 	.word	0x20000530
 8002404:	20000001 	.word	0x20000001

08002408 <profile_home_read>:

/**
 * below code is written for Home Page
 */
void profile_home_read(uint64_t *currenttime, home_page_t *homePage_t,uint8_t *displayUartFlag, uint8_t *runStopFlag, uint8_t *timeOutFlag, controller_params *controllerParam)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b0f7      	sub	sp, #476	; 0x1dc
 800240c:	af00      	add	r7, sp, #0
 800240e:	f507 74ec 	add.w	r4, r7, #472	; 0x1d8
 8002412:	f5a4 74e6 	sub.w	r4, r4, #460	; 0x1cc
 8002416:	6020      	str	r0, [r4, #0]
 8002418:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 800241c:	f5a0 70e8 	sub.w	r0, r0, #464	; 0x1d0
 8002420:	6001      	str	r1, [r0, #0]
 8002422:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8002426:	f5a1 71ea 	sub.w	r1, r1, #468	; 0x1d4
 800242a:	600a      	str	r2, [r1, #0]
 800242c:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002430:	f5a2 72ec 	sub.w	r2, r2, #472	; 0x1d8
 8002434:	6013      	str	r3, [r2, #0]
	uint8_t tempbuff[MAX_MODEM_RX_BUFF] = {0};
 8002436:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800243a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	3304      	adds	r3, #4
 8002444:	22f6      	movs	r2, #246	; 0xf6
 8002446:	2100      	movs	r1, #0
 8002448:	4618      	mov	r0, r3
 800244a:	f007 fd56 	bl	8009efa <memset>
	char 	*c 				= NULL ;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	uint8_t indexX = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
	uint8_t size = 0 ;
 800245a:	2300      	movs	r3, #0
 800245c:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
	uint8_t receivedBuff[10]= {0} ;
 8002460:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002464:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	3304      	adds	r3, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	809a      	strh	r2, [r3, #4]
//	uint8_t setValueBuff[10]= { 0x00 } ;

	uint8_t profile_write_buff[]	= { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x90, 0x01, 0x00, 0x01 }	;
 8002474:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002478:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800247c:	4ac5      	ldr	r2, [pc, #788]	; (8002794 <profile_home_read+0x38c>)
 800247e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002480:	c303      	stmia	r3!, {r0, r1}
 8002482:	701a      	strb	r2, [r3, #0]
	uint8_t profile_load_buff[]		= { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x02, 0x01, 0x00, 0x01 }	;
 8002484:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800248c:	4ac2      	ldr	r2, [pc, #776]	; (8002798 <profile_home_read+0x390>)
 800248e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002490:	c303      	stmia	r3!, {r0, r1}
 8002492:	701a      	strb	r2, [r3, #0]
	uint8_t setMmhgAddr[]	= { 0x0F, 0xFF } ;
 8002494:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002498:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800249c:	f64f 720f 	movw	r2, #65295	; 0xff0f
 80024a0:	801a      	strh	r2, [r3, #0]
	uint8_t setMinAddr[]	= { 0x11, 0xFF } ;
 80024a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80024aa:	f64f 7211 	movw	r2, #65297	; 0xff11
 80024ae:	801a      	strh	r2, [r3, #0]
	uint8_t setSecAddr[]	= { 0x12, 0xFF } ;
 80024b0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80024b8:	f64f 7212 	movw	r2, #65298	; 0xff12
 80024bc:	801a      	strh	r2, [r3, #0]

	uint8_t runButtonBuff[]	= { 0x5A, 0xA5, 0x06, 0x83, 0x17, 0x00, 0x01, 0x00, 0x01 }	;
 80024be:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024c2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80024c6:	4ab5      	ldr	r2, [pc, #724]	; (800279c <profile_home_read+0x394>)
 80024c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024ca:	c303      	stmia	r3!, {r0, r1}
 80024cc:	701a      	strb	r2, [r3, #0]
	uint8_t StopButtonBuff[]= { 0x5A, 0xA5, 0x06, 0x83, 0x18, 0x00, 0x01, 0x10, 0x00 } 	;
 80024ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024d6:	4ab2      	ldr	r2, [pc, #712]	; (80027a0 <profile_home_read+0x398>)
 80024d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80024da:	c303      	stmia	r3!, {r0, r1}
 80024dc:	701a      	strb	r2, [r3, #0]



	profile_write_buff[sizeof(profile_write_buff) -  1 ] 				=	'\0'	;
 80024de:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80024e6:	2200      	movs	r2, #0
 80024e8:	721a      	strb	r2, [r3, #8]
	profile_load_buff[sizeof(profile_load_buff) -  1 ] 					=	'\0'	;
 80024ea:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80024f2:	2200      	movs	r2, #0
 80024f4:	721a      	strb	r2, [r3, #8]
	setMmhgAddr[sizeof(setMmhgAddr) - 1]								=	'\0' 	;
 80024f6:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80024fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
	setMinAddr[sizeof(setMinAddr) - 1 ]									=	'\0'	;
 8002502:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002506:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800250a:	2200      	movs	r2, #0
 800250c:	705a      	strb	r2, [r3, #1]
	setSecAddr[sizeof(setSecAddr) - 1]									=	'\0'	;
 800250e:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002512:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002516:	2200      	movs	r2, #0
 8002518:	705a      	strb	r2, [r3, #1]
	runButtonBuff[sizeof(runButtonBuff) - 1]							=	'\0'	;
 800251a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800251e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002522:	2200      	movs	r2, #0
 8002524:	721a      	strb	r2, [r3, #8]
	StopButtonBuff[sizeof(StopButtonBuff) - 1]							=	'\0'	;
 8002526:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800252a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800252e:	2200      	movs	r2, #0
 8002530:	721a      	strb	r2, [r3, #8]



	if( *displayUartFlag == 1)
 8002532:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002536:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b01      	cmp	r3, #1
 8002540:	f040 824c 	bne.w	80029dc <profile_home_read+0x5d4>
	{
		HAL_Delay(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f002 fc77 	bl	8004e38 <HAL_Delay>

		for(int i=0; i< rxBufferCount ; i++)
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002550:	e012      	b.n	8002578 <profile_home_read+0x170>
		{
			tempbuff[i] = modemRxBuff[i];
 8002552:	4a94      	ldr	r2, [pc, #592]	; (80027a4 <profile_home_read+0x39c>)
 8002554:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002558:	4413      	add	r3, r2
 800255a:	7819      	ldrb	r1, [r3, #0]
 800255c:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002560:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 8002564:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002568:	4413      	add	r3, r2
 800256a:	460a      	mov	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i< rxBufferCount ; i++)
 800256e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002572:	3301      	adds	r3, #1
 8002574:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8002578:	4b8b      	ldr	r3, [pc, #556]	; (80027a8 <profile_home_read+0x3a0>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002584:	4293      	cmp	r3, r2
 8002586:	dbe4      	blt.n	8002552 <profile_home_read+0x14a>
		}

		display_clearModemBuffer();
 8002588:	f7ff f9ca 	bl	8001920 <display_clearModemBuffer>


		c = strstr((char *)tempbuff, (char *)profile_write_buff ) ;
 800258c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002590:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f007 fcc6 	bl	8009f28 <strstr>
 800259c:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
		if( c != NULL )
 80025a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <profile_home_read+0x1dc>
		{

//			*page_invoke = 0 ;
			current_page = PROFILE_WRITE_PAGE ;
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <profile_home_read+0x3a4>)
 80025aa:	22c9      	movs	r2, #201	; 0xc9
 80025ac:	701a      	strb	r2, [r3, #0]
			uint8_t data[30];
			memset(data,0,sizeof(data));
 80025ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025b2:	221e      	movs	r2, #30
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f007 fc9f 	bl	8009efa <memset>
			sprintf(data," write profile called \n");
 80025bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025c0:	497b      	ldr	r1, [pc, #492]	; (80027b0 <profile_home_read+0x3a8>)
 80025c2:	4618      	mov	r0, r3
 80025c4:	f007 fc36 	bl	8009e34 <siprintf>
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 80025c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd fdbf 	bl	8000150 <strlen>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80025da:	f04f 33ff 	mov.w	r3, #4294967295
 80025de:	4875      	ldr	r0, [pc, #468]	; (80027b4 <profile_home_read+0x3ac>)
 80025e0:	f005 fe44 	bl	800826c <HAL_UART_Transmit>
		}

		c = NULL ;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		c = strstr((char *)tempbuff, (char *)profile_load_buff ) ;
 80025ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80025ee:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025f2:	4611      	mov	r1, r2
 80025f4:	4618      	mov	r0, r3
 80025f6:	f007 fc97 	bl	8009f28 <strstr>
 80025fa:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
		if( c != NULL )
 80025fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01d      	beq.n	8002642 <profile_home_read+0x23a>
		{
//			*page_invoke = 0 ;
			current_page = PROFILE_LOAD_PAGE ;
 8002606:	4b69      	ldr	r3, [pc, #420]	; (80027ac <profile_home_read+0x3a4>)
 8002608:	22ca      	movs	r2, #202	; 0xca
 800260a:	701a      	strb	r2, [r3, #0]
			uint8_t data[30];
			memset(data,0,sizeof(data));
 800260c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002610:	221e      	movs	r2, #30
 8002612:	2100      	movs	r1, #0
 8002614:	4618      	mov	r0, r3
 8002616:	f007 fc70 	bl	8009efa <memset>
			sprintf(data," load profile called \n");
 800261a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800261e:	4966      	ldr	r1, [pc, #408]	; (80027b8 <profile_home_read+0x3b0>)
 8002620:	4618      	mov	r0, r3
 8002622:	f007 fc07 	bl	8009e34 <siprintf>
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8002626:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800262a:	4618      	mov	r0, r3
 800262c:	f7fd fd90 	bl	8000150 <strlen>
 8002630:	4603      	mov	r3, r0
 8002632:	b29a      	uxth	r2, r3
 8002634:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002638:	f04f 33ff 	mov.w	r3, #4294967295
 800263c:	485d      	ldr	r0, [pc, #372]	; (80027b4 <profile_home_read+0x3ac>)
 800263e:	f005 fe15 	bl	800826c <HAL_UART_Transmit>
		}
		c = NULL ;
 8002642:	2300      	movs	r3, #0
 8002644:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

		  /* @brief this below code snippet checks whether the received buffer has Setpoint or not to set MMHG threshold */
	    c = strstr((char *)tempbuff, (char *)setMmhgAddr);
 8002648:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800264c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f007 fc68 	bl	8009f28 <strstr>
 8002658:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
	    if( c != NULL )
 800265c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05f      	beq.n	8002724 <profile_home_read+0x31c>
	    {
		    indexX = 0 ;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		    indexX = c - (char *)tempbuff ;
 800266a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800266e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7


		  if(tempbuff[ indexX - 1 ]	==	0x83 )
 8002678:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800267c:	3b01      	subs	r3, #1
 800267e:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002682:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	2b83      	cmp	r3, #131	; 0x83
 800268a:	d14b      	bne.n	8002724 <profile_home_read+0x31c>
		  {
			  size 		= tempbuff[ indexX + 4 ] ;
 800268c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002690:	3304      	adds	r3, #4
 8002692:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002696:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  indexX 	= indexX + 5 ;
 80026a0:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80026a4:	3305      	adds	r3, #5
 80026a6:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7

			  for(uint8_t i =0; i< size; i++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80026b0:	e017      	b.n	80026e2 <profile_home_read+0x2da>
			  {
				  receivedBuff[i] = tempbuff[indexX] ;
 80026b2:	f897 21d7 	ldrb.w	r2, [r7, #471]	; 0x1d7
 80026b6:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80026ba:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80026be:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80026c2:	5c89      	ldrb	r1, [r1, r2]
 80026c4:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80026c8:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80026cc:	54d1      	strb	r1, [r2, r3]
				  indexX++;
 80026ce:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80026d2:	3301      	adds	r3, #1
 80026d4:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			  for(uint8_t i =0; i< size; i++)
 80026d8:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 80026dc:	3301      	adds	r3, #1
 80026de:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
 80026e2:	f897 21cf 	ldrb.w	r2, [r7, #463]	; 0x1cf
 80026e6:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3e1      	bcc.n	80026b2 <profile_home_read+0x2aa>
			  }
			  homePage_t->mmhg = atoi(receivedBuff);
 80026ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80026f2:	4618      	mov	r0, r3
 80026f4:	f006 fbe2 	bl	8008ebc <atoi>
 80026f8:	4603      	mov	r3, r0
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002700:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	801a      	strh	r2, [r3, #0]
			  memset(tempbuff,0,sizeof(tempbuff));
 8002708:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800270c:	22fa      	movs	r2, #250	; 0xfa
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f007 fbf2 	bl	8009efa <memset>
			  memset(receivedBuff,0,sizeof(receivedBuff));
 8002716:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800271a:	220a      	movs	r2, #10
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f007 fbeb 	bl	8009efa <memset>

		  }

	  }
	  c = NULL ;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

	  /* @brief this below code snippet checks whether the received buffer has Min value or not to set time */
	  c = strstr((char *)tempbuff, (char *)setMinAddr);
 800272a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800272e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f007 fbf7 	bl	8009f28 <strstr>
 800273a:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
	  if( c != NULL)
 800273e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d073      	beq.n	800282e <profile_home_read+0x426>
	  {
		  indexX =0;
 8002746:	2300      	movs	r3, #0
 8002748:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		  indexX = c - ( char *)tempbuff ;
 800274c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002750:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		  if(tempbuff[ indexX - 1 ]	==	0x83 )
 800275a:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800275e:	3b01      	subs	r3, #1
 8002760:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002764:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	2b83      	cmp	r3, #131	; 0x83
 800276c:	d15f      	bne.n	800282e <profile_home_read+0x426>
		  {
			  size 		= tempbuff[ indexX + 4 ] ;
 800276e:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002772:	3304      	adds	r3, #4
 8002774:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002778:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800277c:	5cd3      	ldrb	r3, [r2, r3]
 800277e:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  indexX 	= indexX + 5 ;
 8002782:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002786:	3305      	adds	r3, #5
 8002788:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7

			  for(uint8_t i =0; i< size; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 8002792:	e02b      	b.n	80027ec <profile_home_read+0x3e4>
 8002794:	0800d7c0 	.word	0x0800d7c0
 8002798:	0800d784 	.word	0x0800d784
 800279c:	0800d6d4 	.word	0x0800d6d4
 80027a0:	0800d6e0 	.word	0x0800d6e0
 80027a4:	20000200 	.word	0x20000200
 80027a8:	20000530 	.word	0x20000530
 80027ac:	20000001 	.word	0x20000001
 80027b0:	0800d790 	.word	0x0800d790
 80027b4:	200004a0 	.word	0x200004a0
 80027b8:	0800d7a8 	.word	0x0800d7a8
			  {
				  receivedBuff[i] = tempbuff[indexX] ;
 80027bc:	f897 21d7 	ldrb.w	r2, [r7, #471]	; 0x1d7
 80027c0:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80027c4:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80027c8:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80027cc:	5c89      	ldrb	r1, [r1, r2]
 80027ce:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80027d2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80027d6:	54d1      	strb	r1, [r2, r3]
				  indexX++;
 80027d8:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80027dc:	3301      	adds	r3, #1
 80027de:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			  for(uint8_t i =0; i< size; i++)
 80027e2:	f897 31ce 	ldrb.w	r3, [r7, #462]	; 0x1ce
 80027e6:	3301      	adds	r3, #1
 80027e8:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce
 80027ec:	f897 21ce 	ldrb.w	r2, [r7, #462]	; 0x1ce
 80027f0:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d3e1      	bcc.n	80027bc <profile_home_read+0x3b4>
			  }
			  homePage_t->setMin = atoi(receivedBuff);
 80027f8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f006 fb5d 	bl	8008ebc <atoi>
 8002802:	4603      	mov	r3, r0
 8002804:	b2da      	uxtb	r2, r3
 8002806:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800280a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	709a      	strb	r2, [r3, #2]
			  memset(tempbuff,0,sizeof(tempbuff));
 8002812:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002816:	22fa      	movs	r2, #250	; 0xfa
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f007 fb6d 	bl	8009efa <memset>
			  memset(receivedBuff,0,sizeof(receivedBuff));
 8002820:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002824:	220a      	movs	r2, #10
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f007 fb66 	bl	8009efa <memset>
		  }

	  }
	  c = NULL ;
 800282e:	2300      	movs	r3, #0
 8002830:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  /* @brief this below code snippet checks whether the received buffer has Sec value or not to set time */
	  c = strstr((char *)tempbuff, (char *)setSecAddr);
 8002834:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8002838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f007 fb72 	bl	8009f28 <strstr>
 8002844:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
	  if( c != NULL)
 8002848:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05f      	beq.n	8002910 <profile_home_read+0x508>
	  {
		  indexX =0;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		  indexX = c - ( char *)tempbuff ;
 8002856:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800285a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
		  if(tempbuff[ indexX - 1 ]	==	0x83 )
 8002864:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002868:	3b01      	subs	r3, #1
 800286a:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 800286e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	2b83      	cmp	r3, #131	; 0x83
 8002876:	d14b      	bne.n	8002910 <profile_home_read+0x508>
		  {
			  size 		= tempbuff[ indexX + 4 ] ;
 8002878:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 800287c:	3304      	adds	r3, #4
 800287e:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 8002882:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	f887 31c7 	strb.w	r3, [r7, #455]	; 0x1c7
			  indexX 	= indexX + 5 ;
 800288c:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 8002890:	3305      	adds	r3, #5
 8002892:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7

			  for(uint8_t i =0; i< size; i++)
 8002896:	2300      	movs	r3, #0
 8002898:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 800289c:	e017      	b.n	80028ce <profile_home_read+0x4c6>
			  {
				  receivedBuff[i] = tempbuff[indexX] ;
 800289e:	f897 21d7 	ldrb.w	r2, [r7, #471]	; 0x1d7
 80028a2:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 80028a6:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 80028aa:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80028ae:	5c89      	ldrb	r1, [r1, r2]
 80028b0:	f507 72ec 	add.w	r2, r7, #472	; 0x1d8
 80028b4:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80028b8:	54d1      	strb	r1, [r2, r3]
				  indexX++;
 80028ba:	f897 31d7 	ldrb.w	r3, [r7, #471]	; 0x1d7
 80028be:	3301      	adds	r3, #1
 80028c0:	f887 31d7 	strb.w	r3, [r7, #471]	; 0x1d7
			  for(uint8_t i =0; i< size; i++)
 80028c4:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 80028c8:	3301      	adds	r3, #1
 80028ca:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd
 80028ce:	f897 21cd 	ldrb.w	r2, [r7, #461]	; 0x1cd
 80028d2:	f897 31c7 	ldrb.w	r3, [r7, #455]	; 0x1c7
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3e1      	bcc.n	800289e <profile_home_read+0x496>
			  }
			  homePage_t->setSec = atoi(receivedBuff);
 80028da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80028de:	4618      	mov	r0, r3
 80028e0:	f006 faec 	bl	8008ebc <atoi>
 80028e4:	4603      	mov	r3, r0
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80028ec:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	70da      	strb	r2, [r3, #3]
			  memset(tempbuff,0,sizeof(tempbuff));
 80028f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028f8:	22fa      	movs	r2, #250	; 0xfa
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 fafc 	bl	8009efa <memset>
			  memset(receivedBuff,0,sizeof(receivedBuff));
 8002902:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002906:	220a      	movs	r2, #10
 8002908:	2100      	movs	r1, #0
 800290a:	4618      	mov	r0, r3
 800290c:	f007 faf5 	bl	8009efa <memset>
		  }
	  }
	  c = NULL ;
 8002910:	2300      	movs	r3, #0
 8002912:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  c = strstr((char *)tempbuff, (char *)runButtonBuff);
 8002916:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800291a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f007 fb01 	bl	8009f28 <strstr>
 8002926:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
	  if(c!= NULL)
 800292a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d035      	beq.n	800299e <profile_home_read+0x596>
	  {
		  controllerParam->min = 0;
 8002932:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002936:	2200      	movs	r2, #0
 8002938:	741a      	strb	r2, [r3, #16]
		  controllerParam->runTime = 0 ;
 800293a:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  controllerParam->sec = 0 ;
 800294a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800294e:	2200      	movs	r2, #0
 8002950:	745a      	strb	r2, [r3, #17]
		  *runStopFlag = 1	;//for run
 8002952:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002956:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
		  *currenttime = 0 ;
 8002960:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 8002964:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	e9c1 2300 	strd	r2, r3, [r1]
		  *timeOutFlag = 0 ;
 8002976:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
		  uint8_t _arr[50];
		  getTargetAddr(_arr, sizeof(_arr),0x1500,00 ) ;
 800297e:	f107 0010 	add.w	r0, r7, #16
 8002982:	2300      	movs	r3, #0
 8002984:	f44f 52a8 	mov.w	r2, #5376	; 0x1500
 8002988:	2132      	movs	r1, #50	; 0x32
 800298a:	f7ff f9a9 	bl	8001ce0 <getTargetAddr>
		  HAL_UART_Transmit(&huart2, _arr, 8, HAL_MAX_DELAY);
 800298e:	f107 0110 	add.w	r1, r7, #16
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	2208      	movs	r2, #8
 8002998:	4813      	ldr	r0, [pc, #76]	; (80029e8 <profile_home_read+0x5e0>)
 800299a:	f005 fc67 	bl	800826c <HAL_UART_Transmit>

	  }
	  c = NULL ;
 800299e:	2300      	movs	r3, #0
 80029a0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
	  c = strstr((char *)tempbuff, (char *)StopButtonBuff);
 80029a4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f007 faba 	bl	8009f28 <strstr>
 80029b4:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
	  if(c!= NULL)
 80029b8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <profile_home_read+0x5c6>
	  {
		  *runStopFlag = 2	;//for stop
 80029c0:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80029c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2202      	movs	r2, #2
 80029cc:	701a      	strb	r2, [r3, #0]
	  }

	  *displayUartFlag = 0;
 80029ce:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80029d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
	}

}
 80029dc:	bf00      	nop
 80029de:	f507 77ee 	add.w	r7, r7, #476	; 0x1dc
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd90      	pop	{r4, r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200004e8 	.word	0x200004e8

080029ec <profile_load_read>:

/*
 * below code is for load page
 */
void profile_load_read(uint8_t *displayUartFlag,uint8_t *nextFlag, uint8_t *backFlag, uint8_t *applyFlag, PL_direction_params_t *direction_params)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b0db      	sub	sp, #364	; 0x16c
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 80029f6:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
 80029fa:	6020      	str	r0, [r4, #0]
 80029fc:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 8002a00:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
 8002a04:	6001      	str	r1, [r0, #0]
 8002a06:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8002a0a:	f5a1 71b2 	sub.w	r1, r1, #356	; 0x164
 8002a0e:	600a      	str	r2, [r1, #0]
 8002a10:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8002a14:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8002a18:	6013      	str	r3, [r2, #0]

	uint8_t tempbuff[MAX_MODEM_RX_BUFF] = {0};
 8002a1a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	3304      	adds	r3, #4
 8002a28:	22f6      	movs	r2, #246	; 0xf6
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f007 fa64 	bl	8009efa <memset>
	char 	*c 				= NULL ;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	uint8_t indexX = 0;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint8_t size = 0 ;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
	uint8_t receivedBuff[10]= {0} ;
 8002a44:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a48:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	809a      	strh	r2, [r3, #4]

	uint8_t nextbutton_buff[]  = { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x26, 0x01, 0x00, 0x01 };
 8002a58:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a5c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a60:	4a8c      	ldr	r2, [pc, #560]	; (8002c94 <profile_load_read+0x2a8>)
 8002a62:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a64:	c303      	stmia	r3!, {r0, r1}
 8002a66:	701a      	strb	r2, [r3, #0]
	uint8_t backbutton_buff[]  = { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x25, 0x01, 0x00, 0x01 };
 8002a68:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a6c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002a70:	4a89      	ldr	r2, [pc, #548]	; (8002c98 <profile_load_read+0x2ac>)
 8002a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a74:	c303      	stmia	r3!, {r0, r1}
 8002a76:	701a      	strb	r2, [r3, #0]
	uint8_t homeButton_buff[]  = { 0x5A, 0xA5, 0x06, 0x83, 0x99, 0x99, 0x01, 0x00, 0x01 };
 8002a78:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a7c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002a80:	4a86      	ldr	r2, [pc, #536]	; (8002c9c <profile_load_read+0x2b0>)
 8002a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a84:	c303      	stmia	r3!, {r0, r1}
 8002a86:	701a      	strb	r2, [r3, #0]
	uint8_t firstApply_buff[]  = { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x51, 0x01, 0x00, 0x01 };
 8002a88:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a8c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002a90:	4a83      	ldr	r2, [pc, #524]	; (8002ca0 <profile_load_read+0x2b4>)
 8002a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a94:	c303      	stmia	r3!, {r0, r1}
 8002a96:	701a      	strb	r2, [r3, #0]
	uint8_t secondApply_buff[] = { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x54, 0x01, 0x00, 0x01 };
 8002a98:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002a9c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002aa0:	4a80      	ldr	r2, [pc, #512]	; (8002ca4 <profile_load_read+0x2b8>)
 8002aa2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa4:	c303      	stmia	r3!, {r0, r1}
 8002aa6:	701a      	strb	r2, [r3, #0]
	uint8_t thirdApply_buff[]  = { 0x5A, 0xA5, 0x06, 0x83, 0x10, 0x58, 0x01, 0x00, 0x01 };
 8002aa8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002aac:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002ab0:	4a7d      	ldr	r2, [pc, #500]	; (8002ca8 <profile_load_read+0x2bc>)
 8002ab2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ab4:	c303      	stmia	r3!, {r0, r1}
 8002ab6:	701a      	strb	r2, [r3, #0]



	nextbutton_buff[sizeof(nextbutton_buff) -  1 ] 				=	'\0'	;
 8002ab8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002abc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	721a      	strb	r2, [r3, #8]
	backbutton_buff[sizeof(backbutton_buff) -  1 ] 				=	'\0'	;
 8002ac4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ac8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002acc:	2200      	movs	r2, #0
 8002ace:	721a      	strb	r2, [r3, #8]
	homeButton_buff[sizeof(homeButton_buff) -  1 ] 				=	'\0'	;
 8002ad0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ad4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002ad8:	2200      	movs	r2, #0
 8002ada:	721a      	strb	r2, [r3, #8]
	firstApply_buff[sizeof(firstApply_buff) -  1 ] 				=	'\0'	;
 8002adc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002ae0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	721a      	strb	r2, [r3, #8]
	secondApply_buff[sizeof(secondApply_buff) -  1 ] 			=	'\0'	;
 8002ae8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002aec:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002af0:	2200      	movs	r2, #0
 8002af2:	721a      	strb	r2, [r3, #8]
	thirdApply_buff[sizeof(thirdApply_buff) -  1 ] 				=	'\0'	;
 8002af4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002af8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002afc:	2200      	movs	r2, #0
 8002afe:	721a      	strb	r2, [r3, #8]


	if( *displayUartFlag == 1)
 8002b00:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b04:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	f040 80bb 	bne.w	8002c88 <profile_load_read+0x29c>
	{
		HAL_Delay(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f002 f990 	bl	8004e38 <HAL_Delay>

		for(int i=0; i< rxBufferCount ; i++)
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002b1e:	e012      	b.n	8002b46 <profile_load_read+0x15a>
		{
			tempbuff[i] = modemRxBuff[i];
 8002b20:	4a62      	ldr	r2, [pc, #392]	; (8002cac <profile_load_read+0x2c0>)
 8002b22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b26:	4413      	add	r3, r2
 8002b28:	7819      	ldrb	r1, [r3, #0]
 8002b2a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b2e:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8002b32:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b36:	4413      	add	r3, r2
 8002b38:	460a      	mov	r2, r1
 8002b3a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i< rxBufferCount ; i++)
 8002b3c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002b46:	4b5a      	ldr	r3, [pc, #360]	; (8002cb0 <profile_load_read+0x2c4>)
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002b52:	4293      	cmp	r3, r2
 8002b54:	dbe4      	blt.n	8002b20 <profile_load_read+0x134>
		}

		display_clearModemBuffer();
 8002b56:	f7fe fee3 	bl	8001920 <display_clearModemBuffer>

		c = strstr((char *)tempbuff, (char *)nextbutton_buff);
 8002b5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b5e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f007 f9df 	bl	8009f28 <strstr>
 8002b6a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002b6e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <profile_load_read+0x198>
		{
			*nextFlag = 1;
 8002b76:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002b7a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
		}
		c= NULL ;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		c = strstr((char *)tempbuff, (char *)backbutton_buff);
 8002b8a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002b8e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f007 f9c7 	bl	8009f28 <strstr>
 8002b9a:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002b9e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d006      	beq.n	8002bb4 <profile_load_read+0x1c8>
		{
			*backFlag = 1;
 8002ba6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002baa:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
		}
		*displayUartFlag = 0 ;
 8002bb4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002bb8:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]

		c= NULL ;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		c = strstr((char *)tempbuff, (char *)homeButton_buff);
 8002bc8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002bcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f007 f9a8 	bl	8009f28 <strstr>
 8002bd8:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002bdc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <profile_load_read+0x1fe>
		{
			current_page = PROFILE_HOME_PAGE ;
 8002be4:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <profile_load_read+0x2c8>)
 8002be6:	22c8      	movs	r2, #200	; 0xc8
 8002be8:	701a      	strb	r2, [r3, #0]
		}
		c= NULL ;
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
		c = strstr((char *)tempbuff, (char *)firstApply_buff);//FIRSTAPPLY BUTTON
 8002bf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bf4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f007 f994 	bl	8009f28 <strstr>
 8002c00:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002c04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <profile_load_read+0x22e>
		{
			*applyFlag = 1;
 8002c0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c10:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
		}
		c= NULL ;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		c = strstr((char *)tempbuff, (char *)secondApply_buff);//FIRSTAPPLY BUTTON
 8002c20:	f107 021c 	add.w	r2, r7, #28
 8002c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f007 f97c 	bl	8009f28 <strstr>
 8002c30:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002c34:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d006      	beq.n	8002c4a <profile_load_read+0x25e>
		{
			*applyFlag = 2;
 8002c3c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c40:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
		}
		c= NULL ;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

		c = strstr((char *)tempbuff, (char *)thirdApply_buff);//FIRSTAPPLY BUTTON
 8002c50:	f107 0210 	add.w	r2, r7, #16
 8002c54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f007 f964 	bl	8009f28 <strstr>
 8002c60:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
		if( c!= NULL)
 8002c64:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <profile_load_read+0x28e>
		{
			*applyFlag = 3;
 8002c6c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c70:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2203      	movs	r2, #3
 8002c78:	701a      	strb	r2, [r3, #0]
		}



		*displayUartFlag = 0 ;
 8002c7a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002c7e:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]

	}
}
 8002c88:	bf00      	nop
 8002c8a:	f507 77b6 	add.w	r7, r7, #364	; 0x16c
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	0800d7cc 	.word	0x0800d7cc
 8002c98:	0800d7d8 	.word	0x0800d7d8
 8002c9c:	0800d760 	.word	0x0800d760
 8002ca0:	0800d7e4 	.word	0x0800d7e4
 8002ca4:	0800d7f0 	.word	0x0800d7f0
 8002ca8:	0800d7fc 	.word	0x0800d7fc
 8002cac:	20000200 	.word	0x20000200
 8002cb0:	20000530 	.word	0x20000530
 8002cb4:	20000001 	.word	0x20000001

08002cb8 <profile_load_update_values_uartFormate_8>:



static void profile_load_update_values_uartFormate_8(uint8_t *eepromRead,uint8_t eepromReadSize, PL_params_t *lineXParams)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b092      	sub	sp, #72	; 0x48
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	72fb      	strb	r3, [r7, #11]
	uint8_t _arr[50] ;
	memset(_arr,0,sizeof(_arr));
 8002cc6:	f107 0314 	add.w	r3, r7, #20
 8002cca:	2232      	movs	r2, #50	; 0x32
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f007 f913 	bl	8009efa <memset>

	memset(_arr , 0 , sizeof(_arr));
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2232      	movs	r2, #50	; 0x32
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f007 f90c 	bl	8009efa <memset>
	getTargetAddr(_arr, sizeof(_arr),lineXParams->srNoAddr,eepromRead[0] ) ;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f107 0014 	add.w	r0, r7, #20
 8002cee:	2132      	movs	r1, #50	; 0x32
 8002cf0:	f7fe fff6 	bl	8001ce0 <getTargetAddr>
	HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fa29 	bl	8000150 <strlen>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	f107 0114 	add.w	r1, r7, #20
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	483e      	ldr	r0, [pc, #248]	; (8002e04 <profile_load_update_values_uartFormate_8+0x14c>)
 8002d0c:	f005 faae 	bl	800826c <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, &_arr, strlen(_arr), HAL_MAX_DELAY);
	HAL_Delay(1);
 8002d10:	2001      	movs	r0, #1
 8002d12:	f002 f891 	bl	8004e38 <HAL_Delay>

	uint16_t __mmhg = eepromRead[1] << 0 | eepromRead[2] << 8 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3302      	adds	r3, #2
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21b      	sxth	r3, r3
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	b21b      	sxth	r3, r3
 8002d2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	memset(_arr , 0 , sizeof(_arr));
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2232      	movs	r2, #50	; 0x32
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f007 f8de 	bl	8009efa <memset>
	getTargetAddrfor16bit(_arr, sizeof(_arr),lineXParams->mmhgAddr, __mmhg) ;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	885a      	ldrh	r2, [r3, #2]
 8002d42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002d46:	f107 0014 	add.w	r0, r7, #20
 8002d4a:	2132      	movs	r1, #50	; 0x32
 8002d4c:	f7ff f830 	bl	8001db0 <getTargetAddrfor16bit>
	HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd f9fb 	bl	8000150 <strlen>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	f107 0114 	add.w	r1, r7, #20
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	4827      	ldr	r0, [pc, #156]	; (8002e04 <profile_load_update_values_uartFormate_8+0x14c>)
 8002d68:	f005 fa80 	bl	800826c <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, &_arr, strlen(_arr), HAL_MAX_DELAY);
//	HAL_Delay(100);
	HAL_Delay(1);
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f002 f863 	bl	8004e38 <HAL_Delay>

	//belowcode is for profile write min to display from eeprom with respect to Serial number
	memset(_arr , 0 , sizeof(_arr));
 8002d72:	f107 0314 	add.w	r3, r7, #20
 8002d76:	2232      	movs	r2, #50	; 0x32
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f007 f8bd 	bl	8009efa <memset>
	getTargetAddr(_arr, sizeof(_arr),lineXParams->minAddr, eepromRead[3]) ;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	889a      	ldrh	r2, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3303      	adds	r3, #3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	f107 0014 	add.w	r0, r7, #20
 8002d8e:	2132      	movs	r1, #50	; 0x32
 8002d90:	f7fe ffa6 	bl	8001ce0 <getTargetAddr>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd f9d9 	bl	8000150 <strlen>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	f107 0114 	add.w	r1, r7, #20
 8002da6:	f04f 33ff 	mov.w	r3, #4294967295
 8002daa:	4816      	ldr	r0, [pc, #88]	; (8002e04 <profile_load_update_values_uartFormate_8+0x14c>)
 8002dac:	f005 fa5e 	bl	800826c <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, &_arr, strlen(_arr), HAL_MAX_DELAY);
//	HAL_Delay(100);
	HAL_Delay(1);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f002 f841 	bl	8004e38 <HAL_Delay>

	//below code is for profile write sec to display from eeprom with respect to Serial number
	memset(_arr , 0 , sizeof(_arr));
 8002db6:	f107 0314 	add.w	r3, r7, #20
 8002dba:	2232      	movs	r2, #50	; 0x32
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f007 f89b 	bl	8009efa <memset>
	getTargetAddr(_arr, sizeof(_arr),lineXParams->secAddr, eepromRead[4]) ;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	88da      	ldrh	r2, [r3, #6]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3304      	adds	r3, #4
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	f107 0014 	add.w	r0, r7, #20
 8002dd2:	2132      	movs	r1, #50	; 0x32
 8002dd4:	f7fe ff84 	bl	8001ce0 <getTargetAddr>
		HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 8002dd8:	f107 0314 	add.w	r3, r7, #20
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd f9b7 	bl	8000150 <strlen>
 8002de2:	4603      	mov	r3, r0
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	f107 0114 	add.w	r1, r7, #20
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	4805      	ldr	r0, [pc, #20]	; (8002e04 <profile_load_update_values_uartFormate_8+0x14c>)
 8002df0:	f005 fa3c 	bl	800826c <HAL_UART_Transmit>
//	HAL_UART_Transmit(&huart1, &_arr, strlen(_arr), HAL_MAX_DELAY);
//	HAL_Delay(100);
	HAL_Delay(1);
 8002df4:	2001      	movs	r0, #1
 8002df6:	f002 f81f 	bl	8004e38 <HAL_Delay>

}
 8002dfa:	bf00      	nop
 8002dfc:	3748      	adds	r7, #72	; 0x48
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	200004e8 	.word	0x200004e8

08002e08 <push_load_value_homePage>:
static void push_load_value_homePage(uint16_t mmhg, uint8_t min, uint8_t sec)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	460b      	mov	r3, r1
 8002e14:	717b      	strb	r3, [r7, #5]
 8002e16:	4613      	mov	r3, r2
 8002e18:	713b      	strb	r3, [r7, #4]
	uint8_t _arr[50] ;
	memset(_arr,0,sizeof(_arr));
 8002e1a:	f107 030c 	add.w	r3, r7, #12
 8002e1e:	2232      	movs	r2, #50	; 0x32
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f007 f869 	bl	8009efa <memset>

	memset(_arr , 0 , sizeof(_arr));
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2232      	movs	r2, #50	; 0x32
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f007 f862 	bl	8009efa <memset>
	getTargetAddrfor16bit(_arr, sizeof(_arr),MMHG_TO_HOME_PAGE_ADDR ,mmhg ) ;
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	f107 000c 	add.w	r0, r7, #12
 8002e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e40:	2132      	movs	r1, #50	; 0x32
 8002e42:	f7fe ffb5 	bl	8001db0 <getTargetAddrfor16bit>
	HAL_UART_Transmit(&huart2, &_arr, 9, HAL_MAX_DELAY);
 8002e46:	f107 010c 	add.w	r1, r7, #12
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	2209      	movs	r2, #9
 8002e50:	481a      	ldr	r0, [pc, #104]	; (8002ebc <push_load_value_homePage+0xb4>)
 8002e52:	f005 fa0b 	bl	800826c <HAL_UART_Transmit>

	memset(_arr , 0 , sizeof(_arr));
 8002e56:	f107 030c 	add.w	r3, r7, #12
 8002e5a:	2232      	movs	r2, #50	; 0x32
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f007 f84b 	bl	8009efa <memset>
	getTargetAddr(_arr, sizeof(_arr),MIN_TO_HOME_PAGE_ADDR, min ) ;
 8002e64:	797b      	ldrb	r3, [r7, #5]
 8002e66:	f107 000c 	add.w	r0, r7, #12
 8002e6a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8002e6e:	2132      	movs	r1, #50	; 0x32
 8002e70:	f7fe ff36 	bl	8001ce0 <getTargetAddr>
	HAL_UART_Transmit(&huart2, &_arr, 8, HAL_MAX_DELAY);
 8002e74:	f107 010c 	add.w	r1, r7, #12
 8002e78:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	480f      	ldr	r0, [pc, #60]	; (8002ebc <push_load_value_homePage+0xb4>)
 8002e80:	f005 f9f4 	bl	800826c <HAL_UART_Transmit>

	memset(_arr , 0 , sizeof(_arr));
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2232      	movs	r2, #50	; 0x32
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f007 f834 	bl	8009efa <memset>
	getTargetAddr(_arr, sizeof(_arr),SEC_TO_HOME_PAGE_ADDR, sec ) ;
 8002e92:	793b      	ldrb	r3, [r7, #4]
 8002e94:	f107 000c 	add.w	r0, r7, #12
 8002e98:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8002e9c:	2132      	movs	r1, #50	; 0x32
 8002e9e:	f7fe ff1f 	bl	8001ce0 <getTargetAddr>
	HAL_UART_Transmit(&huart2, &_arr, 8, HAL_MAX_DELAY);
 8002ea2:	f107 010c 	add.w	r1, r7, #12
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	2208      	movs	r2, #8
 8002eac:	4803      	ldr	r0, [pc, #12]	; (8002ebc <push_load_value_homePage+0xb4>)
 8002eae:	f005 f9dd 	bl	800826c <HAL_UART_Transmit>


}
 8002eb2:	bf00      	nop
 8002eb4:	3740      	adds	r7, #64	; 0x40
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200004e8 	.word	0x200004e8

08002ec0 <profile_load_update_values>:

void profile_load_update_values(uint8_t *nextFlag , uint8_t *backFlag, uint8_t *applyFlag, home_page_t * homePage_t)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
	static uint16_t e24_index = 0 ;
	static uint8_t nextcounter = 0;
	uint8_t eepromRead[5] = {0};
 8002ece:	2300      	movs	r3, #0
 8002ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	PL_params_t lineOneParams = {
 8002ed8:	4abc      	ldr	r2, [pc, #752]	; (80031cc <profile_load_update_values+0x30c>)
 8002eda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ee0:	c303      	stmia	r3!, {r0, r1}
 8002ee2:	801a      	strh	r2, [r3, #0]
			.minAddr	=	FST_R_MIN_ADDR	,
			.secAddr	=	FST_R_SEC_ADDR	,
			.applyaddr	=	FST_R_APPLY_ADDR

	};
	PL_params_t lineSecondParams = {
 8002ee4:	4aba      	ldr	r2, [pc, #744]	; (80031d0 <profile_load_update_values+0x310>)
 8002ee6:	f107 031c 	add.w	r3, r7, #28
 8002eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8002eec:	c303      	stmia	r3!, {r0, r1}
 8002eee:	801a      	strh	r2, [r3, #0]
			.minAddr	=	SND_R_MIN_ADDR	,
			.secAddr	=	SND_R_SEC_ADDR	,
			.applyaddr	=	SND_R_APPLY_ADDR

	};
	PL_params_t lineThirdParams = {
 8002ef0:	4ab8      	ldr	r2, [pc, #736]	; (80031d4 <profile_load_update_values+0x314>)
 8002ef2:	f107 0310 	add.w	r3, r7, #16
 8002ef6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ef8:	c303      	stmia	r3!, {r0, r1}
 8002efa:	801a      	strh	r2, [r3, #0]
			.minAddr	=	TRD_R_MIN_ADDR	,
			.secAddr	=	TRD_R_SEC_ADDR	,
			.applyaddr	=	TRD_R_APPLY_ADDR

	};
	if(*nextFlag == 9 )
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b09      	cmp	r3, #9
 8002f02:	d151      	bne.n	8002fa8 <profile_load_update_values+0xe8>
	{
		memset(eepromRead,0,sizeof(eepromRead));
 8002f04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f08:	2205      	movs	r2, #5
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f006 fff4 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), e24_index);
 8002f12:	4bb1      	ldr	r3, [pc, #708]	; (80031d8 <profile_load_update_values+0x318>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f1c:	2105      	movs	r1, #5
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fcb6 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineOneParams);
 8002f24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f2c:	2105      	movs	r1, #5
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fec2 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 8002f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f38:	2205      	movs	r2, #5
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f006 ffdc 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),e24_index+1);
 8002f42:	4ba5      	ldr	r3, [pc, #660]	; (80031d8 <profile_load_update_values+0x318>)
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f50:	2105      	movs	r1, #5
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc9c 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineSecondParams);
 8002f58:	f107 021c 	add.w	r2, r7, #28
 8002f5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f60:	2105      	movs	r1, #5
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fea8 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 8002f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f6c:	2205      	movs	r2, #5
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 ffc2 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),e24_index+2);
 8002f76:	4b98      	ldr	r3, [pc, #608]	; (80031d8 <profile_load_update_values+0x318>)
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f84:	2105      	movs	r1, #5
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fc82 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineThirdParams);
 8002f8c:	f107 0210 	add.w	r2, r7, #16
 8002f90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f94:	2105      	movs	r1, #5
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fe8e 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		e24_index = 3 ;
 8002f9c:	4b8e      	ldr	r3, [pc, #568]	; (80031d8 <profile_load_update_values+0x318>)
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	801a      	strh	r2, [r3, #0]

		*nextFlag = 0;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
	}


	if(*nextFlag == 1)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d163      	bne.n	8003078 <profile_load_update_values+0x1b8>
	{
		nextcounter++ ;
 8002fb0:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <profile_load_update_values+0x31c>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <profile_load_update_values+0x31c>)
 8002fba:	701a      	strb	r2, [r3, #0]

		memset(eepromRead,0,sizeof(eepromRead));
 8002fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f006 ff98 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), ( e24_index * nextcounter ) );
 8002fca:	4b83      	ldr	r3, [pc, #524]	; (80031d8 <profile_load_update_values+0x318>)
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4a82      	ldr	r2, [pc, #520]	; (80031dc <profile_load_update_values+0x31c>)
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	fb02 f303 	mul.w	r3, r2, r3
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fde:	2105      	movs	r1, #5
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fc55 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineOneParams);
 8002fe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fee:	2105      	movs	r1, #5
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fe61 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 8002ff6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ffa:	2205      	movs	r2, #5
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f006 ff7b 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),( e24_index * nextcounter )+1 );
 8003004:	4b74      	ldr	r3, [pc, #464]	; (80031d8 <profile_load_update_values+0x318>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4a74      	ldr	r2, [pc, #464]	; (80031dc <profile_load_update_values+0x31c>)
 800300c:	7812      	ldrb	r2, [r2, #0]
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	b2da      	uxtb	r2, r3
 8003018:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800301c:	2105      	movs	r1, #5
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fc36 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineSecondParams);
 8003024:	f107 021c 	add.w	r2, r7, #28
 8003028:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800302c:	2105      	movs	r1, #5
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe42 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 8003034:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003038:	2205      	movs	r2, #5
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f006 ff5c 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),( e24_index * nextcounter )+2 );
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <profile_load_update_values+0x318>)
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4a64      	ldr	r2, [pc, #400]	; (80031dc <profile_load_update_values+0x31c>)
 800304a:	7812      	ldrb	r2, [r2, #0]
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3302      	adds	r3, #2
 8003054:	b2da      	uxtb	r2, r3
 8003056:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800305a:	2105      	movs	r1, #5
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fc17 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineThirdParams);
 8003062:	f107 0210 	add.w	r2, r7, #16
 8003066:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800306a:	2105      	movs	r1, #5
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fe23 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		*nextFlag = 0;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
	}

	if(*backFlag == 1)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d166      	bne.n	800314e <profile_load_update_values+0x28e>
	{
		nextcounter-- ;
 8003080:	4b56      	ldr	r3, [pc, #344]	; (80031dc <profile_load_update_values+0x31c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	3b01      	subs	r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	4b54      	ldr	r3, [pc, #336]	; (80031dc <profile_load_update_values+0x31c>)
 800308a:	701a      	strb	r2, [r3, #0]
		memset(eepromRead,0,sizeof(eepromRead));
 800308c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003090:	2205      	movs	r2, #5
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f006 ff30 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), ( e24_index * nextcounter ) );
 800309a:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <profile_load_update_values+0x318>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	4a4e      	ldr	r2, [pc, #312]	; (80031dc <profile_load_update_values+0x31c>)
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	fb02 f303 	mul.w	r3, r2, r3
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ae:	2105      	movs	r1, #5
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fbed 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineOneParams);
 80030b6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030be:	2105      	movs	r1, #5
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fdf9 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 80030c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ca:	2205      	movs	r2, #5
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f006 ff13 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),( e24_index * nextcounter )+1 );
 80030d4:	4b40      	ldr	r3, [pc, #256]	; (80031d8 <profile_load_update_values+0x318>)
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	4a40      	ldr	r2, [pc, #256]	; (80031dc <profile_load_update_values+0x31c>)
 80030dc:	7812      	ldrb	r2, [r2, #0]
 80030de:	fb02 f303 	mul.w	r3, r2, r3
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030ec:	2105      	movs	r1, #5
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fbce 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineSecondParams);
 80030f4:	f107 021c 	add.w	r2, r7, #28
 80030f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030fc:	2105      	movs	r1, #5
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fdda 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		memset(eepromRead,0,sizeof(eepromRead));
 8003104:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003108:	2205      	movs	r2, #5
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f006 fef4 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead),( e24_index * nextcounter )+2 );
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <profile_load_update_values+0x318>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4a30      	ldr	r2, [pc, #192]	; (80031dc <profile_load_update_values+0x31c>)
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	3302      	adds	r3, #2
 8003124:	b2da      	uxtb	r2, r3
 8003126:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800312a:	2105      	movs	r1, #5
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fbaf 	bl	8003890 <readEe24>
		profile_load_update_values_uartFormate_8(&eepromRead, sizeof(eepromRead), &lineThirdParams);
 8003132:	f107 0210 	add.w	r2, r7, #16
 8003136:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800313a:	2105      	movs	r1, #5
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff fdbb 	bl	8002cb8 <profile_load_update_values_uartFormate_8>

		*nextFlag = 0 ;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]

		*backFlag = 0 ;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
	}
	if(*applyFlag == 1)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d144      	bne.n	80031e0 <profile_load_update_values+0x320>
	{
		memset(eepromRead,0,sizeof(eepromRead));
 8003156:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800315a:	2205      	movs	r2, #5
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f006 fecb 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), ( e24_index * nextcounter ) );
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <profile_load_update_values+0x318>)
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <profile_load_update_values+0x31c>)
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	b2da      	uxtb	r2, r3
 8003174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003178:	2105      	movs	r1, #5
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fb88 	bl	8003890 <readEe24>

		uint16_t __mmhg = eepromRead[1] << 0 | eepromRead[2] << 8 ;
 8003180:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003184:	b21a      	sxth	r2, r3
 8003186:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	b21b      	sxth	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	b21b      	sxth	r3, r3
 8003192:	87fb      	strh	r3, [r7, #62]	; 0x3e
		homePage_t->mmhg 		= 	__mmhg 			;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003198:	801a      	strh	r2, [r3, #0]
		homePage_t->setMin 		=	eepromRead[3]	;
 800319a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	709a      	strb	r2, [r3, #2]
		homePage_t->setSec 		=	eepromRead[4]	;
 80031a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	70da      	strb	r2, [r3, #3]

		profile_page_change(HOME_PAGE_NUMBER);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f7fe ff20 	bl	8001ff0 <profile_page_change>
		push_load_value_homePage(homePage_t->mmhg , homePage_t->setMin, homePage_t->setSec);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	8818      	ldrh	r0, [r3, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	7899      	ldrb	r1, [r3, #2]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	78db      	ldrb	r3, [r3, #3]
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff fe23 	bl	8002e08 <push_load_value_homePage>

		*applyFlag = 0 ;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e00a      	b.n	80031e0 <profile_load_update_values+0x320>
 80031ca:	bf00      	nop
 80031cc:	0800d808 	.word	0x0800d808
 80031d0:	0800d814 	.word	0x0800d814
 80031d4:	0800d820 	.word	0x0800d820
 80031d8:	200002fa 	.word	0x200002fa
 80031dc:	200002fc 	.word	0x200002fc

	}

	if(*applyFlag == 2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d13a      	bne.n	800325e <profile_load_update_values+0x39e>
	{
		memset(eepromRead,0,sizeof(eepromRead));
 80031e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031ec:	2205      	movs	r2, #5
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f006 fe82 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), ( e24_index * nextcounter ) + 1 );
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <profile_load_update_values+0x424>)
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	4a3a      	ldr	r2, [pc, #232]	; (80032e8 <profile_load_update_values+0x428>)
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	fb02 f303 	mul.w	r3, r2, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800320e:	2105      	movs	r1, #5
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fb3d 	bl	8003890 <readEe24>

		uint16_t __mmhg = eepromRead[1] << 0 | eepromRead[2] << 8 ;
 8003216:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800321a:	b21a      	sxth	r2, r3
 800321c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	b21b      	sxth	r3, r3
 8003224:	4313      	orrs	r3, r2
 8003226:	b21b      	sxth	r3, r3
 8003228:	87bb      	strh	r3, [r7, #60]	; 0x3c
		homePage_t->mmhg 		= 	__mmhg 			;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800322e:	801a      	strh	r2, [r3, #0]
		homePage_t->setMin 		=	eepromRead[3]	;
 8003230:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	709a      	strb	r2, [r3, #2]
		homePage_t->setSec 		=	eepromRead[4]	;
 8003238:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	70da      	strb	r2, [r3, #3]
		profile_page_change(HOME_PAGE_NUMBER);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fed5 	bl	8001ff0 <profile_page_change>
		push_load_value_homePage(homePage_t->mmhg , homePage_t->setMin, homePage_t->setSec);
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	8818      	ldrh	r0, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	7899      	ldrb	r1, [r3, #2]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	78db      	ldrb	r3, [r3, #3]
 8003252:	461a      	mov	r2, r3
 8003254:	f7ff fdd8 	bl	8002e08 <push_load_value_homePage>


		*applyFlag = 0 ;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	701a      	strb	r2, [r3, #0]
	}
	if(*applyFlag == 3)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d13a      	bne.n	80032dc <profile_load_update_values+0x41c>
	{
		memset(eepromRead,0,sizeof(eepromRead));
 8003266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800326a:	2205      	movs	r2, #5
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f006 fe43 	bl	8009efa <memset>
		readEe24(eepromRead,sizeof(eepromRead), ( e24_index * nextcounter ) + 2 );
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <profile_load_update_values+0x424>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <profile_load_update_values+0x428>)
 800327c:	7812      	ldrb	r2, [r2, #0]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	3302      	adds	r3, #2
 8003286:	b2da      	uxtb	r2, r3
 8003288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800328c:	2105      	movs	r1, #5
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fafe 	bl	8003890 <readEe24>

		uint16_t __mmhg = eepromRead[1] << 0 | eepromRead[2] << 8 ;
 8003294:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003298:	b21a      	sxth	r2, r3
 800329a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800329e:	021b      	lsls	r3, r3, #8
 80032a0:	b21b      	sxth	r3, r3
 80032a2:	4313      	orrs	r3, r2
 80032a4:	b21b      	sxth	r3, r3
 80032a6:	877b      	strh	r3, [r7, #58]	; 0x3a
		homePage_t->mmhg 		= 	__mmhg 			;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80032ac:	801a      	strh	r2, [r3, #0]
		homePage_t->setMin 		=	eepromRead[3]	;
 80032ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	709a      	strb	r2, [r3, #2]
		homePage_t->setSec 		=	eepromRead[4]	;
 80032b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	70da      	strb	r2, [r3, #3]

		profile_page_change(HOME_PAGE_NUMBER);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fe fe96 	bl	8001ff0 <profile_page_change>
		push_load_value_homePage(homePage_t->mmhg , homePage_t->setMin, homePage_t->setSec);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	8818      	ldrh	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	7899      	ldrb	r1, [r3, #2]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	78db      	ldrb	r3, [r3, #3]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff fd99 	bl	8002e08 <push_load_value_homePage>

		*applyFlag = 0 ;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
	}

}
 80032dc:	bf00      	nop
 80032de:	3740      	adds	r7, #64	; 0x40
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200002fa 	.word	0x200002fa
 80032e8:	200002fc 	.word	0x200002fc

080032ec <auth_page_read>:

/*
 * AUTH: BELOW CODE IS FOR AUTH PAGE
 */
void auth_page_read(uint8_t *displayUartFlag, uint8_t *authFlag, ee24_auth_params_t *ee24_auth_params,uint8_t *aFlag, uint8_t *pageflag)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0d9      	sub	sp, #356	; 0x164
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	f507 74b0 	add.w	r4, r7, #352	; 0x160
 80032f6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
 80032fa:	6020      	str	r0, [r4, #0]
 80032fc:	f507 70b0 	add.w	r0, r7, #352	; 0x160
 8003300:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
 8003304:	6001      	str	r1, [r0, #0]
 8003306:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800330a:	f5a1 71ae 	sub.w	r1, r1, #348	; 0x15c
 800330e:	600a      	str	r2, [r1, #0]
 8003310:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003314:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003318:	6013      	str	r3, [r2, #0]
	uint8_t tempbuff[MAX_MODEM_RX_BUFF] = {0};
 800331a:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800331e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	3304      	adds	r3, #4
 8003328:	22f6      	movs	r2, #246	; 0xf6
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fde4 	bl	8009efa <memset>
	memset(tempbuff,0,sizeof(tempbuff));
 8003332:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003336:	22fa      	movs	r2, #250	; 0xfa
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f006 fddd 	bl	8009efa <memset>
	char 	*c 				= NULL ;
 8003340:	2300      	movs	r3, #0
 8003342:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	uint8_t indexX = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
	uint8_t size = 0 ;
 800334c:	2300      	movs	r3, #0
 800334e:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
	uint8_t receivedBuff[10]= {0} ;
 8003352:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003356:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	3304      	adds	r3, #4
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	809a      	strh	r2, [r3, #4]

	uint8_t userNameAddr_buff[] = { 0x70, 0xFF};
 8003366:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800336a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800336e:	f64f 7270 	movw	r2, #65392	; 0xff70
 8003372:	801a      	strh	r2, [r3, #0]
	uint8_t PasswordAddr_buff[] = { 0x71, 0xFF};
 8003374:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003378:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800337c:	f64f 7271 	movw	r2, #65393	; 0xff71
 8003380:	801a      	strh	r2, [r3, #0]
	uint8_t loginButtonAddr[] = { 0x5A, 0xA5, 0x06, 0x83, 0x73, 0xFF, 0x01, 0x00, 0x01 };
 8003382:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003386:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800338a:	4ad0      	ldr	r2, [pc, #832]	; (80036cc <auth_page_read+0x3e0>)
 800338c:	ca07      	ldmia	r2, {r0, r1, r2}
 800338e:	c303      	stmia	r3!, {r0, r1}
 8003390:	701a      	strb	r2, [r3, #0]

	userNameAddr_buff[ sizeof(userNameAddr_buff) - 1] = '\0'	;
 8003392:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003396:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800339a:	2200      	movs	r2, #0
 800339c:	705a      	strb	r2, [r3, #1]
	PasswordAddr_buff[ sizeof(PasswordAddr_buff) - 1] = '\0'	;
 800339e:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80033a6:	2200      	movs	r2, #0
 80033a8:	705a      	strb	r2, [r3, #1]
	loginButtonAddr[ sizeof(loginButtonAddr) -	1]	  =	'\0'	;
 80033aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80033b2:	2200      	movs	r2, #0
 80033b4:	721a      	strb	r2, [r3, #8]


	if(*displayUartFlag == 1)
 80033b6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033ba:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	f040 81bc 	bne.w	8003740 <auth_page_read+0x454>
	{
		HAL_Delay(1);
 80033c8:	2001      	movs	r0, #1
 80033ca:	f001 fd35 	bl	8004e38 <HAL_Delay>
		for(int i=0; i< rxBufferCount ; i++)
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80033d4:	e012      	b.n	80033fc <auth_page_read+0x110>
		{
			tempbuff[i] = modemRxBuff[i];
 80033d6:	4abe      	ldr	r2, [pc, #760]	; (80036d0 <auth_page_read+0x3e4>)
 80033d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033dc:	4413      	add	r3, r2
 80033de:	7819      	ldrb	r1, [r3, #0]
 80033e0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80033e4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80033e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033ec:	4413      	add	r3, r2
 80033ee:	460a      	mov	r2, r1
 80033f0:	701a      	strb	r2, [r3, #0]
		for(int i=0; i< rxBufferCount ; i++)
 80033f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80033f6:	3301      	adds	r3, #1
 80033f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80033fc:	4bb5      	ldr	r3, [pc, #724]	; (80036d4 <auth_page_read+0x3e8>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003408:	4293      	cmp	r3, r2
 800340a:	dbe4      	blt.n	80033d6 <auth_page_read+0xea>
		}
//		HAL_UART_Transmit(&huart1, &tempbuff, strlen(tempbuff), HAL_MAX_DELAY);
		display_clearModemBuffer();
 800340c:	f7fe fa88 	bl	8001920 <display_clearModemBuffer>

		c = strstr( (char *)tempbuff, (char *)userNameAddr_buff);
 8003410:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8003414:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f006 fd84 	bl	8009f28 <strstr>
 8003420:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		if( c != NULL)
 8003424:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8095 	beq.w	8003558 <auth_page_read+0x26c>
		{
			indexX =0;
 800342e:	2300      	movs	r3, #0
 8003430:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			indexX = c - ( char *)tempbuff ;
 8003434:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003438:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			if(tempbuff[ indexX - 1 ]	==	0x83 )
 8003442:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8003446:	3b01      	subs	r3, #1
 8003448:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800344c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003450:	5cd3      	ldrb	r3, [r2, r3]
 8003452:	2b83      	cmp	r3, #131	; 0x83
 8003454:	d172      	bne.n	800353c <auth_page_read+0x250>
			{
				size 		= tempbuff[ indexX + 4 ] ;
 8003456:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800345a:	3304      	adds	r3, #4
 800345c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003460:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003464:	5cd3      	ldrb	r3, [r2, r3]
 8003466:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
				indexX 	= indexX + 5 ;
 800346a:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800346e:	3305      	adds	r3, #5
 8003470:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

				for(uint8_t i =0; i< size; i++)
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 800347a:	e017      	b.n	80034ac <auth_page_read+0x1c0>
				{
					receivedBuff[i] = tempbuff[indexX] ;
 800347c:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8003480:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8003484:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8003488:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 800348c:	5c89      	ldrb	r1, [r1, r2]
 800348e:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003492:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8003496:	54d1      	strb	r1, [r2, r3]
					indexX++;
 8003498:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800349c:	3301      	adds	r3, #1
 800349e:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
				for(uint8_t i =0; i< size; i++)
 80034a2:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 80034a6:	3301      	adds	r3, #1
 80034a8:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
 80034ac:	f897 2157 	ldrb.w	r2, [r7, #343]	; 0x157
 80034b0:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3e1      	bcc.n	800347c <auth_page_read+0x190>
				}
				ee24_auth_params->ID	=	atoi(receivedBuff) ;
 80034b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034bc:	4618      	mov	r0, r3
 80034be:	f005 fcfd 	bl	8008ebc <atoi>
 80034c2:	4603      	mov	r3, r0
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80034ca:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	701a      	strb	r2, [r3, #0]
				memset(receivedBuff, 0, sizeof(receivedBuff));
 80034d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80034d6:	220a      	movs	r2, #10
 80034d8:	2100      	movs	r1, #0
 80034da:	4618      	mov	r0, r3
 80034dc:	f006 fd0d 	bl	8009efa <memset>
				memset(tempbuff, 0, sizeof(tempbuff));
 80034e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80034e4:	22fa      	movs	r2, #250	; 0xfa
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f006 fd06 	bl	8009efa <memset>

				sprintf(receivedBuff,"id :%d,%d",ee24_auth_params->ID,*aFlag  );
 80034ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80034f2:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003500:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800350c:	4972      	ldr	r1, [pc, #456]	; (80036d8 <auth_page_read+0x3ec>)
 800350e:	f006 fc91 	bl	8009e34 <siprintf>
				HAL_UART_Transmit(&huart1, &receivedBuff, strlen(receivedBuff), HAL_MAX_DELAY);
 8003512:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003516:	4618      	mov	r0, r3
 8003518:	f7fc fe1a 	bl	8000150 <strlen>
 800351c:	4603      	mov	r3, r0
 800351e:	b29a      	uxth	r2, r3
 8003520:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
 8003528:	486c      	ldr	r0, [pc, #432]	; (80036dc <auth_page_read+0x3f0>)
 800352a:	f004 fe9f 	bl	800826c <HAL_UART_Transmit>
				memset(receivedBuff, 0, sizeof(receivedBuff));
 800352e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003532:	220a      	movs	r2, #10
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f006 fcdf 	bl	8009efa <memset>
			}

			++*aFlag ;
 800353c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003540:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	b2da      	uxtb	r2, r3
 800354c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003550:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	701a      	strb	r2, [r3, #0]
		}

		c = NULL ;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		c = strstr( (char *)tempbuff, (char *)PasswordAddr_buff);
 800355e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003562:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003566:	4611      	mov	r1, r2
 8003568:	4618      	mov	r0, r3
 800356a:	f006 fcdd 	bl	8009f28 <strstr>
 800356e:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		if( c != NULL)
 8003572:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003576:	2b00      	cmp	r3, #0
 8003578:	d07a      	beq.n	8003670 <auth_page_read+0x384>
		{
			indexX =0;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
			indexX = c - ( char *)tempbuff ;
 8003580:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003584:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f

			if(tempbuff[ indexX - 1 ]	==	0x83 )
 800358e:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 8003592:	3b01      	subs	r3, #1
 8003594:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8003598:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800359c:	5cd3      	ldrb	r3, [r2, r3]
 800359e:	2b83      	cmp	r3, #131	; 0x83
 80035a0:	d166      	bne.n	8003670 <auth_page_read+0x384>
			{

				size 		= tempbuff[ indexX + 4 ] ;
 80035a2:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80035a6:	3304      	adds	r3, #4
 80035a8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80035ac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	f887 314f 	strb.w	r3, [r7, #335]	; 0x14f
				indexX 	= indexX + 5 ;
 80035b6:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80035ba:	3305      	adds	r3, #5
 80035bc:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
//
				for(uint8_t i =0; i< size; i++)
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 80035c6:	e01a      	b.n	80035fe <auth_page_read+0x312>
				{
//					receivedBuff[i] = tempbuff[indexX] ;
					ee24_auth_params->password[i] = tempbuff[indexX] ;
 80035c8:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80035cc:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80035d0:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80035d4:	f5a1 7186 	sub.w	r1, r1, #268	; 0x10c
 80035d8:	5c89      	ldrb	r1, [r1, r2]
 80035da:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 80035de:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	4413      	add	r3, r2
 80035e6:	460a      	mov	r2, r1
 80035e8:	709a      	strb	r2, [r3, #2]
					indexX++ ;
 80035ea:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 80035ee:	3301      	adds	r3, #1
 80035f0:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
				for(uint8_t i =0; i< size; i++)
 80035f4:	f897 3156 	ldrb.w	r3, [r7, #342]	; 0x156
 80035f8:	3301      	adds	r3, #1
 80035fa:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
 80035fe:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
 8003602:	f897 314f 	ldrb.w	r3, [r7, #335]	; 0x14f
 8003606:	429a      	cmp	r2, r3
 8003608:	d3de      	bcc.n	80035c8 <auth_page_read+0x2dc>
				}

				memset(tempbuff, 0, sizeof(tempbuff));
 800360a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800360e:	22fa      	movs	r2, #250	; 0xfa
 8003610:	2100      	movs	r1, #0
 8003612:	4618      	mov	r0, r3
 8003614:	f006 fc71 	bl	8009efa <memset>
				HAL_UART_Transmit(&huart1, &ee24_auth_params->password , strlen( ee24_auth_params->password ), HAL_MAX_DELAY);
 8003618:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800361c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	1c9c      	adds	r4, r3, #2
 8003624:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003628:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3302      	adds	r3, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc fd8d 	bl	8000150 <strlen>
 8003636:	4603      	mov	r3, r0
 8003638:	b29a      	uxth	r2, r3
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	4621      	mov	r1, r4
 8003640:	4826      	ldr	r0, [pc, #152]	; (80036dc <auth_page_read+0x3f0>)
 8003642:	f004 fe13 	bl	800826c <HAL_UART_Transmit>
				memset(receivedBuff, 0, sizeof(receivedBuff));
 8003646:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800364a:	220a      	movs	r2, #10
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f006 fc53 	bl	8009efa <memset>

				++*aFlag ;
 8003654:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003658:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003668:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	701a      	strb	r2, [r3, #0]
			}

		}
		c = NULL ;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
		c = strstr( (char *)tempbuff, (char *)loginButtonAddr);
 8003676:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800367a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f006 fc51 	bl	8009f28 <strstr>
 8003686:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
		if( c != NULL)
 800368a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800368e:	2b00      	cmp	r3, #0
 8003690:	d04f      	beq.n	8003732 <auth_page_read+0x446>
		{
			if( *aFlag  >= 3)
 8003692:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003696:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d91e      	bls.n	80036e0 <auth_page_read+0x3f4>
			{
//				readEe24_For_Auth_admin(ee24_auth_params);
				*pageflag = readEe24_For_Auth_admin(ee24_auth_params);
 80036a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80036a6:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	f000 f986 	bl	80039bc <readEe24_For_Auth_admin>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80036b8:	701a      	strb	r2, [r3, #0]
//				uint8_t data[30];
//				memset(data,0,sizeof(data));
//				sprintf(data," user\n" );
//				HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
				*aFlag = 1 ;
 80036ba:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80036be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
 80036c8:	e033      	b.n	8003732 <auth_page_read+0x446>
 80036ca:	bf00      	nop
 80036cc:	0800d860 	.word	0x0800d860
 80036d0:	20000200 	.word	0x20000200
 80036d4:	20000530 	.word	0x20000530
 80036d8:	0800d82c 	.word	0x0800d82c
 80036dc:	200004a0 	.word	0x200004a0
			}
			else
			{

				uint8_t data[30];
				memset(data,0,sizeof(data));
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	221e      	movs	r2, #30
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fc06 	bl	8009efa <memset>
				sprintf(data," user id or password not clicked %d\n",*aFlag );
 80036ee:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80036f2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4912      	ldr	r1, [pc, #72]	; (800374c <auth_page_read+0x460>)
 8003702:	4618      	mov	r0, r3
 8003704:	f006 fb96 	bl	8009e34 <siprintf>
				HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003708:	f107 0314 	add.w	r3, r7, #20
 800370c:	4618      	mov	r0, r3
 800370e:	f7fc fd1f 	bl	8000150 <strlen>
 8003712:	4603      	mov	r3, r0
 8003714:	b29a      	uxth	r2, r3
 8003716:	f107 0114 	add.w	r1, r7, #20
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	480c      	ldr	r0, [pc, #48]	; (8003750 <auth_page_read+0x464>)
 8003720:	f004 fda4 	bl	800826c <HAL_UART_Transmit>
				*aFlag = 1 ;
 8003724:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003728:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2201      	movs	r2, #1
 8003730:	701a      	strb	r2, [r3, #0]
			}
		}

		*displayUartFlag = 0 ;
 8003732:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8003736:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
	}
}
 8003740:	bf00      	nop
 8003742:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8003746:	46bd      	mov	sp, r7
 8003748:	bd90      	pop	{r4, r7, pc}
 800374a:	bf00      	nop
 800374c:	0800d838 	.word	0x0800d838
 8003750:	200004a0 	.word	0x200004a0

08003754 <writeEe24>:
#include "stm32f1xx_hal.h"
#include "ee24.h"


  void writeEe24(ee24Params *param)
  {
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b090      	sub	sp, #64	; 0x40
 8003758:	af04      	add	r7, sp, #16
 800375a:	6078      	str	r0, [r7, #4]
	  uint8_t data_write[5];
	  uint8_t k = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  memset(data_write,0,sizeof(data_write));
 8003762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003766:	2205      	movs	r2, #5
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f006 fbc5 	bl	8009efa <memset>

	  data_write[0]	=	param->serialNum	;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  data_write[1]	=	(param->mmhg>>0)	;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	885b      	ldrh	r3, [r3, #2]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  data_write[2]	=	(param->mmhg>>8)	;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	885b      	ldrh	r3, [r3, #2]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  data_write[3]	=	param->setMin		;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	791b      	ldrb	r3, [r3, #4]
 8003794:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  data_write[4]	=	param->setSec		;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	795b      	ldrb	r3, [r3, #5]
 800379c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	  uint8_t index = param->serialNum * 5 - 5 ;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	0092      	lsls	r2, r2, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3b05      	subs	r3, #5
 80037ae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		uint8_t data[30];
		memset(data,0,sizeof(data));
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	221e      	movs	r2, #30
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f006 fb9d 	bl	8009efa <memset>
		sprintf(data,"write: :%d : %d : %d: %d:%d\n",data_write[0],data_write[1],data_write[2],data_write[3],data_write[4]);
 80037c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037c4:	461c      	mov	r4, r3
 80037c6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80037ca:	461d      	mov	r5, r3
 80037cc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80037d0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80037d4:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80037d8:	f107 0008 	add.w	r0, r7, #8
 80037dc:	9102      	str	r1, [sp, #8]
 80037de:	9201      	str	r2, [sp, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	462b      	mov	r3, r5
 80037e4:	4622      	mov	r2, r4
 80037e6:	4927      	ldr	r1, [pc, #156]	; (8003884 <writeEe24+0x130>)
 80037e8:	f006 fb24 	bl	8009e34 <siprintf>
		HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fcad 	bl	8000150 <strlen>
 80037f6:	4603      	mov	r3, r0
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	f107 0108 	add.w	r1, r7, #8
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003802:	4821      	ldr	r0, [pc, #132]	; (8003888 <writeEe24+0x134>)
 8003804:	f004 fd32 	bl	800826c <HAL_UART_Transmit>

	  for(uint8_t i=1;i<10;i++)
 8003808:	2301      	movs	r3, #1
 800380a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800380e:	e010      	b.n	8003832 <writeEe24+0xde>
	  {
	      if(index >= 16*i - 4)
 8003810:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003814:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	3b04      	subs	r3, #4
 800381c:	429a      	cmp	r2, r3
 800381e:	db03      	blt.n	8003828 <writeEe24+0xd4>
	      {
	          k = i;
 8003820:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003824:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  for(uint8_t i=1;i<10;i++)
 8003828:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800382c:	3301      	adds	r3, #1
 800382e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003832:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003836:	2b09      	cmp	r3, #9
 8003838:	d9ea      	bls.n	8003810 <writeEe24+0xbc>
	      }
	  }

	  index = index+ k;
 800383a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800383e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003842:	4413      	add	r3, r2
 8003844:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d


	  if (HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, index, 1, &data_write , sizeof(data_write), HAL_MAX_DELAY) != HAL_OK)
 8003848:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800384c:	b29a      	uxth	r2, r3
 800384e:	f04f 33ff 	mov.w	r3, #4294967295
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	2305      	movs	r3, #5
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2301      	movs	r3, #1
 8003860:	21a0      	movs	r1, #160	; 0xa0
 8003862:	480a      	ldr	r0, [pc, #40]	; (800388c <writeEe24+0x138>)
 8003864:	f002 fbd8 	bl	8006018 <HAL_I2C_Mem_Write>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <writeEe24+0x11e>
	  {
	    Error_Handler();
 800386e:	f000 fcc9 	bl	8004204 <Error_Handler>
	  }
	  HAL_Delay(2000);
 8003872:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003876:	f001 fadf 	bl	8004e38 <HAL_Delay>

  }
 800387a:	bf00      	nop
 800387c:	3730      	adds	r7, #48	; 0x30
 800387e:	46bd      	mov	sp, r7
 8003880:	bdb0      	pop	{r4, r5, r7, pc}
 8003882:	bf00      	nop
 8003884:	0800d86c 	.word	0x0800d86c
 8003888:	200004a0 	.word	0x200004a0
 800388c:	20000404 	.word	0x20000404

08003890 <readEe24>:


  }

  void readEe24(uint8_t *data_read, uint8_t data_read_size, uint8_t serNo)
  {
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	; 0x30
 8003894:	af04      	add	r7, sp, #16
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
 800389c:	4613      	mov	r3, r2
 800389e:	70bb      	strb	r3, [r7, #2]
	  uint8_t k = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
	  memset(data_read,0,data_read_size);
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	461a      	mov	r2, r3
 80038a8:	2100      	movs	r1, #0
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f006 fb25 	bl	8009efa <memset>

	  uint8_t index = serNo * 5 - 5 ;
 80038b0:	78bb      	ldrb	r3, [r7, #2]
 80038b2:	461a      	mov	r2, r3
 80038b4:	0092      	lsls	r2, r2, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	3b05      	subs	r3, #5
 80038bc:	773b      	strb	r3, [r7, #28]

	  for(uint8_t i=1;i<10;i++)
 80038be:	2301      	movs	r3, #1
 80038c0:	77bb      	strb	r3, [r7, #30]
 80038c2:	e00a      	b.n	80038da <readEe24+0x4a>
	  {
	      if(index >= 16*i - 4)
 80038c4:	7f3a      	ldrb	r2, [r7, #28]
 80038c6:	7fbb      	ldrb	r3, [r7, #30]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	3b04      	subs	r3, #4
 80038cc:	429a      	cmp	r2, r3
 80038ce:	db01      	blt.n	80038d4 <readEe24+0x44>
	      {
	          k = i ;
 80038d0:	7fbb      	ldrb	r3, [r7, #30]
 80038d2:	77fb      	strb	r3, [r7, #31]
	  for(uint8_t i=1;i<10;i++)
 80038d4:	7fbb      	ldrb	r3, [r7, #30]
 80038d6:	3301      	adds	r3, #1
 80038d8:	77bb      	strb	r3, [r7, #30]
 80038da:	7fbb      	ldrb	r3, [r7, #30]
 80038dc:	2b09      	cmp	r3, #9
 80038de:	d9f1      	bls.n	80038c4 <readEe24+0x34>
	      }
	  }

	  index = index+ k;
 80038e0:	7f3a      	ldrb	r2, [r7, #28]
 80038e2:	7ffb      	ldrb	r3, [r7, #31]
 80038e4:	4413      	add	r3, r2
 80038e6:	773b      	strb	r3, [r7, #28]

	  if (HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, index, 1, data_read, data_read_size, HAL_MAX_DELAY) != HAL_OK)
 80038e8:	7f3b      	ldrb	r3, [r7, #28]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	f04f 31ff 	mov.w	r1, #4294967295
 80038f4:	9102      	str	r1, [sp, #8]
 80038f6:	9301      	str	r3, [sp, #4]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	2301      	movs	r3, #1
 80038fe:	21a0      	movs	r1, #160	; 0xa0
 8003900:	482a      	ldr	r0, [pc, #168]	; (80039ac <readEe24+0x11c>)
 8003902:	f002 fc83 	bl	800620c <HAL_I2C_Mem_Read>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <readEe24+0x80>
	  {
	    Error_Handler();
 800390c:	f000 fc7a 	bl	8004204 <Error_Handler>
	  }
	  HAL_Delay(2000);
 8003910:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003914:	f001 fa90 	bl	8004e38 <HAL_Delay>
	  uint8_t data[20];
	  memset(data,0,sizeof(data));
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	2214      	movs	r2, #20
 800391e:	2100      	movs	r1, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f006 faea 	bl	8009efa <memset>
	  sprintf(data,"sr no:%d,idx :%d \n",serNo,index);
 8003926:	78ba      	ldrb	r2, [r7, #2]
 8003928:	7f3b      	ldrb	r3, [r7, #28]
 800392a:	f107 0008 	add.w	r0, r7, #8
 800392e:	4920      	ldr	r1, [pc, #128]	; (80039b0 <readEe24+0x120>)
 8003930:	f006 fa80 	bl	8009e34 <siprintf>
	  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003934:	f107 0308 	add.w	r3, r7, #8
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fc09 	bl	8000150 <strlen>
 800393e:	4603      	mov	r3, r0
 8003940:	b29a      	uxth	r2, r3
 8003942:	f107 0108 	add.w	r1, r7, #8
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	481a      	ldr	r0, [pc, #104]	; (80039b4 <readEe24+0x124>)
 800394c:	f004 fc8e 	bl	800826c <HAL_UART_Transmit>
	  for(uint8_t i=0;i<5;i++)
 8003950:	2300      	movs	r3, #0
 8003952:	777b      	strb	r3, [r7, #29]
 8003954:	e022      	b.n	800399c <readEe24+0x10c>
	  {
		  memset(data,0,sizeof(data));
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	2214      	movs	r2, #20
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f006 facb 	bl	8009efa <memset>
		  sprintf(data,"data is [%d] :%d \n",i,data_read[i]);
 8003964:	7f79      	ldrb	r1, [r7, #29]
 8003966:	7f7b      	ldrb	r3, [r7, #29]
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	f107 0008 	add.w	r0, r7, #8
 8003972:	460a      	mov	r2, r1
 8003974:	4910      	ldr	r1, [pc, #64]	; (80039b8 <readEe24+0x128>)
 8003976:	f006 fa5d 	bl	8009e34 <siprintf>
		  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4618      	mov	r0, r3
 8003980:	f7fc fbe6 	bl	8000150 <strlen>
 8003984:	4603      	mov	r3, r0
 8003986:	b29a      	uxth	r2, r3
 8003988:	f107 0108 	add.w	r1, r7, #8
 800398c:	f04f 33ff 	mov.w	r3, #4294967295
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <readEe24+0x124>)
 8003992:	f004 fc6b 	bl	800826c <HAL_UART_Transmit>
	  for(uint8_t i=0;i<5;i++)
 8003996:	7f7b      	ldrb	r3, [r7, #29]
 8003998:	3301      	adds	r3, #1
 800399a:	777b      	strb	r3, [r7, #29]
 800399c:	7f7b      	ldrb	r3, [r7, #29]
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d9d9      	bls.n	8003956 <readEe24+0xc6>
	  }
  }
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	3720      	adds	r7, #32
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20000404 	.word	0x20000404
 80039b0:	0800d88c 	.word	0x0800d88c
 80039b4:	200004a0 	.word	0x200004a0
 80039b8:	0800d8a0 	.word	0x0800d8a0

080039bc <readEe24_For_Auth_admin>:
   * BELOW CODE IS FOR AUTHENTICATION
   */

  // @breif below function is for read authentication values
  char readEe24_For_Auth_admin(ee24_auth_params_t *auth_params)
  {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b0a2      	sub	sp, #136	; 0x88
 80039c0:	af04      	add	r7, sp, #16
 80039c2:	6078      	str	r0, [r7, #4]
//		uint8_t data[30];
//		memset(data,0,sizeof(data));
//		sprintf(data," tr :%d\n",target);
//		HAL_UART_Transmit(&huart1, &auth_params->ID, strlen(auth_params->ID), HAL_MAX_DELAY);
//		HAL_UART_Transmit(&huart1, &auth_params->password, strlen(auth_params->password), HAL_MAX_DELAY);
	  uint8_t flag = 0 ;//true
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	  uint8_t data_read[8];
	  memset(data_read,0,sizeof(data_read));
 80039ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039ce:	2208      	movs	r2, #8
 80039d0:	2100      	movs	r1, #0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f006 fa91 	bl	8009efa <memset>
	  uint8_t i = 0;
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
//	  uint8_t data[8];
	  uint8_t k=2;
 80039de:	2302      	movs	r3, #2
 80039e0:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
//
//
//
	  if (HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 600, 1, &data_read, sizeof(data_read), HAL_MAX_DELAY) != HAL_OK)
 80039e4:	f04f 33ff 	mov.w	r3, #4294967295
 80039e8:	9302      	str	r3, [sp, #8]
 80039ea:	2308      	movs	r3, #8
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2301      	movs	r3, #1
 80039f6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80039fa:	21a0      	movs	r1, #160	; 0xa0
 80039fc:	4849      	ldr	r0, [pc, #292]	; (8003b24 <readEe24_For_Auth_admin+0x168>)
 80039fe:	f002 fc05 	bl	800620c <HAL_I2C_Mem_Read>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <readEe24_For_Auth_admin+0x50>
	  {
	    Error_Handler();
 8003a08:	f000 fbfc 	bl	8004204 <Error_Handler>
	  }
	  HAL_Delay(2000);
 8003a0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a10:	f001 fa12 	bl	8004e38 <HAL_Delay>

//	  sprintf(data," 1 :%d, ID :%d \n",data_read[1],auth_params->ID);
//	  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);

	  if(auth_params->ID == data_read[1])
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d160      	bne.n	8003ae2 <readEe24_For_Auth_admin+0x126>
	  {
		  for( i=0; i<6; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003a26:	e050      	b.n	8003aca <readEe24_For_Auth_admin+0x10e>
		  {
			  if( auth_params->password[i] == data_read[k])
 8003a28:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	789a      	ldrb	r2, [r3, #2]
 8003a32:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003a36:	3378      	adds	r3, #120	; 0x78
 8003a38:	443b      	add	r3, r7
 8003a3a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d11d      	bne.n	8003a7e <readEe24_For_Auth_admin+0xc2>
			  {
					uint8_t data[30];
					memset(data,0,sizeof(data));
 8003a42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a46:	221e      	movs	r2, #30
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f006 fa55 	bl	8009efa <memset>
					sprintf(data," its matched %d\n",i);
 8003a50:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8003a54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a58:	4933      	ldr	r1, [pc, #204]	; (8003b28 <readEe24_For_Auth_admin+0x16c>)
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f006 f9ea 	bl	8009e34 <siprintf>
					HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003a60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fc fb73 	bl	8000150 <strlen>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003a72:	f04f 33ff 	mov.w	r3, #4294967295
 8003a76:	482d      	ldr	r0, [pc, #180]	; (8003b2c <readEe24_For_Auth_admin+0x170>)
 8003a78:	f004 fbf8 	bl	800826c <HAL_UART_Transmit>
 8003a7c:	e01b      	b.n	8003ab6 <readEe24_For_Auth_admin+0xfa>
			  }
			  else
			  {
					uint8_t data[30];
					memset(data,0,sizeof(data));
 8003a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a82:	221e      	movs	r2, #30
 8003a84:	2100      	movs	r1, #0
 8003a86:	4618      	mov	r0, r3
 8003a88:	f006 fa37 	bl	8009efa <memset>
					sprintf(data,"please enter correct password\n");
 8003a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a90:	4927      	ldr	r1, [pc, #156]	; (8003b30 <readEe24_For_Auth_admin+0x174>)
 8003a92:	4618      	mov	r0, r3
 8003a94:	f006 f9ce 	bl	8009e34 <siprintf>
					HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003a98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fc fb57 	bl	8000150 <strlen>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003aae:	481f      	ldr	r0, [pc, #124]	; (8003b2c <readEe24_For_Auth_admin+0x170>)
 8003ab0:	f004 fbdc 	bl	800826c <HAL_UART_Transmit>
					break ;
 8003ab4:	e00d      	b.n	8003ad2 <readEe24_For_Auth_admin+0x116>
			  }

			  k++;
 8003ab6:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8003aba:	3301      	adds	r3, #1
 8003abc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		  for( i=0; i<6; i++)
 8003ac0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003aca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d9aa      	bls.n	8003a28 <readEe24_For_Auth_admin+0x6c>
		  }
		  if(i == 6)
 8003ad2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d11e      	bne.n	8003b18 <readEe24_For_Auth_admin+0x15c>
			  flag = 1 ;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ae0:	e01a      	b.n	8003b18 <readEe24_For_Auth_admin+0x15c>

	  }
	  else
	  {
			uint8_t data[30];
			memset(data,0,sizeof(data));
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	221e      	movs	r2, #30
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f006 fa05 	bl	8009efa <memset>
			sprintf(data,"please enter admin user id\n");
 8003af0:	f107 030c 	add.w	r3, r7, #12
 8003af4:	490f      	ldr	r1, [pc, #60]	; (8003b34 <readEe24_For_Auth_admin+0x178>)
 8003af6:	4618      	mov	r0, r3
 8003af8:	f006 f99c 	bl	8009e34 <siprintf>
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fb25 	bl	8000150 <strlen>
 8003b06:	4603      	mov	r3, r0
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	f107 010c 	add.w	r1, r7, #12
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b12:	4806      	ldr	r0, [pc, #24]	; (8003b2c <readEe24_For_Auth_admin+0x170>)
 8003b14:	f004 fbaa 	bl	800826c <HAL_UART_Transmit>
	  }
	  return flag ;
 8003b18:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77


  }
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3778      	adds	r7, #120	; 0x78
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	20000404 	.word	0x20000404
 8003b28:	0800d8b4 	.word	0x0800d8b4
 8003b2c:	200004a0 	.word	0x200004a0
 8003b30:	0800d8c8 	.word	0x0800d8c8
 8003b34:	0800d8e8 	.word	0x0800d8e8

08003b38 <pid_core_functionality>:


}

void pid_core_functionality(uint8_t runStopFlag, float ut, uint8_t *control, float currentMmhg, float targetMmhg)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]

	if( runStopFlag == 1)
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d139      	bne.n	8003bc2 <pid_core_functionality+0x8a>
	{
		if( (ut >= 1) )
 8003b4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b52:	68b8      	ldr	r0, [r7, #8]
 8003b54:	f7fd fac8 	bl	80010e8 <__aeabi_fcmpge>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d018      	beq.n	8003b90 <pid_core_functionality+0x58>
		{
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003b5e:	4827      	ldr	r0, [pc, #156]	; (8003bfc <pid_core_functionality+0xc4>)
 8003b60:	f7fc faf6 	bl	8000150 <strlen>
 8003b64:	4603      	mov	r3, r0
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6c:	4923      	ldr	r1, [pc, #140]	; (8003bfc <pid_core_functionality+0xc4>)
 8003b6e:	4824      	ldr	r0, [pc, #144]	; (8003c00 <pid_core_functionality+0xc8>)
 8003b70:	f004 fb7c 	bl	800826c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(VACCUM_SUCKER_GPIO_Port,VACCUM_SUCKER_Pin,0);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2120      	movs	r1, #32
 8003b78:	4822      	ldr	r0, [pc, #136]	; (8003c04 <pid_core_functionality+0xcc>)
 8003b7a:	f002 f8f1 	bl	8005d60 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(VACCUM_PRESSURE_GPIO_Port,VACCUM_PRESSURE_Pin,1);
 8003b7e:	2201      	movs	r2, #1
 8003b80:	2110      	movs	r1, #16
 8003b82:	4820      	ldr	r0, [pc, #128]	; (8003c04 <pid_core_functionality+0xcc>)
 8003b84:	f002 f8ec 	bl	8005d60 <HAL_GPIO_WritePin>
			HAL_Delay (5);
 8003b88:	2005      	movs	r0, #5
 8003b8a:	f001 f955 	bl	8004e38 <HAL_Delay>
//	{
//		  uint8_t _data[20];
//		  sprintf(_data,"its in %d\n",runStopFlag);
//		  HAL_UART_Transmit(&huart1, &_data, strlen(_data), HAL_MAX_DELAY);
//	}
}
 8003b8e:	e030      	b.n	8003bf2 <pid_core_functionality+0xba>
		  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8003b90:	481a      	ldr	r0, [pc, #104]	; (8003bfc <pid_core_functionality+0xc4>)
 8003b92:	f7fc fadd 	bl	8000150 <strlen>
 8003b96:	4603      	mov	r3, r0
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	4917      	ldr	r1, [pc, #92]	; (8003bfc <pid_core_functionality+0xc4>)
 8003ba0:	4817      	ldr	r0, [pc, #92]	; (8003c00 <pid_core_functionality+0xc8>)
 8003ba2:	f004 fb63 	bl	800826c <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(VACCUM_SUCKER_GPIO_Port,VACCUM_SUCKER_Pin,1);
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2120      	movs	r1, #32
 8003baa:	4816      	ldr	r0, [pc, #88]	; (8003c04 <pid_core_functionality+0xcc>)
 8003bac:	f002 f8d8 	bl	8005d60 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(VACCUM_PRESSURE_GPIO_Port,VACCUM_PRESSURE_Pin,1);
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	2110      	movs	r1, #16
 8003bb4:	4813      	ldr	r0, [pc, #76]	; (8003c04 <pid_core_functionality+0xcc>)
 8003bb6:	f002 f8d3 	bl	8005d60 <HAL_GPIO_WritePin>
		  HAL_Delay (5);
 8003bba:	2005      	movs	r0, #5
 8003bbc:	f001 f93c 	bl	8004e38 <HAL_Delay>
}
 8003bc0:	e017      	b.n	8003bf2 <pid_core_functionality+0xba>
	else if( ( runStopFlag == 2 ) || currentMmhg > targetMmhg )//STOP BUTTON
 8003bc2:	7bfb      	ldrb	r3, [r7, #15]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d007      	beq.n	8003bd8 <pid_core_functionality+0xa0>
 8003bc8:	69b9      	ldr	r1, [r7, #24]
 8003bca:	6838      	ldr	r0, [r7, #0]
 8003bcc:	f7fd fa96 	bl	80010fc <__aeabi_fcmpgt>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d100      	bne.n	8003bd8 <pid_core_functionality+0xa0>
}
 8003bd6:	e00c      	b.n	8003bf2 <pid_core_functionality+0xba>
		HAL_GPIO_WritePin(VACCUM_SUCKER_GPIO_Port,VACCUM_SUCKER_Pin,1);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2120      	movs	r1, #32
 8003bdc:	4809      	ldr	r0, [pc, #36]	; (8003c04 <pid_core_functionality+0xcc>)
 8003bde:	f002 f8bf 	bl	8005d60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(VACCUM_PRESSURE_GPIO_Port,VACCUM_PRESSURE_Pin,0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2110      	movs	r1, #16
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <pid_core_functionality+0xcc>)
 8003be8:	f002 f8ba 	bl	8005d60 <HAL_GPIO_WritePin>
		HAL_Delay (5);
 8003bec:	2005      	movs	r0, #5
 8003bee:	f001 f923 	bl	8004e38 <HAL_Delay>
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000300 	.word	0x20000300
 8003c00:	200004a0 	.word	0x200004a0
 8003c04:	40010800 	.word	0x40010800

08003c08 <profile_page_change1>:

static void profile_page_change1(uint8_t value)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]

	uint8_t nextPage_buff[] = { 0x5A, 0xA5, 0x07, 0x82, 0x00, 0x84, 0x5A, 0x01,00,value } ;
 8003c12:	235a      	movs	r3, #90	; 0x5a
 8003c14:	733b      	strb	r3, [r7, #12]
 8003c16:	23a5      	movs	r3, #165	; 0xa5
 8003c18:	737b      	strb	r3, [r7, #13]
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	73bb      	strb	r3, [r7, #14]
 8003c1e:	2382      	movs	r3, #130	; 0x82
 8003c20:	73fb      	strb	r3, [r7, #15]
 8003c22:	2300      	movs	r3, #0
 8003c24:	743b      	strb	r3, [r7, #16]
 8003c26:	2384      	movs	r3, #132	; 0x84
 8003c28:	747b      	strb	r3, [r7, #17]
 8003c2a:	235a      	movs	r3, #90	; 0x5a
 8003c2c:	74bb      	strb	r3, [r7, #18]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	74fb      	strb	r3, [r7, #19]
 8003c32:	2300      	movs	r3, #0
 8003c34:	753b      	strb	r3, [r7, #20]
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart2, &nextPage_buff, 10, HAL_MAX_DELAY);
 8003c3a:	f107 010c 	add.w	r1, r7, #12
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c42:	220a      	movs	r2, #10
 8003c44:	4803      	ldr	r0, [pc, #12]	; (8003c54 <profile_page_change1+0x4c>)
 8003c46:	f004 fb11 	bl	800826c <HAL_UART_Transmit>

}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	200004e8 	.word	0x200004e8

08003c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	b0b6      	sub	sp, #216	; 0xd8
 8003c5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c5e:	f001 f889 	bl	8004d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c62:	f000 f8a5 	bl	8003db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c66:	f000 fa0b 	bl	8004080 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003c6a:	f000 f8fd 	bl	8003e68 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003c6e:	f000 f9b3 	bl	8003fd8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8003c72:	f000 f965 	bl	8003f40 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003c76:	f000 f9d9 	bl	800402c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003c7a:	f000 f933 	bl	8003ee4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8003c7e:	4841      	ldr	r0, [pc, #260]	; (8003d84 <main+0x12c>)
 8003c80:	f003 fef6 	bl	8007a70 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart2,&modemRxBuff[rxBufferCount],1);
 8003c84:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <main+0x130>)
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <main+0x134>)
 8003c8e:	4413      	add	r3, r2
 8003c90:	2201      	movs	r2, #1
 8003c92:	4619      	mov	r1, r3
 8003c94:	483e      	ldr	r0, [pc, #248]	; (8003d90 <main+0x138>)
 8003c96:	f004 fb6c 	bl	8008372 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start(&hadc1);
 8003c9a:	483e      	ldr	r0, [pc, #248]	; (8003d94 <main+0x13c>)
 8003c9c:	f001 f9c8 	bl	8005030 <HAL_ADC_Start>
  HAL_GPIO_WritePin(VACCUM_PRESSURE_GPIO_Port,VACCUM_PRESSURE_Pin,1);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	483c      	ldr	r0, [pc, #240]	; (8003d98 <main+0x140>)
 8003ca6:	f002 f85b 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_Delay (100);
 8003caa:	2064      	movs	r0, #100	; 0x64
 8003cac:	f001 f8c4 	bl	8004e38 <HAL_Delay>
  HAL_GPIO_WritePin(VACCUM_SUCKER_GPIO_Port,VACCUM_SUCKER_Pin,1);
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	4838      	ldr	r0, [pc, #224]	; (8003d98 <main+0x140>)
 8003cb6:	f002 f853 	bl	8005d60 <HAL_GPIO_WritePin>
  HAL_Delay (100);
 8003cba:	2064      	movs	r0, #100	; 0x64
 8003cbc:	f001 f8bc 	bl	8004e38 <HAL_Delay>

  // Start timer
  HAL_TIM_Base_Start(&htim2);
 8003cc0:	4830      	ldr	r0, [pc, #192]	; (8003d84 <main+0x12c>)
 8003cc2:	f003 fe8b 	bl	80079dc <HAL_TIM_Base_Start>
  //TODO: need to verify below line after code implimentaion
  display_clearModemBuffer();
 8003cc6:	f7fd fe2b 	bl	8001920 <display_clearModemBuffer>

//	TODO: need to uncomment below commented line for Home Page
  controller_params controllerParam =
 8003cca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cce:	2228      	movs	r2, #40	; 0x28
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f006 f911 	bl	8009efa <memset>
		  .min				=	0.0		,
		  .runStopButton	=	0
  };


  displayParams displayParam =
 8003cd8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		  .setpointt			=	0	,
		  .ControlSystemFlag	=	0	,
		  .controlTimeFlag		=	2
  };

  pid_params pidparams =
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <main+0x144>)
 8003cee:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003d00:	e884 0003 	stmia.w	r4, {r0, r1}
//		  .setMin		=	20	,
//		  .setSec		=	23
//  };

  uint8_t data[100] ;
  uint8_t  page_invoke = 1;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

//  writeEe24(&SerialNubParam);
  
  home_page_t homePage_t =
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	803b      	strh	r3, [r7, #0]
 8003d0e:	2300      	movs	r3, #0
 8003d10:	70bb      	strb	r3, [r7, #2]
 8003d12:	2300      	movs	r3, #0
 8003d14:	70fb      	strb	r3, [r7, #3]
  {
		  .mmhg		=	000	,
		  .setMin	=	0	,
		  .setSec	=	0	,
  };
  profile_page_change1(AUTH_PAGE_NUMBER);//AUTHENTICATION PAGE ADDRESS
 8003d16:	2007      	movs	r0, #7
 8003d18:	f7ff ff76 	bl	8003c08 <profile_page_change1>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */

	  auth_init(&displayUartFlag, &authFlag);
 8003d1c:	4920      	ldr	r1, [pc, #128]	; (8003da0 <main+0x148>)
 8003d1e:	4821      	ldr	r0, [pc, #132]	; (8003da4 <main+0x14c>)
 8003d20:	f7fd fbf4 	bl	800150c <auth_init>
//		uint8_t data[30];
//		memset(data,0,sizeof(data));
//		sprintf(data," authFlag :%d\n",authFlag);
//		HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
		if(authFlag == 1 )
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <main+0x148>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d125      	bne.n	8003d78 <main+0x120>
		{
			 profile_page_change1(HOME_PAGE_NUMBER);
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f7ff ff6b 	bl	8003c08 <profile_page_change1>
		}

	  while(authFlag == 1 )
 8003d32:	e021      	b.n	8003d78 <main+0x120>
	  {
			switch(current_page)
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <main+0x150>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2bca      	cmp	r3, #202	; 0xca
 8003d3a:	d017      	beq.n	8003d6c <main+0x114>
 8003d3c:	2bca      	cmp	r3, #202	; 0xca
 8003d3e:	dc1b      	bgt.n	8003d78 <main+0x120>
 8003d40:	2bc8      	cmp	r3, #200	; 0xc8
 8003d42:	d007      	beq.n	8003d54 <main+0xfc>
 8003d44:	2bc9      	cmp	r3, #201	; 0xc9
 8003d46:	d117      	bne.n	8003d78 <main+0x120>
			{
				case ( PROFILE_WRITE_PAGE ) :
				{

					writePage_init(&displayUartFlag, &homePage_t);
 8003d48:	463b      	mov	r3, r7
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4815      	ldr	r0, [pc, #84]	; (8003da4 <main+0x14c>)
 8003d4e:	f000 fcf3 	bl	8004738 <writePage_init>
					break ;
 8003d52:	e011      	b.n	8003d78 <main+0x120>
				}
				case ( PROFILE_HOME_PAGE |VACCUME_TEST_PAGE ) :
				{


					homePage_init(&currenttime, &homePage_t, &displayUartFlag, &pidparams, &controllerParam);
 8003d54:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d58:	4639      	mov	r1, r7
 8003d5a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	4a10      	ldr	r2, [pc, #64]	; (8003da4 <main+0x14c>)
 8003d64:	4811      	ldr	r0, [pc, #68]	; (8003dac <main+0x154>)
 8003d66:	f000 fa8d 	bl	8004284 <homePage_init>

					break ;
 8003d6a:	e005      	b.n	8003d78 <main+0x120>
				}
				case ( PROFILE_LOAD_PAGE ) :
				{
					profile_load_init( &displayUartFlag, &homePage_t);
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4619      	mov	r1, r3
 8003d70:	480c      	ldr	r0, [pc, #48]	; (8003da4 <main+0x14c>)
 8003d72:	f000 fcbb 	bl	80046ec <profile_load_init>
					break ;
 8003d76:	bf00      	nop
	  while(authFlag == 1 )
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <main+0x148>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d0d9      	beq.n	8003d34 <main+0xdc>
	  auth_init(&displayUartFlag, &authFlag);
 8003d80:	e7cc      	b.n	8003d1c <main+0xc4>
 8003d82:	bf00      	nop
 8003d84:	20000458 	.word	0x20000458
 8003d88:	20000530 	.word	0x20000530
 8003d8c:	20000200 	.word	0x20000200
 8003d90:	200004e8 	.word	0x200004e8
 8003d94:	200003d4 	.word	0x200003d4
 8003d98:	40010800 	.word	0x40010800
 8003d9c:	0800d908 	.word	0x0800d908
 8003da0:	200003d1 	.word	0x200003d1
 8003da4:	200003d0 	.word	0x200003d0
 8003da8:	20000001 	.word	0x20000001
 8003dac:	200003c8 	.word	0x200003c8

08003db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b094      	sub	sp, #80	; 0x50
 8003db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dba:	2228      	movs	r2, #40	; 0x28
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f006 f89b 	bl	8009efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003dea:	2300      	movs	r3, #0
 8003dec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003dee:	2301      	movs	r3, #1
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003df2:	2302      	movs	r3, #2
 8003df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 f81c 	bl	8006e44 <HAL_RCC_OscConfig>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003e12:	f000 f9f7 	bl	8004204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e16:	230f      	movs	r3, #15
 8003e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f003 fa88 	bl	8007348 <HAL_RCC_ClockConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003e3e:	f000 f9e1 	bl	8004204 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003e42:	2302      	movs	r3, #2
 8003e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f003 fc08 	bl	8007664 <HAL_RCCEx_PeriphCLKConfig>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003e5a:	f000 f9d3 	bl	8004204 <Error_Handler>
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3750      	adds	r7, #80	; 0x50
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <MX_ADC1_Init+0x78>)
 8003e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003e7e:	4b17      	ldr	r3, [pc, #92]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003e8a:	4b14      	ldr	r3, [pc, #80]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <MX_ADC1_Init+0x74>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <MX_ADC1_Init+0x74>)
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <MX_ADC1_Init+0x74>)
 8003ea6:	f000 ffeb 	bl	8004e80 <HAL_ADC_Init>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003eb0:	f000 f9a8 	bl	8004204 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <MX_ADC1_Init+0x74>)
 8003ec6:	f001 fa73 	bl	80053b0 <HAL_ADC_ConfigChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003ed0:	f000 f998 	bl	8004204 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	200003d4 	.word	0x200003d4
 8003ee0:	40012400 	.word	0x40012400

08003ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ee8:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003eea:	4a13      	ldr	r2, [pc, #76]	; (8003f38 <MX_I2C1_Init+0x54>)
 8003eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003ef0:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <MX_I2C1_Init+0x58>)
 8003ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003efa:	4b0e      	ldr	r3, [pc, #56]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f0e:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f14:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f20:	4804      	ldr	r0, [pc, #16]	; (8003f34 <MX_I2C1_Init+0x50>)
 8003f22:	f001 ff35 	bl	8005d90 <HAL_I2C_Init>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f2c:	f000 f96a 	bl	8004204 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000404 	.word	0x20000404
 8003f38:	40005400 	.word	0x40005400
 8003f3c:	00061a80 	.word	0x00061a80

08003f40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f54:	463b      	mov	r3, r7
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f5c:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f66:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003f6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f74:	2209      	movs	r2, #9
 8003f76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003f84:	4813      	ldr	r0, [pc, #76]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003f86:	f003 fcd9 	bl	800793c <HAL_TIM_Base_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003f90:	f000 f938 	bl	8004204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003fa2:	f003 febf 	bl	8007d24 <HAL_TIM_ConfigClockSource>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003fac:	f000 f92a 	bl	8004204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003fb8:	463b      	mov	r3, r7
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4805      	ldr	r0, [pc, #20]	; (8003fd4 <MX_TIM2_Init+0x94>)
 8003fbe:	f004 f895 	bl	80080ec <HAL_TIMEx_MasterConfigSynchronization>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003fc8:	f000 f91c 	bl	8004204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003fcc:	bf00      	nop
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20000458 	.word	0x20000458

08003fd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003fde:	4a12      	ldr	r2, [pc, #72]	; (8004028 <MX_USART1_UART_Init+0x50>)
 8003fe0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fe8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ffc:	4b09      	ldr	r3, [pc, #36]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8003ffe:	220c      	movs	r2, #12
 8004000:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004002:	4b08      	ldr	r3, [pc, #32]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8004004:	2200      	movs	r2, #0
 8004006:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800400e:	4805      	ldr	r0, [pc, #20]	; (8004024 <MX_USART1_UART_Init+0x4c>)
 8004010:	f004 f8dc 	bl	80081cc <HAL_UART_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800401a:	f000 f8f3 	bl	8004204 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	200004a0 	.word	0x200004a0
 8004028:	40013800 	.word	0x40013800

0800402c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004032:	4a12      	ldr	r2, [pc, #72]	; (800407c <MX_USART2_UART_Init+0x50>)
 8004034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004036:	4b10      	ldr	r3, [pc, #64]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800403c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800403e:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004044:	4b0c      	ldr	r3, [pc, #48]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004050:	4b09      	ldr	r3, [pc, #36]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004052:	220c      	movs	r2, #12
 8004054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004062:	4805      	ldr	r0, [pc, #20]	; (8004078 <MX_USART2_UART_Init+0x4c>)
 8004064:	f004 f8b2 	bl	80081cc <HAL_UART_Init>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800406e:	f000 f8c9 	bl	8004204 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200004e8 	.word	0x200004e8
 800407c:	40004400 	.word	0x40004400

08004080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004086:	f107 0310 	add.w	r3, r7, #16
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004094:	4b2d      	ldr	r3, [pc, #180]	; (800414c <MX_GPIO_Init+0xcc>)
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	4a2c      	ldr	r2, [pc, #176]	; (800414c <MX_GPIO_Init+0xcc>)
 800409a:	f043 0310 	orr.w	r3, r3, #16
 800409e:	6193      	str	r3, [r2, #24]
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <MX_GPIO_Init+0xcc>)
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040ac:	4b27      	ldr	r3, [pc, #156]	; (800414c <MX_GPIO_Init+0xcc>)
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <MX_GPIO_Init+0xcc>)
 80040b2:	f043 0320 	orr.w	r3, r3, #32
 80040b6:	6193      	str	r3, [r2, #24]
 80040b8:	4b24      	ldr	r3, [pc, #144]	; (800414c <MX_GPIO_Init+0xcc>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c4:	4b21      	ldr	r3, [pc, #132]	; (800414c <MX_GPIO_Init+0xcc>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	4a20      	ldr	r2, [pc, #128]	; (800414c <MX_GPIO_Init+0xcc>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6193      	str	r3, [r2, #24]
 80040d0:	4b1e      	ldr	r3, [pc, #120]	; (800414c <MX_GPIO_Init+0xcc>)
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	607b      	str	r3, [r7, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <MX_GPIO_Init+0xcc>)
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <MX_GPIO_Init+0xcc>)
 80040e2:	f043 0308 	orr.w	r3, r3, #8
 80040e6:	6193      	str	r3, [r2, #24]
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <MX_GPIO_Init+0xcc>)
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80040f4:	2200      	movs	r2, #0
 80040f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80040fa:	4815      	ldr	r0, [pc, #84]	; (8004150 <MX_GPIO_Init+0xd0>)
 80040fc:	f001 fe30 	bl	8005d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VACCUM_PRESSURE_Pin|VACCUM_SUCKER_Pin, GPIO_PIN_RESET);
 8004100:	2200      	movs	r2, #0
 8004102:	2130      	movs	r1, #48	; 0x30
 8004104:	4813      	ldr	r0, [pc, #76]	; (8004154 <MX_GPIO_Init+0xd4>)
 8004106:	f001 fe2b 	bl	8005d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800410a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800410e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004110:	2301      	movs	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004114:	2300      	movs	r3, #0
 8004116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004118:	2302      	movs	r3, #2
 800411a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800411c:	f107 0310 	add.w	r3, r7, #16
 8004120:	4619      	mov	r1, r3
 8004122:	480b      	ldr	r0, [pc, #44]	; (8004150 <MX_GPIO_Init+0xd0>)
 8004124:	f001 fc98 	bl	8005a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : VACCUM_PRESSURE_Pin VACCUM_SUCKER_Pin */
  GPIO_InitStruct.Pin = VACCUM_PRESSURE_Pin|VACCUM_SUCKER_Pin;
 8004128:	2330      	movs	r3, #48	; 0x30
 800412a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800412c:	2301      	movs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004134:	2302      	movs	r3, #2
 8004136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004138:	f107 0310 	add.w	r3, r7, #16
 800413c:	4619      	mov	r1, r3
 800413e:	4805      	ldr	r0, [pc, #20]	; (8004154 <MX_GPIO_Init+0xd4>)
 8004140:	f001 fc8a 	bl	8005a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004144:	bf00      	nop
 8004146:	3720      	adds	r7, #32
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	40011000 	.word	0x40011000
 8004154:	40010800 	.word	0x40010800

08004158 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b4b0      	push	{r4, r5, r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]


	if( htim->Instance == TIM2 )
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d108      	bne.n	800417c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		currenttime++;
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	1c54      	adds	r4, r2, #1
 8004172:	f143 0500 	adc.w	r5, r3, #0
 8004176:	4b04      	ldr	r3, [pc, #16]	; (8004188 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8004178:	e9c3 4500 	strd	r4, r5, [r3]
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	bcb0      	pop	{r4, r5, r7}
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	200003c8 	.word	0x200003c8

0800418c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]

  if(huart == &huart2){
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a17      	ldr	r2, [pc, #92]	; (80041f4 <HAL_UART_RxCpltCallback+0x68>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d11b      	bne.n	80041d4 <HAL_UART_RxCpltCallback+0x48>
	  displayUartFlag =1;
 800419c:	4b16      	ldr	r3, [pc, #88]	; (80041f8 <HAL_UART_RxCpltCallback+0x6c>)
 800419e:	2201      	movs	r2, #1
 80041a0:	701a      	strb	r2, [r3, #0]

	if(rxBufferCount > MAX_MODEM_RX_BUFF){
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2bfa      	cmp	r3, #250	; 0xfa
 80041aa:	d902      	bls.n	80041b2 <HAL_UART_RxCpltCallback+0x26>
		rxBufferCount = 0;
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	801a      	strh	r2, [r3, #0]
	}
    modemRxBuff[rxBufferCount] = huart->Instance->DR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	b2c9      	uxtb	r1, r1
 80041c2:	4b0f      	ldr	r3, [pc, #60]	; (8004200 <HAL_UART_RxCpltCallback+0x74>)
 80041c4:	5499      	strb	r1, [r3, r2]
    rxBufferCount++;
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	3301      	adds	r3, #1
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041d2:	801a      	strh	r2, [r3, #0]



  }
    HAL_UART_Receive_IT(&huart2,&modemRxBuff[rxBufferCount],1);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_UART_RxCpltCallback+0x70>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	4b08      	ldr	r3, [pc, #32]	; (8004200 <HAL_UART_RxCpltCallback+0x74>)
 80041de:	4413      	add	r3, r2
 80041e0:	2201      	movs	r2, #1
 80041e2:	4619      	mov	r1, r3
 80041e4:	4803      	ldr	r0, [pc, #12]	; (80041f4 <HAL_UART_RxCpltCallback+0x68>)
 80041e6:	f004 f8c4 	bl	8008372 <HAL_UART_Receive_IT>
//    HAL_UART_Transmit(&huart1, &modemRxBuff, strlen(modemRxBuff), 1);

}
 80041ea:	bf00      	nop
 80041ec:	3708      	adds	r7, #8
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	200004e8 	.word	0x200004e8
 80041f8:	200003d0 	.word	0x200003d0
 80041fc:	20000530 	.word	0x20000530
 8004200:	20000200 	.word	0x20000200

08004204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004208:	b672      	cpsid	i
}
 800420a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800420c:	e7fe      	b.n	800420c <Error_Handler+0x8>

0800420e <PID>:
 *      Author: navee
 */
#include "pid.h"

float PID( pid_params *pid)
{
 800420e:	b590      	push	{r4, r7, lr}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
	float P = (pid->kp) * (pid->error) ;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fc fdaf 	bl	8000d84 <__aeabi_fmul>
 8004226:	4603      	mov	r3, r0
 8004228:	60fb      	str	r3, [r7, #12]

	  float i =pid->I* pid->ki * pid->dt * (pid->error);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4619      	mov	r1, r3
 8004234:	4610      	mov	r0, r2
 8004236:	f7fc fda5 	bl	8000d84 <__aeabi_fmul>
 800423a:	4603      	mov	r3, r0
 800423c:	461c      	mov	r4, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	f7fc fd56 	bl	8000cf8 <__aeabi_ul2f>
 800424c:	4603      	mov	r3, r0
 800424e:	4619      	mov	r1, r3
 8004250:	4620      	mov	r0, r4
 8004252:	f7fc fd97 	bl	8000d84 <__aeabi_fmul>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4619      	mov	r1, r3
 8004260:	4610      	mov	r0, r2
 8004262:	f7fc fd8f 	bl	8000d84 <__aeabi_fmul>
 8004266:	4603      	mov	r3, r0
 8004268:	60bb      	str	r3, [r7, #8]
//
//	  float D = kd * (previouserror);

	  pid->previouserror = pid->error;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	60da      	str	r2, [r3, #12]

	 return P+i ;
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7fc fc7d 	bl	8000b74 <__addsf3>
 800427a:	4603      	mov	r3, r0

}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}

08004284 <homePage_init>:
//uint8_t controlLogicFlag 	=	2	;
uint8_t timeOutFlag 		=	0	;
uint8_t timerAcceptFlag 	=	0	;

void homePage_init(uint64_t *currenttime, home_page_t *homePage_t, uint8_t *displayUartFlag, pid_params *pidparams,controller_params *controllerParam)
{
 8004284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004288:	f2ad 5d2c 	subw	sp, sp, #1324	; 0x52c
 800428c:	af10      	add	r7, sp, #64	; 0x40
 800428e:	f507 669d 	add.w	r6, r7, #1256	; 0x4e8
 8004292:	f2a6 46bc 	subw	r6, r6, #1212	; 0x4bc
 8004296:	6030      	str	r0, [r6, #0]
 8004298:	f507 609d 	add.w	r0, r7, #1256	; 0x4e8
 800429c:	f5a0 6098 	sub.w	r0, r0, #1216	; 0x4c0
 80042a0:	6001      	str	r1, [r0, #0]
 80042a2:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 80042a6:	f2a1 41c4 	subw	r1, r1, #1220	; 0x4c4
 80042aa:	600a      	str	r2, [r1, #0]
 80042ac:	f507 629d 	add.w	r2, r7, #1256	; 0x4e8
 80042b0:	f5a2 6299 	sub.w	r2, r2, #1224	; 0x4c8
 80042b4:	6013      	str	r3, [r2, #0]
	controllerParam->runStopButton = runStopFlag ;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <homePage_init+0xcc>)
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80042be:	f883 2020 	strb.w	r2, [r3, #32]

	profile_home_read(currenttime,homePage_t, displayUartFlag, &runStopFlag, &timeOutFlag, controllerParam);
 80042c2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042c6:	f2a3 42c4 	subw	r2, r3, #1220	; 0x4c4
 80042ca:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042ce:	f5a3 6198 	sub.w	r1, r3, #1216	; 0x4c0
 80042d2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042d6:	f2a3 40bc 	subw	r0, r3, #1212	; 0x4bc
 80042da:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <homePage_init+0xd0>)
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <homePage_init+0xcc>)
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	6809      	ldr	r1, [r1, #0]
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	f7fe f88c 	bl	8002408 <profile_home_read>



	HAL_ADC_PollForConversion(&hadc1,1000);
 80042f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80042f4:	4818      	ldr	r0, [pc, #96]	; (8004358 <homePage_init+0xd4>)
 80042f6:	f000 ff49 	bl	800518c <HAL_ADC_PollForConversion>

	pidparams->dt = ( *currenttime -lasttime );
 80042fa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80042fe:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004308:	4b14      	ldr	r3, [pc, #80]	; (800435c <homePage_init+0xd8>)
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	1a84      	subs	r4, r0, r2
 8004310:	eb61 0503 	sbc.w	r5, r1, r3
 8004314:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004318:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	e9c3 4506 	strd	r4, r5, [r3, #24]
	lasttime = *currenttime ;
 8004322:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004326:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004330:	490a      	ldr	r1, [pc, #40]	; (800435c <homePage_init+0xd8>)
 8004332:	e9c1 2300 	strd	r2, r3, [r1]


	  uint32_t adc[200];
	  memset(adc , 0 , sizeof(adc));
 8004336:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800433a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f005 fdda 	bl	8009efa <memset>

	  for(uint8_t i=0 ; i<sizeof(adc) / sizeof(adc[0]) ; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 800434c:	e019      	b.n	8004382 <homePage_init+0xfe>
 800434e:	bf00      	nop
 8004350:	20000540 	.word	0x20000540
 8004354:	20000541 	.word	0x20000541
 8004358:	200003d4 	.word	0x200003d4
 800435c:	20000538 	.word	0x20000538
	  {
		  adc[i] = HAL_ADC_GetValue(&hadc1) ;
 8004360:	f897 44e7 	ldrb.w	r4, [r7, #1255]	; 0x4e7
 8004364:	48bd      	ldr	r0, [pc, #756]	; (800465c <homePage_init+0x3d8>)
 8004366:	f001 f817 	bl	8005398 <HAL_ADC_GetValue>
 800436a:	4602      	mov	r2, r0
 800436c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004370:	f5a3 7349 	sub.w	r3, r3, #804	; 0x324
 8004374:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	  for(uint8_t i=0 ; i<sizeof(adc) / sizeof(adc[0]) ; i++)
 8004378:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 800437c:	3301      	adds	r3, #1
 800437e:	f887 34e7 	strb.w	r3, [r7, #1255]	; 0x4e7
 8004382:	f897 34e7 	ldrb.w	r3, [r7, #1255]	; 0x4e7
 8004386:	2bc7      	cmp	r3, #199	; 0xc7
 8004388:	d9ea      	bls.n	8004360 <homePage_init+0xdc>
	  }

	  controller_getCalculated_PID_value(&adc, homePage_t->mmhg, controllerParam, pidparams);
 800438a:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800438e:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	8819      	ldrh	r1, [r3, #0]
 8004396:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800439a:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 800439e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d7 2510 	ldr.w	r2, [r7, #1296]	; 0x510
 80043a8:	f7fd f8ee 	bl	8001588 <controller_getCalculated_PID_value>


	  uint8_t data[200];
	  memset(data,0,sizeof(data));
 80043ac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80043b0:	22c8      	movs	r2, #200	; 0xc8
 80043b2:	2100      	movs	r1, #0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f005 fda0 	bl	8009efa <memset>
	  sprintf(data,"min :%d, sec:%d, homePage_t->setMin %d, homePage_t->sec %d,\n",controllerParam->min,controllerParam->sec, homePage_t->setMin, homePage_t->setSec);
 80043ba:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80043be:	7c1b      	ldrb	r3, [r3, #16]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80043c8:	7c5b      	ldrb	r3, [r3, #17]
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461c      	mov	r4, r3
 80043ce:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043d2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	789b      	ldrb	r3, [r3, #2]
 80043da:	461a      	mov	r2, r3
 80043dc:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043e0:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	78db      	ldrb	r3, [r3, #3]
 80043e8:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	9200      	str	r2, [sp, #0]
 80043f0:	4623      	mov	r3, r4
 80043f2:	460a      	mov	r2, r1
 80043f4:	499a      	ldr	r1, [pc, #616]	; (8004660 <homePage_init+0x3dc>)
 80043f6:	f005 fd1d 	bl	8009e34 <siprintf>
	  sprintf(data, "LP Time : %.2f ; ADC : %.2f ; volt :%.2f, kPa : %.2f : mmhg : %.2f : error : %.2f, UT :%.2f, target :%d,  Min:%d , sec:%d \n ",	pidparams->dt, controllerParam->adc,controllerParam->volt,controllerParam->kPa , controllerParam->mmhg,pidparams->error,pidparams->ut,homePage_t->mmhg,homePage_t->setMin,homePage_t->setSec);
 80043fa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80043fe:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8004408:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc f80a 	bl	8000428 <__aeabi_f2d>
 8004414:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004418:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fc f802 	bl	8000428 <__aeabi_f2d>
 8004424:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004428:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fb fffa 	bl	8000428 <__aeabi_f2d>
 8004434:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004438:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fb fff2 	bl	8000428 <__aeabi_f2d>
 8004444:	e9c7 0100 	strd	r0, r1, [r7]
 8004448:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800444c:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4618      	mov	r0, r3
 8004456:	f7fb ffe7 	bl	8000428 <__aeabi_f2d>
 800445a:	4680      	mov	r8, r0
 800445c:	4689      	mov	r9, r1
 800445e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004462:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	4618      	mov	r0, r3
 800446c:	f7fb ffdc 	bl	8000428 <__aeabi_f2d>
 8004470:	4604      	mov	r4, r0
 8004472:	460d      	mov	r5, r1
 8004474:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004478:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	4619      	mov	r1, r3
 8004482:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004486:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	461a      	mov	r2, r3
 8004490:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004494:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	78db      	ldrb	r3, [r3, #3]
 800449c:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 80044a0:	930e      	str	r3, [sp, #56]	; 0x38
 80044a2:	920d      	str	r2, [sp, #52]	; 0x34
 80044a4:	910c      	str	r1, [sp, #48]	; 0x30
 80044a6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 80044aa:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80044ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80044b2:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80044b6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80044ba:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80044be:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80044c2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80044c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80044ca:	e9cd 3400 	strd	r3, r4, [sp]
 80044ce:	4652      	mov	r2, sl
 80044d0:	465b      	mov	r3, fp
 80044d2:	4964      	ldr	r1, [pc, #400]	; (8004664 <homePage_init+0x3e0>)
 80044d4:	f005 fcae 	bl	8009e34 <siprintf>
	  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 80044d8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fb fe37 	bl	8000150 <strlen>
 80044e2:	4603      	mov	r3, r0
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80044ea:	f04f 33ff 	mov.w	r3, #4294967295
 80044ee:	485e      	ldr	r0, [pc, #376]	; (8004668 <homePage_init+0x3e4>)
 80044f0:	f003 febc 	bl	800826c <HAL_UART_Transmit>

	  if((homePage_t->mmhg <= controllerParam->mmhg ) && (timerAcceptFlag == 0) && (runStopFlag == 1) )
 80044f4:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80044f8:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fc fbeb 	bl	8000cdc <__aeabi_i2f>
 8004506:	4602      	mov	r2, r0
 8004508:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4619      	mov	r1, r3
 8004510:	4610      	mov	r0, r2
 8004512:	f7fc fddf 	bl	80010d4 <__aeabi_fcmple>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d046      	beq.n	80045aa <homePage_init+0x326>
 800451c:	4b53      	ldr	r3, [pc, #332]	; (800466c <homePage_init+0x3e8>)
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d142      	bne.n	80045aa <homePage_init+0x326>
 8004524:	4b52      	ldr	r3, [pc, #328]	; (8004670 <homePage_init+0x3ec>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d13e      	bne.n	80045aa <homePage_init+0x326>
	  {
		  timerAcceptFlag 			= 	1	;
 800452c:	4b4f      	ldr	r3, [pc, #316]	; (800466c <homePage_init+0x3e8>)
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
		  controllerParam->sec 		=	0	;
 8004532:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004536:	2200      	movs	r2, #0
 8004538:	745a      	strb	r2, [r3, #17]
		  controllerParam->min		=	0	;
 800453a:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800453e:	2200      	movs	r2, #0
 8004540:	741a      	strb	r2, [r3, #16]
		  *currenttime				=	0	;
 8004542:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004546:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	e9c1 2300 	strd	r2, r3, [r1]
		  controllerParam->runTime	=	0	;
 8004558:	f8d7 1510 	ldr.w	r1, [r7, #1296]	; 0x510
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	f04f 0300 	mov.w	r3, #0
 8004564:	e9c1 2306 	strd	r2, r3, [r1, #24]
		  uint8_t data[200];
		  memset(data,0,sizeof(data));
 8004568:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800456c:	22c8      	movs	r2, #200	; 0xc8
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f005 fcc2 	bl	8009efa <memset>
		  sprintf(data,"mmhg is met %d\n",*currenttime);
 8004576:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 800457a:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004588:	493a      	ldr	r1, [pc, #232]	; (8004674 <homePage_init+0x3f0>)
 800458a:	f005 fc53 	bl	8009e34 <siprintf>
		  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 800458e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004592:	4618      	mov	r0, r3
 8004594:	f7fb fddc 	bl	8000150 <strlen>
 8004598:	4603      	mov	r3, r0
 800459a:	b29a      	uxth	r2, r3
 800459c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	4830      	ldr	r0, [pc, #192]	; (8004668 <homePage_init+0x3e4>)
 80045a6:	f003 fe61 	bl	800826c <HAL_UART_Transmit>
	  }

	  if( (homePage_t->setSec == controllerParam->sec ) && (homePage_t->setMin == controllerParam->min ) && (timerAcceptFlag == 1) )
 80045aa:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80045ae:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	78da      	ldrb	r2, [r3, #3]
 80045b6:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80045ba:	7c5b      	ldrb	r3, [r3, #17]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	429a      	cmp	r2, r3
 80045c0:	d15a      	bne.n	8004678 <homePage_init+0x3f4>
 80045c2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80045c6:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	789a      	ldrb	r2, [r3, #2]
 80045ce:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80045d2:	7c1b      	ldrb	r3, [r3, #16]
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d14e      	bne.n	8004678 <homePage_init+0x3f4>
 80045da:	4b24      	ldr	r3, [pc, #144]	; (800466c <homePage_init+0x3e8>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d14a      	bne.n	8004678 <homePage_init+0x3f4>
	  {
		  uint8_t data[200];
		  memset(data,0,sizeof(data));
 80045e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045e6:	22c8      	movs	r2, #200	; 0xc8
 80045e8:	2100      	movs	r1, #0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f005 fc85 	bl	8009efa <memset>
		  sprintf(data,"min :%d, sec:%d, homePage_t->setMin %d, homePage_t->sec %d,\n",controllerParam->min,controllerParam->sec, homePage_t->setMin, homePage_t->setSec);
 80045f0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80045f4:	7c1b      	ldrb	r3, [r3, #16]
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4619      	mov	r1, r3
 80045fa:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80045fe:	7c5b      	ldrb	r3, [r3, #17]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461c      	mov	r4, r3
 8004604:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004608:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	789b      	ldrb	r3, [r3, #2]
 8004610:	461a      	mov	r2, r3
 8004612:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004616:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78db      	ldrb	r3, [r3, #3]
 800461e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004622:	9301      	str	r3, [sp, #4]
 8004624:	9200      	str	r2, [sp, #0]
 8004626:	4623      	mov	r3, r4
 8004628:	460a      	mov	r2, r1
 800462a:	490d      	ldr	r1, [pc, #52]	; (8004660 <homePage_init+0x3dc>)
 800462c:	f005 fc02 	bl	8009e34 <siprintf>
		  HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 8004630:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004634:	4618      	mov	r0, r3
 8004636:	f7fb fd8b 	bl	8000150 <strlen>
 800463a:	4603      	mov	r3, r0
 800463c:	b29a      	uxth	r2, r3
 800463e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8004642:	f04f 33ff 	mov.w	r3, #4294967295
 8004646:	4808      	ldr	r0, [pc, #32]	; (8004668 <homePage_init+0x3e4>)
 8004648:	f003 fe10 	bl	800826c <HAL_UART_Transmit>
		  runStopFlag = 2 ;
 800464c:	4b08      	ldr	r3, [pc, #32]	; (8004670 <homePage_init+0x3ec>)
 800464e:	2202      	movs	r2, #2
 8004650:	701a      	strb	r2, [r3, #0]
		  timerAcceptFlag = 0 ;
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <homePage_init+0x3e8>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
 8004658:	e00e      	b.n	8004678 <homePage_init+0x3f4>
 800465a:	bf00      	nop
 800465c:	200003d4 	.word	0x200003d4
 8004660:	0800d930 	.word	0x0800d930
 8004664:	0800d970 	.word	0x0800d970
 8004668:	200004a0 	.word	0x200004a0
 800466c:	20000542 	.word	0x20000542
 8004670:	20000540 	.word	0x20000540
 8004674:	0800d9f0 	.word	0x0800d9f0
	  }

	  //CHECK TIME BEFORE GOING FOR PID CONTROL

//	  /* @breif this condition is for control pressure based on RUN & STOP Command */
	  pid_core_functionality(runStopFlag, (pidparams->ut), &controlLogicFlag,  controllerParam->mmhg, homePage_t->mmhg );
 8004678:	4b1a      	ldr	r3, [pc, #104]	; (80046e4 <homePage_init+0x460>)
 800467a:	781c      	ldrb	r4, [r3, #0]
 800467c:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004680:	f5a3 6399 	sub.w	r3, r3, #1224	; 0x4c8
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8004688:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800468c:	685e      	ldr	r6, [r3, #4]
 800468e:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8004692:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc fb1a 	bl	8000cd4 <__aeabi_ui2f>
 80046a0:	4603      	mov	r3, r0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	4633      	mov	r3, r6
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <homePage_init+0x464>)
 80046a8:	4629      	mov	r1, r5
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff fa44 	bl	8003b38 <pid_core_functionality>
//	  /* @Display function call start from here */
	  display_mmhgValueUpdateToDisplay(controllerParam->mmhg, runStopFlag);
 80046b0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4a0b      	ldr	r2, [pc, #44]	; (80046e4 <homePage_init+0x460>)
 80046b8:	7812      	ldrb	r2, [r2, #0]
 80046ba:	4611      	mov	r1, r2
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd f93f 	bl	8001940 <display_mmhgValueUpdateToDisplay>

	  display_runTimeUpdateToDisplay(controllerParam, *currenttime);
 80046c2:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 80046c6:	f2a3 43bc 	subw	r3, r3, #1212	; 0x4bc
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f8d7 0510 	ldr.w	r0, [r7, #1296]	; 0x510
 80046d4:	f7fd fa4a 	bl	8001b6c <display_runTimeUpdateToDisplay>



}
 80046d8:	bf00      	nop
 80046da:	f207 47ec 	addw	r7, r7, #1260	; 0x4ec
 80046de:	46bd      	mov	sp, r7
 80046e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	20000540 	.word	0x20000540
 80046e8:	20000002 	.word	0x20000002

080046ec <profile_load_init>:
uint8_t nextFlag = 9 ;//9 IS FOR INITIAL PRINT LOAD PROFILE VALUE INSTANTLY WHEN ENTER TO LOAD PAGE
uint8_t backFlag = 0 ;
uint8_t applyFlag = 0;

void profile_load_init(uint8_t *displayUartFlag, home_page_t *homePage_t)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	PL_direction_params_t PL_direction_params = {
 80046f6:	4a0c      	ldr	r2, [pc, #48]	; (8004728 <profile_load_init+0x3c>)
 80046f8:	f107 030c 	add.w	r3, r7, #12
 80046fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80046fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.Fst_R_ApplyBottun_addr	=	FST_R_APPLY_ADDR	,
			.Snd_R_ApplyBottun_addr	=	SND_R_APPLY_ADDR	,
			.Trd_R_ApplyBottun_addr	=	TRD_R_APPLY_ADDR
	};

	profile_load_update_values(&nextFlag, &backFlag, &applyFlag, homePage_t );
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	4a09      	ldr	r2, [pc, #36]	; (800472c <profile_load_init+0x40>)
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <profile_load_init+0x44>)
 8004708:	480a      	ldr	r0, [pc, #40]	; (8004734 <profile_load_init+0x48>)
 800470a:	f7fe fbd9 	bl	8002ec0 <profile_load_update_values>
	profile_load_read(displayUartFlag,&nextFlag,&backFlag, &applyFlag,  &PL_direction_params);
 800470e:	f107 030c 	add.w	r3, r7, #12
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <profile_load_init+0x40>)
 8004716:	4a06      	ldr	r2, [pc, #24]	; (8004730 <profile_load_init+0x44>)
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <profile_load_init+0x48>)
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe f966 	bl	80029ec <profile_load_read>

//		uint8_t data[30];
//		memset(data,0,sizeof(data));
//		sprintf(data," tr :%d\n",homePage_t->setSec);
//		HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
}
 8004720:	bf00      	nop
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	0800da00 	.word	0x0800da00
 800472c:	20000544 	.word	0x20000544
 8004730:	20000543 	.word	0x20000543
 8004734:	20000003 	.word	0x20000003

08004738 <writePage_init>:
//	write_page_details_update(profileParams->ee24Param->serialNum);

}

void writePage_init(uint8_t *displayUartFlag, home_page_t *homePage_t)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b09e      	sub	sp, #120	; 0x78
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	ProfileWrieParamAddrs writeProfileParams = {
 8004742:	4a42      	ldr	r2, [pc, #264]	; (800484c <writePage_init+0x114>)
 8004744:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004748:	ca07      	ldmia	r2, {r0, r1, r2}
 800474a:	c303      	stmia	r3!, {r0, r1}
 800474c:	801a      	strh	r2, [r3, #0]
			.secAddr		=	0x9006	,
			.warningAddr	=	0x9009

	};

	profile_write_serialNo_read(displayUartFlag,&targetSrNo, &serialNoRead_flag, &writeOnSerialNo_flag) ;
 800474e:	4b40      	ldr	r3, [pc, #256]	; (8004850 <writePage_init+0x118>)
 8004750:	4a40      	ldr	r2, [pc, #256]	; (8004854 <writePage_init+0x11c>)
 8004752:	4941      	ldr	r1, [pc, #260]	; (8004858 <writePage_init+0x120>)
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7fd fd19 	bl	800218c <profile_write_serialNo_read>
//	if(*displayUartFlag == 1)
//	{
		profile_write_serialNo_details_update(targetSrNo, &writeProfileParams, &serialNoRead_flag, displayUartFlag);
 800475a:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <writePage_init+0x120>)
 800475c:	7818      	ldrb	r0, [r3, #0]
 800475e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a3b      	ldr	r2, [pc, #236]	; (8004854 <writePage_init+0x11c>)
 8004766:	f7fd fb8b 	bl	8001e80 <profile_write_serialNo_details_update>
		if(serialNoRead_flag == 2)
 800476a:	4b3a      	ldr	r3, [pc, #232]	; (8004854 <writePage_init+0x11c>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d15c      	bne.n	800482c <writePage_init+0xf4>
		{
			uint8_t _arr[50] = { 0 } ;
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	f107 0310 	add.w	r3, r7, #16
 800477a:	222e      	movs	r2, #46	; 0x2e
 800477c:	2100      	movs	r1, #0
 800477e:	4618      	mov	r0, r3
 8004780:	f005 fbbb 	bl	8009efa <memset>
			//below code is for write Warning to display for eeprom
			_arr[0]		= 	0x5A 	;
 8004784:	235a      	movs	r3, #90	; 0x5a
 8004786:	733b      	strb	r3, [r7, #12]
			_arr[1]		= 	0xA5	;
 8004788:	23a5      	movs	r3, #165	; 0xa5
 800478a:	737b      	strb	r3, [r7, #13]
			_arr[2]		=	0x32	;
 800478c:	2332      	movs	r3, #50	; 0x32
 800478e:	73bb      	strb	r3, [r7, #14]
			_arr[3]		=	0x82	;
 8004790:	2382      	movs	r3, #130	; 0x82
 8004792:	73fb      	strb	r3, [r7, #15]
			_arr[5]		=	writeProfileParams.warningAddr>>0	;
 8004794:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8004798:	b2db      	uxtb	r3, r3
 800479a:	747b      	strb	r3, [r7, #17]
			_arr[4]		=	writeProfileParams.warningAddr>>8 	;
 800479c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	743b      	strb	r3, [r7, #16]
			uint8_t * warningStr ="                            ";
 80047a8:	4b2c      	ldr	r3, [pc, #176]	; (800485c <writePage_init+0x124>)
 80047aa:	66fb      	str	r3, [r7, #108]	; 0x6c
			strcat(_arr,warningStr);
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80047b2:	4618      	mov	r0, r3
 80047b4:	f005 fba9 	bl	8009f0a <strcat>
			HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fb fcc7 	bl	8000150 <strlen>
 80047c2:	4603      	mov	r3, r0
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	f107 010c 	add.w	r1, r7, #12
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	4824      	ldr	r0, [pc, #144]	; (8004860 <writePage_init+0x128>)
 80047d0:	f003 fd4c 	bl	800826c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, &_arr, strlen(_arr), HAL_MAX_DELAY);
 80047d4:	f107 030c 	add.w	r3, r7, #12
 80047d8:	4618      	mov	r0, r3
 80047da:	f7fb fcb9 	bl	8000150 <strlen>
 80047de:	4603      	mov	r3, r0
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	f107 010c 	add.w	r1, r7, #12
 80047e6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ea:	481d      	ldr	r0, [pc, #116]	; (8004860 <writePage_init+0x128>)
 80047ec:	f003 fd3e 	bl	800826c <HAL_UART_Transmit>
			uint8_t data[30];
			memset(data,0,sizeof(data));
 80047f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80047f4:	221e      	movs	r2, #30
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f005 fb7e 	bl	8009efa <memset>
			sprintf(data,"its in write page\n");
 80047fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004802:	4918      	ldr	r1, [pc, #96]	; (8004864 <writePage_init+0x12c>)
 8004804:	4618      	mov	r0, r3
 8004806:	f005 fb15 	bl	8009e34 <siprintf>
			HAL_UART_Transmit(&huart1, &data, strlen(data), HAL_MAX_DELAY);
 800480a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800480e:	4618      	mov	r0, r3
 8004810:	f7fb fc9e 	bl	8000150 <strlen>
 8004814:	4603      	mov	r3, r0
 8004816:	b29a      	uxth	r2, r3
 8004818:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800481c:	f04f 33ff 	mov.w	r3, #4294967295
 8004820:	4811      	ldr	r0, [pc, #68]	; (8004868 <writePage_init+0x130>)
 8004822:	f003 fd23 	bl	800826c <HAL_UART_Transmit>
			serialNoRead_flag = 3 ;
 8004826:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <writePage_init+0x11c>)
 8004828:	2203      	movs	r2, #3
 800482a:	701a      	strb	r2, [r3, #0]
		}
		profile_write_details_to_ee24(targetSrNo, &writeOnSerialNo_flag, homePage_t, &serialNoRead_flag,displayUartFlag, &writeProfileParams);
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <writePage_init+0x120>)
 800482e:	7818      	ldrb	r0, [r3, #0]
 8004830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	4b06      	ldr	r3, [pc, #24]	; (8004854 <writePage_init+0x11c>)
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	4904      	ldr	r1, [pc, #16]	; (8004850 <writePage_init+0x118>)
 8004840:	f7fd fc02 	bl	8002048 <profile_write_details_to_ee24>

//		*displayUartFlag = 0 ;
//	}


}
 8004844:	bf00      	nop
 8004846:	3770      	adds	r7, #112	; 0x70
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0800da40 	.word	0x0800da40
 8004850:	20000547 	.word	0x20000547
 8004854:	20000546 	.word	0x20000546
 8004858:	20000545 	.word	0x20000545
 800485c:	0800da0c 	.word	0x0800da0c
 8004860:	200004e8 	.word	0x200004e8
 8004864:	0800da2c 	.word	0x0800da2c
 8004868:	200004a0 	.word	0x200004a0

0800486c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_MspInit+0x5c>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	4a14      	ldr	r2, [pc, #80]	; (80048c8 <HAL_MspInit+0x5c>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6193      	str	r3, [r2, #24]
 800487e:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_MspInit+0x5c>)
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_MspInit+0x5c>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	4a0e      	ldr	r2, [pc, #56]	; (80048c8 <HAL_MspInit+0x5c>)
 8004890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004894:	61d3      	str	r3, [r2, #28]
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_MspInit+0x5c>)
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <HAL_MspInit+0x60>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	4a04      	ldr	r2, [pc, #16]	; (80048cc <HAL_MspInit+0x60>)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr
 80048c8:	40021000 	.word	0x40021000
 80048cc:	40010000 	.word	0x40010000

080048d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <HAL_ADC_MspInit+0x6c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d121      	bne.n	8004934 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048f0:	4b13      	ldr	r3, [pc, #76]	; (8004940 <HAL_ADC_MspInit+0x70>)
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4a12      	ldr	r2, [pc, #72]	; (8004940 <HAL_ADC_MspInit+0x70>)
 80048f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fa:	6193      	str	r3, [r2, #24]
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_ADC_MspInit+0x70>)
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <HAL_ADC_MspInit+0x70>)
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	4a0c      	ldr	r2, [pc, #48]	; (8004940 <HAL_ADC_MspInit+0x70>)
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	6193      	str	r3, [r2, #24]
 8004914:	4b0a      	ldr	r3, [pc, #40]	; (8004940 <HAL_ADC_MspInit+0x70>)
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC_PIN_Pin;
 8004920:	2301      	movs	r3, #1
 8004922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004924:	2303      	movs	r3, #3
 8004926:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC_PIN_GPIO_Port, &GPIO_InitStruct);
 8004928:	f107 0310 	add.w	r3, r7, #16
 800492c:	4619      	mov	r1, r3
 800492e:	4805      	ldr	r0, [pc, #20]	; (8004944 <HAL_ADC_MspInit+0x74>)
 8004930:	f001 f892 	bl	8005a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004934:	bf00      	nop
 8004936:	3720      	adds	r7, #32
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40012400 	.word	0x40012400
 8004940:	40021000 	.word	0x40021000
 8004944:	40010800 	.word	0x40010800

08004948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b088      	sub	sp, #32
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004950:	f107 0310 	add.w	r3, r7, #16
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	605a      	str	r2, [r3, #4]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a15      	ldr	r2, [pc, #84]	; (80049b8 <HAL_I2C_MspInit+0x70>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d123      	bne.n	80049b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <HAL_I2C_MspInit+0x74>)
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <HAL_I2C_MspInit+0x74>)
 800496e:	f043 0308 	orr.w	r3, r3, #8
 8004972:	6193      	str	r3, [r2, #24]
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <HAL_I2C_MspInit+0x74>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004980:	23c0      	movs	r3, #192	; 0xc0
 8004982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004984:	2312      	movs	r3, #18
 8004986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004988:	2303      	movs	r3, #3
 800498a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	4619      	mov	r1, r3
 8004992:	480b      	ldr	r0, [pc, #44]	; (80049c0 <HAL_I2C_MspInit+0x78>)
 8004994:	f001 f860 	bl	8005a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004998:	4b08      	ldr	r3, [pc, #32]	; (80049bc <HAL_I2C_MspInit+0x74>)
 800499a:	69db      	ldr	r3, [r3, #28]
 800499c:	4a07      	ldr	r2, [pc, #28]	; (80049bc <HAL_I2C_MspInit+0x74>)
 800499e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a2:	61d3      	str	r3, [r2, #28]
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_I2C_MspInit+0x74>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049b0:	bf00      	nop
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40005400 	.word	0x40005400
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40010c00 	.word	0x40010c00

080049c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d4:	d113      	bne.n	80049fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049d6:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <HAL_TIM_Base_MspInit+0x44>)
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <HAL_TIM_Base_MspInit+0x44>)
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	61d3      	str	r3, [r2, #28]
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <HAL_TIM_Base_MspInit+0x44>)
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2100      	movs	r1, #0
 80049f2:	201c      	movs	r0, #28
 80049f4:	f000 ff47 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80049f8:	201c      	movs	r0, #28
 80049fa:	f000 ff60 	bl	80058be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000

08004a0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a14:	f107 0318 	add.w	r3, r7, #24
 8004a18:	2200      	movs	r2, #0
 8004a1a:	601a      	str	r2, [r3, #0]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	609a      	str	r2, [r3, #8]
 8004a20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <HAL_UART_MspInit+0x108>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d132      	bne.n	8004a92 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a2c:	4b3a      	ldr	r3, [pc, #232]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	4a39      	ldr	r2, [pc, #228]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a36:	6193      	str	r3, [r2, #24]
 8004a38:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a44:	4b34      	ldr	r3, [pc, #208]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	4a33      	ldr	r2, [pc, #204]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	6193      	str	r3, [r2, #24]
 8004a50:	4b31      	ldr	r3, [pc, #196]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
 8004a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a62:	2302      	movs	r3, #2
 8004a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a66:	2303      	movs	r3, #3
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8004a6a:	f107 0318 	add.w	r3, r7, #24
 8004a6e:	4619      	mov	r1, r3
 8004a70:	482a      	ldr	r0, [pc, #168]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a72:	f000 fff1 	bl	8005a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8004a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a80:	2300      	movs	r3, #0
 8004a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8004a84:	f107 0318 	add.w	r3, r7, #24
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4824      	ldr	r0, [pc, #144]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004a8c:	f000 ffe4 	bl	8005a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004a90:	e03c      	b.n	8004b0c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a22      	ldr	r2, [pc, #136]	; (8004b20 <HAL_UART_MspInit+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d137      	bne.n	8004b0c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a9c:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004a9e:	69db      	ldr	r3, [r3, #28]
 8004aa0:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	61d3      	str	r3, [r2, #28]
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab4:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004aba:	f043 0304 	orr.w	r3, r3, #4
 8004abe:	6193      	str	r3, [r2, #24]
 8004ac0:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_UART_MspInit+0x10c>)
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	60bb      	str	r3, [r7, #8]
 8004aca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TX2_Pin;
 8004acc:	2304      	movs	r3, #4
 8004ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TX2_GPIO_Port, &GPIO_InitStruct);
 8004ad8:	f107 0318 	add.w	r3, r7, #24
 8004adc:	4619      	mov	r1, r3
 8004ade:	480f      	ldr	r0, [pc, #60]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004ae0:	f000 ffba 	bl	8005a58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX2_Pin;
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RX2_GPIO_Port, &GPIO_InitStruct);
 8004af0:	f107 0318 	add.w	r3, r7, #24
 8004af4:	4619      	mov	r1, r3
 8004af6:	4809      	ldr	r0, [pc, #36]	; (8004b1c <HAL_UART_MspInit+0x110>)
 8004af8:	f000 ffae 	bl	8005a58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004afc:	2200      	movs	r2, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	2026      	movs	r0, #38	; 0x26
 8004b02:	f000 fec0 	bl	8005886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b06:	2026      	movs	r0, #38	; 0x26
 8004b08:	f000 fed9 	bl	80058be <HAL_NVIC_EnableIRQ>
}
 8004b0c:	bf00      	nop
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40013800 	.word	0x40013800
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40010800 	.word	0x40010800
 8004b20:	40004400 	.word	0x40004400

08004b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b28:	e7fe      	b.n	8004b28 <NMI_Handler+0x4>

08004b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b2e:	e7fe      	b.n	8004b2e <HardFault_Handler+0x4>

08004b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b34:	e7fe      	b.n	8004b34 <MemManage_Handler+0x4>

08004b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b36:	b480      	push	{r7}
 8004b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b3a:	e7fe      	b.n	8004b3a <BusFault_Handler+0x4>

08004b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b40:	e7fe      	b.n	8004b40 <UsageFault_Handler+0x4>

08004b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b42:	b480      	push	{r7}
 8004b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bc80      	pop	{r7}
 8004b64:	4770      	bx	lr

08004b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b6a:	f000 f949 	bl	8004e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b6e:	bf00      	nop
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <TIM2_IRQHandler+0x10>)
 8004b7a:	f002 ffcb 	bl	8007b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000458 	.word	0x20000458

08004b88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <USART2_IRQHandler+0x10>)
 8004b8e:	f003 fc15 	bl	80083bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	200004e8 	.word	0x200004e8

08004b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return 1;
 8004ba0:	2301      	movs	r3, #1
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr

08004baa <_kill>:

int _kill(int pid, int sig)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004bb4:	f005 fa18 	bl	8009fe8 <__errno>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2216      	movs	r2, #22
 8004bbc:	601a      	str	r2, [r3, #0]
  return -1;
 8004bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <_exit>:

void _exit (int status)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff ffe7 	bl	8004baa <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bdc:	e7fe      	b.n	8004bdc <_exit+0x12>

08004bde <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b086      	sub	sp, #24
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e00a      	b.n	8004c06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004bf0:	f3af 8000 	nop.w
 8004bf4:	4601      	mov	r1, r0
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	60ba      	str	r2, [r7, #8]
 8004bfc:	b2ca      	uxtb	r2, r1
 8004bfe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	dbf0      	blt.n	8004bf0 <_read+0x12>
  }

  return len;
 8004c0e:	687b      	ldr	r3, [r7, #4]
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c24:	2300      	movs	r3, #0
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e009      	b.n	8004c3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	60ba      	str	r2, [r7, #8]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	dbf1      	blt.n	8004c2a <_write+0x12>
  }
  return len;
 8004c46:	687b      	ldr	r3, [r7, #4]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3718      	adds	r7, #24
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <_close>:

int _close(int file)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c76:	605a      	str	r2, [r3, #4]
  return 0;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <_isatty>:

int _isatty(int file)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c8c:	2301      	movs	r3, #1
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr

08004c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <_sbrk+0x5c>)
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <_sbrk+0x60>)
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <_sbrk+0x64>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_sbrk+0x64>)
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <_sbrk+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <_sbrk+0x64>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d207      	bcs.n	8004cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce0:	f005 f982 	bl	8009fe8 <__errno>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	e009      	b.n	8004d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <_sbrk+0x64>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <_sbrk+0x64>)
 8004d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20005000 	.word	0x20005000
 8004d10:	00000400 	.word	0x00000400
 8004d14:	20000548 	.word	0x20000548
 8004d18:	200006a0 	.word	0x200006a0

08004d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

    bl  SystemInit
 8004d28:	f7ff fff8 	bl	8004d1c <SystemInit>
/* Call the clock system initialization function.*/

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d2c:	480b      	ldr	r0, [pc, #44]	; (8004d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d2e:	490c      	ldr	r1, [pc, #48]	; (8004d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d30:	4a0c      	ldr	r2, [pc, #48]	; (8004d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d34:	e002      	b.n	8004d3c <LoopCopyDataInit>

08004d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d3a:	3304      	adds	r3, #4

08004d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d40:	d3f9      	bcc.n	8004d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d44:	4c09      	ldr	r4, [pc, #36]	; (8004d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d48:	e001      	b.n	8004d4e <LoopFillZerobss>

08004d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d4c:	3204      	adds	r2, #4

08004d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d50:	d3fb      	bcc.n	8004d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d52:	f005 f94f 	bl	8009ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d56:	f7fe ff7f 	bl	8003c58 <main>
  bx lr
 8004d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8004d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d60:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004d64:	0800dec8 	.word	0x0800dec8
  ldr r2, =_sbss
 8004d68:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004d6c:	2000069c 	.word	0x2000069c

08004d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004d70:	e7fe      	b.n	8004d70 <ADC1_2_IRQHandler>
	...

08004d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004d78:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_Init+0x28>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a07      	ldr	r2, [pc, #28]	; (8004d9c <HAL_Init+0x28>)
 8004d7e:	f043 0310 	orr.w	r3, r3, #16
 8004d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d84:	2003      	movs	r0, #3
 8004d86:	f000 fd73 	bl	8005870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004d8a:	200f      	movs	r0, #15
 8004d8c:	f000 f808 	bl	8004da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d90:	f7ff fd6c 	bl	800486c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40022000 	.word	0x40022000

08004da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004da8:	4b12      	ldr	r3, [pc, #72]	; (8004df4 <HAL_InitTick+0x54>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <HAL_InitTick+0x58>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	4619      	mov	r1, r3
 8004db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fd8b 	bl	80058da <HAL_SYSTICK_Config>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e00e      	b.n	8004dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b0f      	cmp	r3, #15
 8004dd2:	d80a      	bhi.n	8004dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ddc:	f000 fd53 	bl	8005886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004de0:	4a06      	ldr	r2, [pc, #24]	; (8004dfc <HAL_InitTick+0x5c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20000004 	.word	0x20000004
 8004df8:	2000000c 	.word	0x2000000c
 8004dfc:	20000008 	.word	0x20000008

08004e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_IncTick+0x1c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_IncTick+0x20>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4413      	add	r3, r2
 8004e10:	4a03      	ldr	r2, [pc, #12]	; (8004e20 <HAL_IncTick+0x20>)
 8004e12:	6013      	str	r3, [r2, #0]
}
 8004e14:	bf00      	nop
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	2000054c 	.word	0x2000054c

08004e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return uwTick;
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <HAL_GetTick+0x10>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	2000054c 	.word	0x2000054c

08004e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e40:	f7ff fff0 	bl	8004e24 <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d005      	beq.n	8004e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_Delay+0x44>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e5e:	bf00      	nop
 8004e60:	f7ff ffe0 	bl	8004e24 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d8f7      	bhi.n	8004e60 <HAL_Delay+0x28>
  {
  }
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	2000000c 	.word	0x2000000c

08004e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0be      	b.n	8005020 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d109      	bne.n	8004ec4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7ff fd06 	bl	80048d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fbc5 	bl	8005654 <ADC_ConversionStop_Disable>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 8099 	bne.w	800500e <HAL_ADC_Init+0x18e>
 8004edc:	7dfb      	ldrb	r3, [r7, #23]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f040 8095 	bne.w	800500e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004eec:	f023 0302 	bic.w	r3, r3, #2
 8004ef0:	f043 0202 	orr.w	r2, r3, #2
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7b1b      	ldrb	r3, [r3, #12]
 8004f06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004f08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f18:	d003      	beq.n	8004f22 <HAL_ADC_Init+0xa2>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <HAL_ADC_Init+0xa8>
 8004f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f26:	e000      	b.n	8004f2a <HAL_ADC_Init+0xaa>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7d1b      	ldrb	r3, [r3, #20]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d119      	bne.n	8004f6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	7b1b      	ldrb	r3, [r3, #12]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	035a      	lsls	r2, r3, #13
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e00b      	b.n	8004f6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	f043 0201 	orr.w	r2, r3, #1
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	4b28      	ldr	r3, [pc, #160]	; (8005028 <HAL_ADC_Init+0x1a8>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	430b      	orrs	r3, r1
 8004f92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f9c:	d003      	beq.n	8004fa6 <HAL_ADC_Init+0x126>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d104      	bne.n	8004fb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	051b      	lsls	r3, r3, #20
 8004fae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	4b18      	ldr	r3, [pc, #96]	; (800502c <HAL_ADC_Init+0x1ac>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d10b      	bne.n	8004fec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	f043 0201 	orr.w	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004fea:	e018      	b.n	800501e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	f023 0312 	bic.w	r3, r3, #18
 8004ff4:	f043 0210 	orr.w	r2, r3, #16
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	f043 0201 	orr.w	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800500c:	e007      	b.n	800501e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	f043 0210 	orr.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800501e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	ffe1f7fd 	.word	0xffe1f7fd
 800502c:	ff1f0efe 	.word	0xff1f0efe

08005030 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005038:	2300      	movs	r3, #0
 800503a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_ADC_Start+0x1a>
 8005046:	2302      	movs	r3, #2
 8005048:	e098      	b.n	800517c <HAL_ADC_Start+0x14c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 faa4 	bl	80055a0 <ADC_Enable>
 8005058:	4603      	mov	r3, r0
 800505a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800505c:	7bfb      	ldrb	r3, [r7, #15]
 800505e:	2b00      	cmp	r3, #0
 8005060:	f040 8087 	bne.w	8005172 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a41      	ldr	r2, [pc, #260]	; (8005184 <HAL_ADC_Start+0x154>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d105      	bne.n	800508e <HAL_ADC_Start+0x5e>
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <HAL_ADC_Start+0x158>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d115      	bne.n	80050ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d026      	beq.n	80050f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80050b8:	e01d      	b.n	80050f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_ADC_Start+0x158>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_ADC_Start+0xaa>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2b      	ldr	r2, [pc, #172]	; (8005184 <HAL_ADC_Start+0x154>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d10d      	bne.n	80050f6 <HAL_ADC_Start+0xc6>
 80050da:	4b2b      	ldr	r3, [pc, #172]	; (8005188 <HAL_ADC_Start+0x158>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80050ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d006      	beq.n	8005110 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	f023 0206 	bic.w	r2, r3, #6
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	62da      	str	r2, [r3, #44]	; 0x2c
 800510e:	e002      	b.n	8005116 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f06f 0202 	mvn.w	r2, #2
 8005126:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005132:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005136:	d113      	bne.n	8005160 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800513c:	4a11      	ldr	r2, [pc, #68]	; (8005184 <HAL_ADC_Start+0x154>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d105      	bne.n	800514e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8005142:	4b11      	ldr	r3, [pc, #68]	; (8005188 <HAL_ADC_Start+0x158>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800515c:	609a      	str	r2, [r3, #8]
 800515e:	e00c      	b.n	800517a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800516e:	609a      	str	r2, [r3, #8]
 8005170:	e003      	b.n	800517a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40012800 	.word	0x40012800
 8005188:	40012400 	.word	0x40012400

0800518c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80051a2:	f7ff fe3f 	bl	8004e24 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00b      	beq.n	80051ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e0d3      	b.n	8005376 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d131      	bne.n	8005240 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d12a      	bne.n	8005240 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80051ea:	e021      	b.n	8005230 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d01d      	beq.n	8005230 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d007      	beq.n	800520a <HAL_ADC_PollForConversion+0x7e>
 80051fa:	f7ff fe13 	bl	8004e24 <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d212      	bcs.n	8005230 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10b      	bne.n	8005230 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	f043 0204 	orr.w	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0a2      	b.n	8005376 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d0d6      	beq.n	80051ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800523e:	e070      	b.n	8005322 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005240:	4b4f      	ldr	r3, [pc, #316]	; (8005380 <HAL_ADC_PollForConversion+0x1f4>)
 8005242:	681c      	ldr	r4, [r3, #0]
 8005244:	2002      	movs	r0, #2
 8005246:	f002 fac3 	bl	80077d0 <HAL_RCCEx_GetPeriphCLKFreq>
 800524a:	4603      	mov	r3, r0
 800524c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6919      	ldr	r1, [r3, #16]
 8005256:	4b4b      	ldr	r3, [pc, #300]	; (8005384 <HAL_ADC_PollForConversion+0x1f8>)
 8005258:	400b      	ands	r3, r1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d118      	bne.n	8005290 <HAL_ADC_PollForConversion+0x104>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68d9      	ldr	r1, [r3, #12]
 8005264:	4b48      	ldr	r3, [pc, #288]	; (8005388 <HAL_ADC_PollForConversion+0x1fc>)
 8005266:	400b      	ands	r3, r1
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <HAL_ADC_PollForConversion+0x104>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	4b46      	ldr	r3, [pc, #280]	; (800538c <HAL_ADC_PollForConversion+0x200>)
 8005274:	400b      	ands	r3, r1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d108      	bne.n	800528c <HAL_ADC_PollForConversion+0x100>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68d9      	ldr	r1, [r3, #12]
 8005280:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_ADC_PollForConversion+0x204>)
 8005282:	400b      	ands	r3, r1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_ADC_PollForConversion+0x100>
 8005288:	2314      	movs	r3, #20
 800528a:	e020      	b.n	80052ce <HAL_ADC_PollForConversion+0x142>
 800528c:	2329      	movs	r3, #41	; 0x29
 800528e:	e01e      	b.n	80052ce <HAL_ADC_PollForConversion+0x142>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6919      	ldr	r1, [r3, #16]
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_ADC_PollForConversion+0x200>)
 8005298:	400b      	ands	r3, r1
 800529a:	2b00      	cmp	r3, #0
 800529c:	d106      	bne.n	80052ac <HAL_ADC_PollForConversion+0x120>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68d9      	ldr	r1, [r3, #12]
 80052a4:	4b3a      	ldr	r3, [pc, #232]	; (8005390 <HAL_ADC_PollForConversion+0x204>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00d      	beq.n	80052c8 <HAL_ADC_PollForConversion+0x13c>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	4b38      	ldr	r3, [pc, #224]	; (8005394 <HAL_ADC_PollForConversion+0x208>)
 80052b4:	400b      	ands	r3, r1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d108      	bne.n	80052cc <HAL_ADC_PollForConversion+0x140>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68d9      	ldr	r1, [r3, #12]
 80052c0:	4b34      	ldr	r3, [pc, #208]	; (8005394 <HAL_ADC_PollForConversion+0x208>)
 80052c2:	400b      	ands	r3, r1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_PollForConversion+0x140>
 80052c8:	2354      	movs	r3, #84	; 0x54
 80052ca:	e000      	b.n	80052ce <HAL_ADC_PollForConversion+0x142>
 80052cc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80052d4:	e021      	b.n	800531a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d01a      	beq.n	8005314 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_ADC_PollForConversion+0x168>
 80052e4:	f7ff fd9e 	bl	8004e24 <HAL_GetTick>
 80052e8:	4602      	mov	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d20f      	bcs.n	8005314 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d90b      	bls.n	8005314 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005300:	f043 0204 	orr.w	r2, r3, #4
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e030      	b.n	8005376 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d8d9      	bhi.n	80052d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f06f 0212 	mvn.w	r2, #18
 800532a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005342:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8005346:	d115      	bne.n	8005374 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800534c:	2b00      	cmp	r3, #0
 800534e:	d111      	bne.n	8005374 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	bf00      	nop
 8005380:	20000004 	.word	0x20000004
 8005384:	24924924 	.word	0x24924924
 8005388:	00924924 	.word	0x00924924
 800538c:	12492492 	.word	0x12492492
 8005390:	00492492 	.word	0x00492492
 8005394:	00249249 	.word	0x00249249

08005398 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x20>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e0dc      	b.n	800558a <HAL_ADC_ConfigChannel+0x1da>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d81c      	bhi.n	800541a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	3b05      	subs	r3, #5
 80053f2:	221f      	movs	r2, #31
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	4019      	ands	r1, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	3b05      	subs	r3, #5
 800540c:	fa00 f203 	lsl.w	r2, r0, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
 8005418:	e03c      	b.n	8005494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d81c      	bhi.n	800545c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3b23      	subs	r3, #35	; 0x23
 8005434:	221f      	movs	r2, #31
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43db      	mvns	r3, r3
 800543c:	4019      	ands	r1, r3
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	3b23      	subs	r3, #35	; 0x23
 800544e:	fa00 f203 	lsl.w	r2, r0, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
 800545a:	e01b      	b.n	8005494 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	3b41      	subs	r3, #65	; 0x41
 800546e:	221f      	movs	r2, #31
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	43db      	mvns	r3, r3
 8005476:	4019      	ands	r1, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	3b41      	subs	r3, #65	; 0x41
 8005488:	fa00 f203 	lsl.w	r2, r0, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b09      	cmp	r3, #9
 800549a:	d91c      	bls.n	80054d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68d9      	ldr	r1, [r3, #12]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4613      	mov	r3, r2
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	4413      	add	r3, r2
 80054ac:	3b1e      	subs	r3, #30
 80054ae:	2207      	movs	r2, #7
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	4019      	ands	r1, r3
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	6898      	ldr	r0, [r3, #8]
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	3b1e      	subs	r3, #30
 80054c8:	fa00 f203 	lsl.w	r2, r0, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]
 80054d4:	e019      	b.n	800550a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6919      	ldr	r1, [r3, #16]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	2207      	movs	r2, #7
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	43db      	mvns	r3, r3
 80054ee:	4019      	ands	r1, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6898      	ldr	r0, [r3, #8]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	4413      	add	r3, r2
 80054fe:	fa00 f203 	lsl.w	r2, r0, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b10      	cmp	r3, #16
 8005510:	d003      	beq.n	800551a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005516:	2b11      	cmp	r3, #17
 8005518:	d132      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_ADC_ConfigChannel+0x1e4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d125      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d126      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005540:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b10      	cmp	r3, #16
 8005548:	d11a      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800554a:	4b13      	ldr	r3, [pc, #76]	; (8005598 <HAL_ADC_ConfigChannel+0x1e8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a13      	ldr	r2, [pc, #76]	; (800559c <HAL_ADC_ConfigChannel+0x1ec>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	0c9a      	lsrs	r2, r3, #18
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005560:	e002      	b.n	8005568 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	3b01      	subs	r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1f9      	bne.n	8005562 <HAL_ADC_ConfigChannel+0x1b2>
 800556e:	e007      	b.n	8005580 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	f043 0220 	orr.w	r2, r3, #32
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	40012400 	.word	0x40012400
 8005598:	20000004 	.word	0x20000004
 800559c:	431bde83 	.word	0x431bde83

080055a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d040      	beq.n	8005640 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0201 	orr.w	r2, r2, #1
 80055cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <ADC_Enable+0xac>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <ADC_Enable+0xb0>)
 80055d4:	fba2 2303 	umull	r2, r3, r2, r3
 80055d8:	0c9b      	lsrs	r3, r3, #18
 80055da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055dc:	e002      	b.n	80055e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f9      	bne.n	80055de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055ea:	f7ff fc1b 	bl	8004e24 <HAL_GetTick>
 80055ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80055f0:	e01f      	b.n	8005632 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80055f2:	f7ff fc17 	bl	8004e24 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d918      	bls.n	8005632 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d011      	beq.n	8005632 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	f043 0210 	orr.w	r2, r3, #16
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	f043 0201 	orr.w	r2, r3, #1
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e007      	b.n	8005642 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b01      	cmp	r3, #1
 800563e:	d1d8      	bne.n	80055f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000004 	.word	0x20000004
 8005650:	431bde83 	.word	0x431bde83

08005654 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b01      	cmp	r3, #1
 800566c:	d12e      	bne.n	80056cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0201 	bic.w	r2, r2, #1
 800567c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800567e:	f7ff fbd1 	bl	8004e24 <HAL_GetTick>
 8005682:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005684:	e01b      	b.n	80056be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005686:	f7ff fbcd 	bl	8004e24 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d914      	bls.n	80056be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d10d      	bne.n	80056be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	f043 0210 	orr.w	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b2:	f043 0201 	orr.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e007      	b.n	80056ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d0dc      	beq.n	8005686 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056e8:	4b0c      	ldr	r3, [pc, #48]	; (800571c <__NVIC_SetPriorityGrouping+0x44>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056f4:	4013      	ands	r3, r2
 80056f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800570a:	4a04      	ldr	r2, [pc, #16]	; (800571c <__NVIC_SetPriorityGrouping+0x44>)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	60d3      	str	r3, [r2, #12]
}
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <__NVIC_GetPriorityGrouping+0x18>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f003 0307 	and.w	r3, r3, #7
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	e000ed00 	.word	0xe000ed00

0800573c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	4603      	mov	r3, r0
 8005744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	db0b      	blt.n	8005766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	f003 021f 	and.w	r2, r3, #31
 8005754:	4906      	ldr	r1, [pc, #24]	; (8005770 <__NVIC_EnableIRQ+0x34>)
 8005756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	2001      	movs	r0, #1
 800575e:	fa00 f202 	lsl.w	r2, r0, r2
 8005762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr
 8005770:	e000e100 	.word	0xe000e100

08005774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005784:	2b00      	cmp	r3, #0
 8005786:	db0a      	blt.n	800579e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	b2da      	uxtb	r2, r3
 800578c:	490c      	ldr	r1, [pc, #48]	; (80057c0 <__NVIC_SetPriority+0x4c>)
 800578e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005792:	0112      	lsls	r2, r2, #4
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	440b      	add	r3, r1
 8005798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800579c:	e00a      	b.n	80057b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	4908      	ldr	r1, [pc, #32]	; (80057c4 <__NVIC_SetPriority+0x50>)
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	3b04      	subs	r3, #4
 80057ac:	0112      	lsls	r2, r2, #4
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	440b      	add	r3, r1
 80057b2:	761a      	strb	r2, [r3, #24]
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bc80      	pop	{r7}
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	e000e100 	.word	0xe000e100
 80057c4:	e000ed00 	.word	0xe000ed00

080057c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f003 0307 	and.w	r3, r3, #7
 80057da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f1c3 0307 	rsb	r3, r3, #7
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	bf28      	it	cs
 80057e6:	2304      	movcs	r3, #4
 80057e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3304      	adds	r3, #4
 80057ee:	2b06      	cmp	r3, #6
 80057f0:	d902      	bls.n	80057f8 <NVIC_EncodePriority+0x30>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	3b03      	subs	r3, #3
 80057f6:	e000      	b.n	80057fa <NVIC_EncodePriority+0x32>
 80057f8:	2300      	movs	r3, #0
 80057fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	401a      	ands	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005810:	f04f 31ff 	mov.w	r1, #4294967295
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	fa01 f303 	lsl.w	r3, r1, r3
 800581a:	43d9      	mvns	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005820:	4313      	orrs	r3, r2
         );
}
 8005822:	4618      	mov	r0, r3
 8005824:	3724      	adds	r7, #36	; 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800583c:	d301      	bcc.n	8005842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800583e:	2301      	movs	r3, #1
 8005840:	e00f      	b.n	8005862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005842:	4a0a      	ldr	r2, [pc, #40]	; (800586c <SysTick_Config+0x40>)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3b01      	subs	r3, #1
 8005848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800584a:	210f      	movs	r1, #15
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	f7ff ff90 	bl	8005774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <SysTick_Config+0x40>)
 8005856:	2200      	movs	r2, #0
 8005858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800585a:	4b04      	ldr	r3, [pc, #16]	; (800586c <SysTick_Config+0x40>)
 800585c:	2207      	movs	r2, #7
 800585e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	e000e010 	.word	0xe000e010

08005870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ff2d 	bl	80056d8 <__NVIC_SetPriorityGrouping>
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005886:	b580      	push	{r7, lr}
 8005888:	b086      	sub	sp, #24
 800588a:	af00      	add	r7, sp, #0
 800588c:	4603      	mov	r3, r0
 800588e:	60b9      	str	r1, [r7, #8]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005898:	f7ff ff42 	bl	8005720 <__NVIC_GetPriorityGrouping>
 800589c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	6978      	ldr	r0, [r7, #20]
 80058a4:	f7ff ff90 	bl	80057c8 <NVIC_EncodePriority>
 80058a8:	4602      	mov	r2, r0
 80058aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff5f 	bl	8005774 <__NVIC_SetPriority>
}
 80058b6:	bf00      	nop
 80058b8:	3718      	adds	r7, #24
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff35 	bl	800573c <__NVIC_EnableIRQ>
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff ffa2 	bl	800582c <SysTick_Config>
 80058e8:	4603      	mov	r3, r0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d008      	beq.n	800591c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2204      	movs	r2, #4
 800590e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e020      	b.n	800595e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 020e 	bic.w	r2, r2, #14
 800592a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0201 	bic.w	r2, r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	2101      	movs	r1, #1
 8005946:	fa01 f202 	lsl.w	r2, r1, r2
 800594a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800595c:	7bfb      	ldrb	r3, [r7, #15]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr

08005968 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d005      	beq.n	800598c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2204      	movs	r2, #4
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	73fb      	strb	r3, [r7, #15]
 800598a:	e051      	b.n	8005a30 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 020e 	bic.w	r2, r2, #14
 800599a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a22      	ldr	r2, [pc, #136]	; (8005a3c <HAL_DMA_Abort_IT+0xd4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d029      	beq.n	8005a0a <HAL_DMA_Abort_IT+0xa2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <HAL_DMA_Abort_IT+0xd8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_DMA_Abort_IT+0x9e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <HAL_DMA_Abort_IT+0xdc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01a      	beq.n	8005a00 <HAL_DMA_Abort_IT+0x98>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <HAL_DMA_Abort_IT+0xe0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d012      	beq.n	80059fa <HAL_DMA_Abort_IT+0x92>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1c      	ldr	r2, [pc, #112]	; (8005a4c <HAL_DMA_Abort_IT+0xe4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00a      	beq.n	80059f4 <HAL_DMA_Abort_IT+0x8c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	; (8005a50 <HAL_DMA_Abort_IT+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d102      	bne.n	80059ee <HAL_DMA_Abort_IT+0x86>
 80059e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80059ec:	e00e      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 80059ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059f2:	e00b      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 80059f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80059f8:	e008      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 80059fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059fe:	e005      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 8005a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a04:	e002      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 8005a06:	2310      	movs	r3, #16
 8005a08:	e000      	b.n	8005a0c <HAL_DMA_Abort_IT+0xa4>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	4a11      	ldr	r2, [pc, #68]	; (8005a54 <HAL_DMA_Abort_IT+0xec>)
 8005a0e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
    } 
  }
  return status;
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40020008 	.word	0x40020008
 8005a40:	4002001c 	.word	0x4002001c
 8005a44:	40020030 	.word	0x40020030
 8005a48:	40020044 	.word	0x40020044
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	4002006c 	.word	0x4002006c
 8005a54:	40020000 	.word	0x40020000

08005a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b08b      	sub	sp, #44	; 0x2c
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a66:	2300      	movs	r3, #0
 8005a68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a6a:	e169      	b.n	8005d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	fa02 f303 	lsl.w	r3, r2, r3
 8005a74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	f040 8158 	bne.w	8005d3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4a9a      	ldr	r2, [pc, #616]	; (8005cf8 <HAL_GPIO_Init+0x2a0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d05e      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005a94:	4a98      	ldr	r2, [pc, #608]	; (8005cf8 <HAL_GPIO_Init+0x2a0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d875      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005a9a:	4a98      	ldr	r2, [pc, #608]	; (8005cfc <HAL_GPIO_Init+0x2a4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d058      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005aa0:	4a96      	ldr	r2, [pc, #600]	; (8005cfc <HAL_GPIO_Init+0x2a4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d86f      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005aa6:	4a96      	ldr	r2, [pc, #600]	; (8005d00 <HAL_GPIO_Init+0x2a8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d052      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005aac:	4a94      	ldr	r2, [pc, #592]	; (8005d00 <HAL_GPIO_Init+0x2a8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d869      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005ab2:	4a94      	ldr	r2, [pc, #592]	; (8005d04 <HAL_GPIO_Init+0x2ac>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d04c      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005ab8:	4a92      	ldr	r2, [pc, #584]	; (8005d04 <HAL_GPIO_Init+0x2ac>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d863      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005abe:	4a92      	ldr	r2, [pc, #584]	; (8005d08 <HAL_GPIO_Init+0x2b0>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d046      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
 8005ac4:	4a90      	ldr	r2, [pc, #576]	; (8005d08 <HAL_GPIO_Init+0x2b0>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d85d      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005aca:	2b12      	cmp	r3, #18
 8005acc:	d82a      	bhi.n	8005b24 <HAL_GPIO_Init+0xcc>
 8005ace:	2b12      	cmp	r3, #18
 8005ad0:	d859      	bhi.n	8005b86 <HAL_GPIO_Init+0x12e>
 8005ad2:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <HAL_GPIO_Init+0x80>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005b53 	.word	0x08005b53
 8005adc:	08005b2d 	.word	0x08005b2d
 8005ae0:	08005b3f 	.word	0x08005b3f
 8005ae4:	08005b81 	.word	0x08005b81
 8005ae8:	08005b87 	.word	0x08005b87
 8005aec:	08005b87 	.word	0x08005b87
 8005af0:	08005b87 	.word	0x08005b87
 8005af4:	08005b87 	.word	0x08005b87
 8005af8:	08005b87 	.word	0x08005b87
 8005afc:	08005b87 	.word	0x08005b87
 8005b00:	08005b87 	.word	0x08005b87
 8005b04:	08005b87 	.word	0x08005b87
 8005b08:	08005b87 	.word	0x08005b87
 8005b0c:	08005b87 	.word	0x08005b87
 8005b10:	08005b87 	.word	0x08005b87
 8005b14:	08005b87 	.word	0x08005b87
 8005b18:	08005b87 	.word	0x08005b87
 8005b1c:	08005b35 	.word	0x08005b35
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	4a79      	ldr	r2, [pc, #484]	; (8005d0c <HAL_GPIO_Init+0x2b4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b2a:	e02c      	b.n	8005b86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	623b      	str	r3, [r7, #32]
          break;
 8005b32:	e029      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	623b      	str	r3, [r7, #32]
          break;
 8005b3c:	e024      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	3308      	adds	r3, #8
 8005b44:	623b      	str	r3, [r7, #32]
          break;
 8005b46:	e01f      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	330c      	adds	r3, #12
 8005b4e:	623b      	str	r3, [r7, #32]
          break;
 8005b50:	e01a      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	623b      	str	r3, [r7, #32]
          break;
 8005b5e:	e013      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d105      	bne.n	8005b74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b68:	2308      	movs	r3, #8
 8005b6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	611a      	str	r2, [r3, #16]
          break;
 8005b72:	e009      	b.n	8005b88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b74:	2308      	movs	r3, #8
 8005b76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	615a      	str	r2, [r3, #20]
          break;
 8005b7e:	e003      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005b80:	2300      	movs	r3, #0
 8005b82:	623b      	str	r3, [r7, #32]
          break;
 8005b84:	e000      	b.n	8005b88 <HAL_GPIO_Init+0x130>
          break;
 8005b86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	2bff      	cmp	r3, #255	; 0xff
 8005b8c:	d801      	bhi.n	8005b92 <HAL_GPIO_Init+0x13a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	e001      	b.n	8005b96 <HAL_GPIO_Init+0x13e>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2bff      	cmp	r3, #255	; 0xff
 8005b9c:	d802      	bhi.n	8005ba4 <HAL_GPIO_Init+0x14c>
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	e002      	b.n	8005baa <HAL_GPIO_Init+0x152>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	3b08      	subs	r3, #8
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	210f      	movs	r1, #15
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	43db      	mvns	r3, r3
 8005bba:	401a      	ands	r2, r3
 8005bbc:	6a39      	ldr	r1, [r7, #32]
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80b1 	beq.w	8005d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005bd8:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	4a4c      	ldr	r2, [pc, #304]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	6193      	str	r3, [r2, #24]
 8005be4:	4b4a      	ldr	r3, [pc, #296]	; (8005d10 <HAL_GPIO_Init+0x2b8>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	60bb      	str	r3, [r7, #8]
 8005bee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005bf0:	4a48      	ldr	r2, [pc, #288]	; (8005d14 <HAL_GPIO_Init+0x2bc>)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	3302      	adds	r3, #2
 8005bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	220f      	movs	r2, #15
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4013      	ands	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a40      	ldr	r2, [pc, #256]	; (8005d18 <HAL_GPIO_Init+0x2c0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d013      	beq.n	8005c44 <HAL_GPIO_Init+0x1ec>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3f      	ldr	r2, [pc, #252]	; (8005d1c <HAL_GPIO_Init+0x2c4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00d      	beq.n	8005c40 <HAL_GPIO_Init+0x1e8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a3e      	ldr	r2, [pc, #248]	; (8005d20 <HAL_GPIO_Init+0x2c8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d007      	beq.n	8005c3c <HAL_GPIO_Init+0x1e4>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a3d      	ldr	r2, [pc, #244]	; (8005d24 <HAL_GPIO_Init+0x2cc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d101      	bne.n	8005c38 <HAL_GPIO_Init+0x1e0>
 8005c34:	2303      	movs	r3, #3
 8005c36:	e006      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c38:	2304      	movs	r3, #4
 8005c3a:	e004      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e002      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c40:	2301      	movs	r3, #1
 8005c42:	e000      	b.n	8005c46 <HAL_GPIO_Init+0x1ee>
 8005c44:	2300      	movs	r3, #0
 8005c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c48:	f002 0203 	and.w	r2, r2, #3
 8005c4c:	0092      	lsls	r2, r2, #2
 8005c4e:	4093      	lsls	r3, r2
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005c56:	492f      	ldr	r1, [pc, #188]	; (8005d14 <HAL_GPIO_Init+0x2bc>)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	3302      	adds	r3, #2
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c70:	4b2d      	ldr	r3, [pc, #180]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	492c      	ldr	r1, [pc, #176]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]
 8005c7c:	e006      	b.n	8005c8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c7e:	4b2a      	ldr	r3, [pc, #168]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	43db      	mvns	r3, r3
 8005c86:	4928      	ldr	r1, [pc, #160]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c98:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	4922      	ldr	r1, [pc, #136]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60cb      	str	r3, [r1, #12]
 8005ca4:	e006      	b.n	8005cb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005ca8:	68da      	ldr	r2, [r3, #12]
 8005caa:	69bb      	ldr	r3, [r7, #24]
 8005cac:	43db      	mvns	r3, r3
 8005cae:	491e      	ldr	r1, [pc, #120]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d006      	beq.n	8005cce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005cc0:	4b19      	ldr	r3, [pc, #100]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	4918      	ldr	r1, [pc, #96]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	604b      	str	r3, [r1, #4]
 8005ccc:	e006      	b.n	8005cdc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cce:	4b16      	ldr	r3, [pc, #88]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	4914      	ldr	r1, [pc, #80]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d021      	beq.n	8005d2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	490e      	ldr	r1, [pc, #56]	; (8005d28 <HAL_GPIO_Init+0x2d0>)
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
 8005cf4:	e021      	b.n	8005d3a <HAL_GPIO_Init+0x2e2>
 8005cf6:	bf00      	nop
 8005cf8:	10320000 	.word	0x10320000
 8005cfc:	10310000 	.word	0x10310000
 8005d00:	10220000 	.word	0x10220000
 8005d04:	10210000 	.word	0x10210000
 8005d08:	10120000 	.word	0x10120000
 8005d0c:	10110000 	.word	0x10110000
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40010000 	.word	0x40010000
 8005d18:	40010800 	.word	0x40010800
 8005d1c:	40010c00 	.word	0x40010c00
 8005d20:	40011000 	.word	0x40011000
 8005d24:	40011400 	.word	0x40011400
 8005d28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d2c:	4b0b      	ldr	r3, [pc, #44]	; (8005d5c <HAL_GPIO_Init+0x304>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	4909      	ldr	r1, [pc, #36]	; (8005d5c <HAL_GPIO_Init+0x304>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f47f ae8e 	bne.w	8005a6c <HAL_GPIO_Init+0x14>
  }
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	372c      	adds	r7, #44	; 0x2c
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bc80      	pop	{r7}
 8005d5a:	4770      	bx	lr
 8005d5c:	40010400 	.word	0x40010400

08005d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d70:	787b      	ldrb	r3, [r7, #1]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d76:	887a      	ldrh	r2, [r7, #2]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d7c:	e003      	b.n	8005d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d7e:	887b      	ldrh	r3, [r7, #2]
 8005d80:	041a      	lsls	r2, r3, #16
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	611a      	str	r2, [r3, #16]
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e12b      	b.n	8005ffa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fe fdc6 	bl	8004948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2224      	movs	r2, #36	; 0x24
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005df2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005df4:	f001 fbf0 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8005df8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	4a81      	ldr	r2, [pc, #516]	; (8006004 <HAL_I2C_Init+0x274>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d807      	bhi.n	8005e14 <HAL_I2C_Init+0x84>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4a80      	ldr	r2, [pc, #512]	; (8006008 <HAL_I2C_Init+0x278>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bf94      	ite	ls
 8005e0c:	2301      	movls	r3, #1
 8005e0e:	2300      	movhi	r3, #0
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	e006      	b.n	8005e22 <HAL_I2C_Init+0x92>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a7d      	ldr	r2, [pc, #500]	; (800600c <HAL_I2C_Init+0x27c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	bf94      	ite	ls
 8005e1c:	2301      	movls	r3, #1
 8005e1e:	2300      	movhi	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e0e7      	b.n	8005ffa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4a78      	ldr	r2, [pc, #480]	; (8006010 <HAL_I2C_Init+0x280>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	0c9b      	lsrs	r3, r3, #18
 8005e34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	4a6a      	ldr	r2, [pc, #424]	; (8006004 <HAL_I2C_Init+0x274>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d802      	bhi.n	8005e64 <HAL_I2C_Init+0xd4>
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3301      	adds	r3, #1
 8005e62:	e009      	b.n	8005e78 <HAL_I2C_Init+0xe8>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	4a69      	ldr	r2, [pc, #420]	; (8006014 <HAL_I2C_Init+0x284>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	099b      	lsrs	r3, r3, #6
 8005e76:	3301      	adds	r3, #1
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005e8a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	495c      	ldr	r1, [pc, #368]	; (8006004 <HAL_I2C_Init+0x274>)
 8005e94:	428b      	cmp	r3, r1
 8005e96:	d819      	bhi.n	8005ecc <HAL_I2C_Init+0x13c>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	1e59      	subs	r1, r3, #1
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005eac:	400b      	ands	r3, r1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <HAL_I2C_Init+0x138>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	1e59      	subs	r1, r3, #1
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec6:	e051      	b.n	8005f6c <HAL_I2C_Init+0x1dc>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	e04f      	b.n	8005f6c <HAL_I2C_Init+0x1dc>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d111      	bne.n	8005ef8 <HAL_I2C_Init+0x168>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	1e58      	subs	r0, r3, #1
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	440b      	add	r3, r1
 8005ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e012      	b.n	8005f1e <HAL_I2C_Init+0x18e>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	1e58      	subs	r0, r3, #1
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	0099      	lsls	r1, r3, #2
 8005f08:	440b      	add	r3, r1
 8005f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_I2C_Init+0x196>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e022      	b.n	8005f6c <HAL_I2C_Init+0x1dc>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10e      	bne.n	8005f4c <HAL_I2C_Init+0x1bc>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1e58      	subs	r0, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6859      	ldr	r1, [r3, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	440b      	add	r3, r1
 8005f3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f40:	3301      	adds	r3, #1
 8005f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4a:	e00f      	b.n	8005f6c <HAL_I2C_Init+0x1dc>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1e58      	subs	r0, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	0099      	lsls	r1, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f62:	3301      	adds	r3, #1
 8005f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	6809      	ldr	r1, [r1, #0]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69da      	ldr	r2, [r3, #28]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005f9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6911      	ldr	r1, [r2, #16]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	68d2      	ldr	r2, [r2, #12]
 8005fa6:	4311      	orrs	r1, r2
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6812      	ldr	r2, [r2, #0]
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695a      	ldr	r2, [r3, #20]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	000186a0 	.word	0x000186a0
 8006008:	001e847f 	.word	0x001e847f
 800600c:	003d08ff 	.word	0x003d08ff
 8006010:	431bde83 	.word	0x431bde83
 8006014:	10624dd3 	.word	0x10624dd3

08006018 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	4608      	mov	r0, r1
 8006022:	4611      	mov	r1, r2
 8006024:	461a      	mov	r2, r3
 8006026:	4603      	mov	r3, r0
 8006028:	817b      	strh	r3, [r7, #10]
 800602a:	460b      	mov	r3, r1
 800602c:	813b      	strh	r3, [r7, #8]
 800602e:	4613      	mov	r3, r2
 8006030:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006032:	f7fe fef7 	bl	8004e24 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b20      	cmp	r3, #32
 8006042:	f040 80d9 	bne.w	80061f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	2319      	movs	r3, #25
 800604c:	2201      	movs	r2, #1
 800604e:	496d      	ldr	r1, [pc, #436]	; (8006204 <HAL_I2C_Mem_Write+0x1ec>)
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fcc1 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
 800605e:	e0cc      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006066:	2b01      	cmp	r3, #1
 8006068:	d101      	bne.n	800606e <HAL_I2C_Mem_Write+0x56>
 800606a:	2302      	movs	r3, #2
 800606c:	e0c5      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0301 	and.w	r3, r3, #1
 8006080:	2b01      	cmp	r3, #1
 8006082:	d007      	beq.n	8006094 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2221      	movs	r2, #33	; 0x21
 80060a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2240      	movs	r2, #64	; 0x40
 80060b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a3a      	ldr	r2, [r7, #32]
 80060be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a4d      	ldr	r2, [pc, #308]	; (8006208 <HAL_I2C_Mem_Write+0x1f0>)
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060d6:	88f8      	ldrh	r0, [r7, #6]
 80060d8:	893a      	ldrh	r2, [r7, #8]
 80060da:	8979      	ldrh	r1, [r7, #10]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	4603      	mov	r3, r0
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 faf8 	bl	80066dc <I2C_RequestMemoryWrite>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d052      	beq.n	8006198 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e081      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f000 fd86 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00d      	beq.n	8006122 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b04      	cmp	r3, #4
 800610c:	d107      	bne.n	800611e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800611c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e06b      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613c:	3b01      	subs	r3, #1
 800613e:	b29a      	uxth	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	3b01      	subs	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b04      	cmp	r3, #4
 800615e:	d11b      	bne.n	8006198 <HAL_I2C_Mem_Write+0x180>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006164:	2b00      	cmp	r3, #0
 8006166:	d017      	beq.n	8006198 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1aa      	bne.n	80060f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061a4:	68f8      	ldr	r0, [r7, #12]
 80061a6:	f000 fd79 	bl	8006c9c <I2C_WaitOnBTFFlagUntilTimeout>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00d      	beq.n	80061cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d107      	bne.n	80061c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e016      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	e000      	b.n	80061fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061f8:	2302      	movs	r3, #2
  }
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	00100002 	.word	0x00100002
 8006208:	ffff0000 	.word	0xffff0000

0800620c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	4608      	mov	r0, r1
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	4603      	mov	r3, r0
 800621c:	817b      	strh	r3, [r7, #10]
 800621e:	460b      	mov	r3, r1
 8006220:	813b      	strh	r3, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800622a:	f7fe fdfb 	bl	8004e24 <HAL_GetTick>
 800622e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b20      	cmp	r3, #32
 800623a:	f040 8244 	bne.w	80066c6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	2319      	movs	r3, #25
 8006244:	2201      	movs	r2, #1
 8006246:	4982      	ldr	r1, [pc, #520]	; (8006450 <HAL_I2C_Mem_Read+0x244>)
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fbc5 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
 8006256:	e237      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_I2C_Mem_Read+0x5a>
 8006262:	2302      	movs	r3, #2
 8006264:	e230      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b01      	cmp	r3, #1
 800627a:	d007      	beq.n	800628c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0201 	orr.w	r2, r2, #1
 800628a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800629a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2222      	movs	r2, #34	; 0x22
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2240      	movs	r2, #64	; 0x40
 80062a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80062bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a62      	ldr	r2, [pc, #392]	; (8006454 <HAL_I2C_Mem_Read+0x248>)
 80062cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80062ce:	88f8      	ldrh	r0, [r7, #6]
 80062d0:	893a      	ldrh	r2, [r7, #8]
 80062d2:	8979      	ldrh	r1, [r7, #10]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d6:	9301      	str	r3, [sp, #4]
 80062d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	4603      	mov	r3, r0
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fa92 	bl	8006808 <I2C_RequestMemoryRead>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e1ec      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d113      	bne.n	800631e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	61fb      	str	r3, [r7, #28]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e1c0      	b.n	80066a0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006322:	2b01      	cmp	r3, #1
 8006324:	d11e      	bne.n	8006364 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006334:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006336:	b672      	cpsid	i
}
 8006338:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006360:	b662      	cpsie	i
}
 8006362:	e035      	b.n	80063d0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006368:	2b02      	cmp	r3, #2
 800636a:	d11e      	bne.n	80063aa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800637c:	b672      	cpsid	i
}
 800637e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006380:	2300      	movs	r3, #0
 8006382:	617b      	str	r3, [r7, #20]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063a6:	b662      	cpsie	i
}
 80063a8:	e012      	b.n	80063d0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063b8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ba:	2300      	movs	r3, #0
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	613b      	str	r3, [r7, #16]
 80063ce:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80063d0:	e166      	b.n	80066a0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	f200 811f 	bhi.w	800661a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d123      	bne.n	800642c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fc9f 	bl	8006d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e167      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	855a      	strh	r2, [r3, #42]	; 0x2a
 800642a:	e139      	b.n	80066a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	2b02      	cmp	r3, #2
 8006432:	d152      	bne.n	80064da <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643a:	2200      	movs	r2, #0
 800643c:	4906      	ldr	r1, [pc, #24]	; (8006458 <HAL_I2C_Mem_Read+0x24c>)
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	f000 faca 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e13c      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
 800644e:	bf00      	nop
 8006450:	00100002 	.word	0x00100002
 8006454:	ffff0000 	.word	0xffff0000
 8006458:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800645c:	b672      	cpsid	i
}
 800645e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800646e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064a2:	b662      	cpsie	i
}
 80064a4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d8:	e0e2      	b.n	80066a0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e0:	2200      	movs	r2, #0
 80064e2:	497b      	ldr	r1, [pc, #492]	; (80066d0 <HAL_I2C_Mem_Read+0x4c4>)
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fa77 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0e9      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006502:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006504:	b672      	cpsid	i
}
 8006506:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800653a:	4b66      	ldr	r3, [pc, #408]	; (80066d4 <HAL_I2C_Mem_Read+0x4c8>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	08db      	lsrs	r3, r3, #3
 8006540:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <HAL_I2C_Mem_Read+0x4cc>)
 8006542:	fba2 2303 	umull	r2, r3, r2, r3
 8006546:	0a1a      	lsrs	r2, r3, #8
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	00da      	lsls	r2, r3, #3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	3b01      	subs	r3, #1
 8006558:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d118      	bne.n	8006592 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0220 	orr.w	r2, r3, #32
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006582:	b662      	cpsie	i
}
 8006584:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e09a      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	695b      	ldr	r3, [r3, #20]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b04      	cmp	r3, #4
 800659e:	d1d9      	bne.n	8006554 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691a      	ldr	r2, [r3, #16]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	3b01      	subs	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80065e2:	b662      	cpsie	i
}
 80065e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	b2d2      	uxtb	r2, r2
 80065f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	3b01      	subs	r3, #1
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006618:	e042      	b.n	80066a0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 fb84 	bl	8006d2c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e04c      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	1c5a      	adds	r2, r3, #1
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	2b04      	cmp	r3, #4
 800666c:	d118      	bne.n	80066a0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668a:	3b01      	subs	r3, #1
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f47f ae94 	bne.w	80063d2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e000      	b.n	80066c8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80066c6:	2302      	movs	r3, #2
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	00010004 	.word	0x00010004
 80066d4:	20000004 	.word	0x20000004
 80066d8:	14f8b589 	.word	0x14f8b589

080066dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006704:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2200      	movs	r2, #0
 800670e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f960 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00d      	beq.n	800673a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672c:	d103      	bne.n	8006736 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e05f      	b.n	80067fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800673a:	897b      	ldrh	r3, [r7, #10]
 800673c:	b2db      	uxtb	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006748:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	492d      	ldr	r1, [pc, #180]	; (8006804 <I2C_RequestMemoryWrite+0x128>)
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 f9bb 	bl	8006acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e04c      	b.n	80067fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006778:	6a39      	ldr	r1, [r7, #32]
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 fa46 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	2b04      	cmp	r3, #4
 800678c:	d107      	bne.n	800679e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800679c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e02b      	b.n	80067fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d105      	bne.n	80067b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067a8:	893b      	ldrh	r3, [r7, #8]
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	611a      	str	r2, [r3, #16]
 80067b2:	e021      	b.n	80067f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80067b4:	893b      	ldrh	r3, [r7, #8]
 80067b6:	0a1b      	lsrs	r3, r3, #8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c4:	6a39      	ldr	r1, [r7, #32]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fa20 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b04      	cmp	r3, #4
 80067d8:	d107      	bne.n	80067ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e005      	b.n	80067fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80067ee:	893b      	ldrh	r3, [r7, #8]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	00010002 	.word	0x00010002

08006808 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af02      	add	r7, sp, #8
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	4608      	mov	r0, r1
 8006812:	4611      	mov	r1, r2
 8006814:	461a      	mov	r2, r3
 8006816:	4603      	mov	r3, r0
 8006818:	817b      	strh	r3, [r7, #10]
 800681a:	460b      	mov	r3, r1
 800681c:	813b      	strh	r3, [r7, #8]
 800681e:	4613      	mov	r3, r2
 8006820:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006830:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006840:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2200      	movs	r2, #0
 800684a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 f8c2 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006868:	d103      	bne.n	8006872 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e0aa      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006876:	897b      	ldrh	r3, [r7, #10]
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006884:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	6a3a      	ldr	r2, [r7, #32]
 800688a:	4952      	ldr	r1, [pc, #328]	; (80069d4 <I2C_RequestMemoryRead+0x1cc>)
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f91d 	bl	8006acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e097      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b4:	6a39      	ldr	r1, [r7, #32]
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f9a8 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b04      	cmp	r3, #4
 80068c8:	d107      	bne.n	80068da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e076      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068e4:	893b      	ldrh	r3, [r7, #8]
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	611a      	str	r2, [r3, #16]
 80068ee:	e021      	b.n	8006934 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80068f0:	893b      	ldrh	r3, [r7, #8]
 80068f2:	0a1b      	lsrs	r3, r3, #8
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006900:	6a39      	ldr	r1, [r7, #32]
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f982 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	2b04      	cmp	r3, #4
 8006914:	d107      	bne.n	8006926 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006924:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e050      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800692a:	893b      	ldrh	r3, [r7, #8]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006936:	6a39      	ldr	r1, [r7, #32]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f967 	bl	8006c0c <I2C_WaitOnTXEFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00d      	beq.n	8006960 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b04      	cmp	r3, #4
 800694a:	d107      	bne.n	800695c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e035      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800696e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	2200      	movs	r2, #0
 8006978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f82b 	bl	80069d8 <I2C_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00d      	beq.n	80069a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006996:	d103      	bne.n	80069a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800699e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e013      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069a4:	897b      	ldrh	r3, [r7, #10]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	f043 0301 	orr.w	r3, r3, #1
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	6a3a      	ldr	r2, [r7, #32]
 80069b8:	4906      	ldr	r1, [pc, #24]	; (80069d4 <I2C_RequestMemoryRead+0x1cc>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f886 	bl	8006acc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e000      	b.n	80069cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3718      	adds	r7, #24
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	00010002 	.word	0x00010002

080069d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	603b      	str	r3, [r7, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069e8:	e048      	b.n	8006a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d044      	beq.n	8006a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f2:	f7fe fa17 	bl	8004e24 <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d302      	bcc.n	8006a08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d139      	bne.n	8006a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	0c1b      	lsrs	r3, r3, #16
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d10d      	bne.n	8006a2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	695b      	ldr	r3, [r3, #20]
 8006a18:	43da      	mvns	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	e00c      	b.n	8006a48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	43da      	mvns	r2, r3
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf0c      	ite	eq
 8006a40:	2301      	moveq	r3, #1
 8006a42:	2300      	movne	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d116      	bne.n	8006a7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a68:	f043 0220 	orr.w	r2, r3, #32
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e023      	b.n	8006ac4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	0c1b      	lsrs	r3, r3, #16
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10d      	bne.n	8006aa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	43da      	mvns	r2, r3
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bf0c      	ite	eq
 8006a98:	2301      	moveq	r3, #1
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	e00c      	b.n	8006abc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	43da      	mvns	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2301      	moveq	r3, #1
 8006ab6:	2300      	movne	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	79fb      	ldrb	r3, [r7, #7]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d093      	beq.n	80069ea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ada:	e071      	b.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aea:	d123      	bne.n	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	f043 0204 	orr.w	r2, r3, #4
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e067      	b.n	8006c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3a:	d041      	beq.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3c:	f7fe f972 	bl	8004e24 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d136      	bne.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10c      	bne.n	8006b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	e00b      	b.n	8006b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	43da      	mvns	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4013      	ands	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d016      	beq.n	8006bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2220      	movs	r2, #32
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	f043 0220 	orr.w	r2, r3, #32
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e021      	b.n	8006c04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	0c1b      	lsrs	r3, r3, #16
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d10c      	bne.n	8006be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	43da      	mvns	r2, r3
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e00b      	b.n	8006bfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	43da      	mvns	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4013      	ands	r3, r2
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bf14      	ite	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	2300      	moveq	r3, #0
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f47f af6d 	bne.w	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c18:	e034      	b.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f8e3 	bl	8006de6 <I2C_IsAcknowledgeFailed>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e034      	b.n	8006c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d028      	beq.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c32:	f7fe f8f7 	bl	8004e24 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d302      	bcc.n	8006c48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d11d      	bne.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d016      	beq.n	8006c84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c70:	f043 0220 	orr.w	r2, r3, #32
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e007      	b.n	8006c94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b80      	cmp	r3, #128	; 0x80
 8006c90:	d1c3      	bne.n	8006c1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ca8:	e034      	b.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f89b 	bl	8006de6 <I2C_IsAcknowledgeFailed>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e034      	b.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d028      	beq.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc2:	f7fe f8af 	bl	8004e24 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d302      	bcc.n	8006cd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d11d      	bne.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d016      	beq.n	8006d14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f043 0220 	orr.w	r2, r3, #32
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e007      	b.n	8006d24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	2b04      	cmp	r3, #4
 8006d20:	d1c3      	bne.n	8006caa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d38:	e049      	b.n	8006dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d119      	bne.n	8006d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0210 	mvn.w	r2, #16
 8006d50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e030      	b.n	8006dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d7c:	f7fe f852 	bl	8004e24 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d302      	bcc.n	8006d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d11d      	bne.n	8006dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d9c:	2b40      	cmp	r3, #64	; 0x40
 8006d9e:	d016      	beq.n	8006dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	f043 0220 	orr.w	r2, r3, #32
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e007      	b.n	8006dde <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b40      	cmp	r3, #64	; 0x40
 8006dda:	d1ae      	bne.n	8006d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dfc:	d11b      	bne.n	8006e36 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e06:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f043 0204 	orr.w	r2, r3, #4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e000      	b.n	8006e38 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
	...

08006e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e272      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8087 	beq.w	8006f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e64:	4b92      	ldr	r3, [pc, #584]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f003 030c 	and.w	r3, r3, #12
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d00c      	beq.n	8006e8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e70:	4b8f      	ldr	r3, [pc, #572]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d112      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x5e>
 8006e7c:	4b8c      	ldr	r3, [pc, #560]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d10b      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e8a:	4b89      	ldr	r3, [pc, #548]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d06c      	beq.n	8006f70 <HAL_RCC_OscConfig+0x12c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d168      	bne.n	8006f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e24c      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eaa:	d106      	bne.n	8006eba <HAL_RCC_OscConfig+0x76>
 8006eac:	4b80      	ldr	r3, [pc, #512]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a7f      	ldr	r2, [pc, #508]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	e02e      	b.n	8006f18 <HAL_RCC_OscConfig+0xd4>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10c      	bne.n	8006edc <HAL_RCC_OscConfig+0x98>
 8006ec2:	4b7b      	ldr	r3, [pc, #492]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a7a      	ldr	r2, [pc, #488]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ecc:	6013      	str	r3, [r2, #0]
 8006ece:	4b78      	ldr	r3, [pc, #480]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a77      	ldr	r2, [pc, #476]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e01d      	b.n	8006f18 <HAL_RCC_OscConfig+0xd4>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCC_OscConfig+0xbc>
 8006ee6:	4b72      	ldr	r3, [pc, #456]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a71      	ldr	r2, [pc, #452]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4b6f      	ldr	r3, [pc, #444]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6e      	ldr	r2, [pc, #440]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e00b      	b.n	8006f18 <HAL_RCC_OscConfig+0xd4>
 8006f00:	4b6b      	ldr	r3, [pc, #428]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a6a      	ldr	r2, [pc, #424]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4b68      	ldr	r3, [pc, #416]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a67      	ldr	r2, [pc, #412]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d013      	beq.n	8006f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f20:	f7fd ff80 	bl	8004e24 <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f28:	f7fd ff7c 	bl	8004e24 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b64      	cmp	r3, #100	; 0x64
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e200      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	4b5d      	ldr	r3, [pc, #372]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0f0      	beq.n	8006f28 <HAL_RCC_OscConfig+0xe4>
 8006f46:	e014      	b.n	8006f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f48:	f7fd ff6c 	bl	8004e24 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f50:	f7fd ff68 	bl	8004e24 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b64      	cmp	r3, #100	; 0x64
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1ec      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f62:	4b53      	ldr	r3, [pc, #332]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x10c>
 8006f6e:	e000      	b.n	8006f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d063      	beq.n	8007046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f7e:	4b4c      	ldr	r3, [pc, #304]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f003 030c 	and.w	r3, r3, #12
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00b      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f8a:	4b49      	ldr	r3, [pc, #292]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d11c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x18c>
 8006f96:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d116      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fa2:	4b43      	ldr	r3, [pc, #268]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_RCC_OscConfig+0x176>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d001      	beq.n	8006fba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e1c0      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4939      	ldr	r1, [pc, #228]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fce:	e03a      	b.n	8007046 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd8:	4b36      	ldr	r3, [pc, #216]	; (80070b4 <HAL_RCC_OscConfig+0x270>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fde:	f7fd ff21 	bl	8004e24 <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fe6:	f7fd ff1d 	bl	8004e24 <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e1a1      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007004:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4927      	ldr	r1, [pc, #156]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]
 8007018:	e015      	b.n	8007046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800701a:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <HAL_RCC_OscConfig+0x270>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fd ff00 	bl	8004e24 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007028:	f7fd fefc 	bl	8004e24 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e180      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800703a:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d03a      	beq.n	80070c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d019      	beq.n	800708e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800705a:	4b17      	ldr	r3, [pc, #92]	; (80070b8 <HAL_RCC_OscConfig+0x274>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007060:	f7fd fee0 	bl	8004e24 <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007068:	f7fd fedc 	bl	8004e24 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e160      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800707a:	4b0d      	ldr	r3, [pc, #52]	; (80070b0 <HAL_RCC_OscConfig+0x26c>)
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007086:	2001      	movs	r0, #1
 8007088:	f000 face 	bl	8007628 <RCC_Delay>
 800708c:	e01c      	b.n	80070c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800708e:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <HAL_RCC_OscConfig+0x274>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007094:	f7fd fec6 	bl	8004e24 <HAL_GetTick>
 8007098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800709a:	e00f      	b.n	80070bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800709c:	f7fd fec2 	bl	8004e24 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	d908      	bls.n	80070bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e146      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
 80070ae:	bf00      	nop
 80070b0:	40021000 	.word	0x40021000
 80070b4:	42420000 	.word	0x42420000
 80070b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070bc:	4b92      	ldr	r3, [pc, #584]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e9      	bne.n	800709c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 80a6 	beq.w	8007222 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070d6:	2300      	movs	r3, #0
 80070d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070da:	4b8b      	ldr	r3, [pc, #556]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10d      	bne.n	8007102 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070e6:	4b88      	ldr	r3, [pc, #544]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80070e8:	69db      	ldr	r3, [r3, #28]
 80070ea:	4a87      	ldr	r2, [pc, #540]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80070ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070f0:	61d3      	str	r3, [r2, #28]
 80070f2:	4b85      	ldr	r3, [pc, #532]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070fa:	60bb      	str	r3, [r7, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007102:	4b82      	ldr	r3, [pc, #520]	; (800730c <HAL_RCC_OscConfig+0x4c8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800710a:	2b00      	cmp	r3, #0
 800710c:	d118      	bne.n	8007140 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800710e:	4b7f      	ldr	r3, [pc, #508]	; (800730c <HAL_RCC_OscConfig+0x4c8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a7e      	ldr	r2, [pc, #504]	; (800730c <HAL_RCC_OscConfig+0x4c8>)
 8007114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800711a:	f7fd fe83 	bl	8004e24 <HAL_GetTick>
 800711e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007122:	f7fd fe7f 	bl	8004e24 <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b64      	cmp	r3, #100	; 0x64
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e103      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007134:	4b75      	ldr	r3, [pc, #468]	; (800730c <HAL_RCC_OscConfig+0x4c8>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d106      	bne.n	8007156 <HAL_RCC_OscConfig+0x312>
 8007148:	4b6f      	ldr	r3, [pc, #444]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	4a6e      	ldr	r2, [pc, #440]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800714e:	f043 0301 	orr.w	r3, r3, #1
 8007152:	6213      	str	r3, [r2, #32]
 8007154:	e02d      	b.n	80071b2 <HAL_RCC_OscConfig+0x36e>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10c      	bne.n	8007178 <HAL_RCC_OscConfig+0x334>
 800715e:	4b6a      	ldr	r3, [pc, #424]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	4a69      	ldr	r2, [pc, #420]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007164:	f023 0301 	bic.w	r3, r3, #1
 8007168:	6213      	str	r3, [r2, #32]
 800716a:	4b67      	ldr	r3, [pc, #412]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	4a66      	ldr	r2, [pc, #408]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007170:	f023 0304 	bic.w	r3, r3, #4
 8007174:	6213      	str	r3, [r2, #32]
 8007176:	e01c      	b.n	80071b2 <HAL_RCC_OscConfig+0x36e>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b05      	cmp	r3, #5
 800717e:	d10c      	bne.n	800719a <HAL_RCC_OscConfig+0x356>
 8007180:	4b61      	ldr	r3, [pc, #388]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	4a60      	ldr	r2, [pc, #384]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007186:	f043 0304 	orr.w	r3, r3, #4
 800718a:	6213      	str	r3, [r2, #32]
 800718c:	4b5e      	ldr	r3, [pc, #376]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	4a5d      	ldr	r2, [pc, #372]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007192:	f043 0301 	orr.w	r3, r3, #1
 8007196:	6213      	str	r3, [r2, #32]
 8007198:	e00b      	b.n	80071b2 <HAL_RCC_OscConfig+0x36e>
 800719a:	4b5b      	ldr	r3, [pc, #364]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	4a5a      	ldr	r2, [pc, #360]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80071a0:	f023 0301 	bic.w	r3, r3, #1
 80071a4:	6213      	str	r3, [r2, #32]
 80071a6:	4b58      	ldr	r3, [pc, #352]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4a57      	ldr	r2, [pc, #348]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80071ac:	f023 0304 	bic.w	r3, r3, #4
 80071b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d015      	beq.n	80071e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071ba:	f7fd fe33 	bl	8004e24 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c0:	e00a      	b.n	80071d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c2:	f7fd fe2f 	bl	8004e24 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e0b1      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	4b4b      	ldr	r3, [pc, #300]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ee      	beq.n	80071c2 <HAL_RCC_OscConfig+0x37e>
 80071e4:	e014      	b.n	8007210 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071e6:	f7fd fe1d 	bl	8004e24 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071ec:	e00a      	b.n	8007204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071ee:	f7fd fe19 	bl	8004e24 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d901      	bls.n	8007204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007200:	2303      	movs	r3, #3
 8007202:	e09b      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007204:	4b40      	ldr	r3, [pc, #256]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	f003 0302 	and.w	r3, r3, #2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1ee      	bne.n	80071ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b01      	cmp	r3, #1
 8007214:	d105      	bne.n	8007222 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007216:	4b3c      	ldr	r3, [pc, #240]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007218:	69db      	ldr	r3, [r3, #28]
 800721a:	4a3b      	ldr	r2, [pc, #236]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800721c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007220:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	2b00      	cmp	r3, #0
 8007228:	f000 8087 	beq.w	800733a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800722c:	4b36      	ldr	r3, [pc, #216]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 030c 	and.w	r3, r3, #12
 8007234:	2b08      	cmp	r3, #8
 8007236:	d061      	beq.n	80072fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69db      	ldr	r3, [r3, #28]
 800723c:	2b02      	cmp	r3, #2
 800723e:	d146      	bne.n	80072ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007240:	4b33      	ldr	r3, [pc, #204]	; (8007310 <HAL_RCC_OscConfig+0x4cc>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007246:	f7fd fded 	bl	8004e24 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724e:	f7fd fde9 	bl	8004e24 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e06d      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007260:	4b29      	ldr	r3, [pc, #164]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f0      	bne.n	800724e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007274:	d108      	bne.n	8007288 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007276:	4b24      	ldr	r3, [pc, #144]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	4921      	ldr	r1, [pc, #132]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 8007284:	4313      	orrs	r3, r2
 8007286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007288:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a19      	ldr	r1, [r3, #32]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	430b      	orrs	r3, r1
 800729a:	491b      	ldr	r1, [pc, #108]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 800729c:	4313      	orrs	r3, r2
 800729e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <HAL_RCC_OscConfig+0x4cc>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a6:	f7fd fdbd 	bl	8004e24 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072ae:	f7fd fdb9 	bl	8004e24 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e03d      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80072c0:	4b11      	ldr	r3, [pc, #68]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x46a>
 80072cc:	e035      	b.n	800733a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072ce:	4b10      	ldr	r3, [pc, #64]	; (8007310 <HAL_RCC_OscConfig+0x4cc>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072d4:	f7fd fda6 	bl	8004e24 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072da:	e008      	b.n	80072ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072dc:	f7fd fda2 	bl	8004e24 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b02      	cmp	r3, #2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e026      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072ee:	4b06      	ldr	r3, [pc, #24]	; (8007308 <HAL_RCC_OscConfig+0x4c4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d1f0      	bne.n	80072dc <HAL_RCC_OscConfig+0x498>
 80072fa:	e01e      	b.n	800733a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d107      	bne.n	8007314 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e019      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
 8007308:	40021000 	.word	0x40021000
 800730c:	40007000 	.word	0x40007000
 8007310:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007314:	4b0b      	ldr	r3, [pc, #44]	; (8007344 <HAL_RCC_OscConfig+0x500>)
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	429a      	cmp	r2, r3
 8007326:	d106      	bne.n	8007336 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007332:	429a      	cmp	r2, r3
 8007334:	d001      	beq.n	800733a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800733a:	2300      	movs	r3, #0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	40021000 	.word	0x40021000

08007348 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e0d0      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800735c:	4b6a      	ldr	r3, [pc, #424]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	429a      	cmp	r2, r3
 8007368:	d910      	bls.n	800738c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	4b67      	ldr	r3, [pc, #412]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f023 0207 	bic.w	r2, r3, #7
 8007372:	4965      	ldr	r1, [pc, #404]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	4313      	orrs	r3, r2
 8007378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800737a:	4b63      	ldr	r3, [pc, #396]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0307 	and.w	r3, r3, #7
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d001      	beq.n	800738c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e0b8      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0302 	and.w	r3, r3, #2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d020      	beq.n	80073da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d005      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073a4:	4b59      	ldr	r3, [pc, #356]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	4a58      	ldr	r2, [pc, #352]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d005      	beq.n	80073c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073bc:	4b53      	ldr	r3, [pc, #332]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	4a52      	ldr	r2, [pc, #328]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80073c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c8:	4b50      	ldr	r3, [pc, #320]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	494d      	ldr	r1, [pc, #308]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d040      	beq.n	8007468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d107      	bne.n	80073fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ee:	4b47      	ldr	r3, [pc, #284]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d115      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e07f      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d107      	bne.n	8007416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007406:	4b41      	ldr	r3, [pc, #260]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e073      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007416:	4b3d      	ldr	r3, [pc, #244]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e06b      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f023 0203 	bic.w	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4936      	ldr	r1, [pc, #216]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 8007434:	4313      	orrs	r3, r2
 8007436:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007438:	f7fd fcf4 	bl	8004e24 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743e:	e00a      	b.n	8007456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007440:	f7fd fcf0 	bl	8004e24 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f241 3288 	movw	r2, #5000	; 0x1388
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e053      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007456:	4b2d      	ldr	r3, [pc, #180]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f003 020c 	and.w	r2, r3, #12
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	429a      	cmp	r2, r3
 8007466:	d1eb      	bne.n	8007440 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007468:	4b27      	ldr	r3, [pc, #156]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	429a      	cmp	r2, r3
 8007474:	d210      	bcs.n	8007498 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f023 0207 	bic.w	r2, r3, #7
 800747e:	4922      	ldr	r1, [pc, #136]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	4313      	orrs	r3, r2
 8007484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007486:	4b20      	ldr	r3, [pc, #128]	; (8007508 <HAL_RCC_ClockConfig+0x1c0>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	683a      	ldr	r2, [r7, #0]
 8007490:	429a      	cmp	r2, r3
 8007492:	d001      	beq.n	8007498 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e032      	b.n	80074fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0304 	and.w	r3, r3, #4
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d008      	beq.n	80074b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074a4:	4b19      	ldr	r3, [pc, #100]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4916      	ldr	r1, [pc, #88]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d009      	beq.n	80074d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	490e      	ldr	r1, [pc, #56]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80074d6:	f000 f821 	bl	800751c <HAL_RCC_GetSysClockFreq>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b0b      	ldr	r3, [pc, #44]	; (800750c <HAL_RCC_ClockConfig+0x1c4>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	091b      	lsrs	r3, r3, #4
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	490a      	ldr	r1, [pc, #40]	; (8007510 <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	5ccb      	ldrb	r3, [r1, r3]
 80074ea:	fa22 f303 	lsr.w	r3, r2, r3
 80074ee:	4a09      	ldr	r2, [pc, #36]	; (8007514 <HAL_RCC_ClockConfig+0x1cc>)
 80074f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <HAL_RCC_ClockConfig+0x1d0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fd fc52 	bl	8004da0 <HAL_InitTick>

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	40022000 	.word	0x40022000
 800750c:	40021000 	.word	0x40021000
 8007510:	0800da4c 	.word	0x0800da4c
 8007514:	20000004 	.word	0x20000004
 8007518:	20000008 	.word	0x20000008

0800751c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	2300      	movs	r3, #0
 8007530:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007536:	4b1e      	ldr	r3, [pc, #120]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 030c 	and.w	r3, r3, #12
 8007542:	2b04      	cmp	r3, #4
 8007544:	d002      	beq.n	800754c <HAL_RCC_GetSysClockFreq+0x30>
 8007546:	2b08      	cmp	r3, #8
 8007548:	d003      	beq.n	8007552 <HAL_RCC_GetSysClockFreq+0x36>
 800754a:	e027      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800754c:	4b19      	ldr	r3, [pc, #100]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800754e:	613b      	str	r3, [r7, #16]
      break;
 8007550:	e027      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0c9b      	lsrs	r3, r3, #18
 8007556:	f003 030f 	and.w	r3, r3, #15
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800755c:	5cd3      	ldrb	r3, [r2, r3]
 800755e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d010      	beq.n	800758c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800756a:	4b11      	ldr	r3, [pc, #68]	; (80075b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	0c5b      	lsrs	r3, r3, #17
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	4a11      	ldr	r2, [pc, #68]	; (80075bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007576:	5cd3      	ldrb	r3, [r2, r3]
 8007578:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a0d      	ldr	r2, [pc, #52]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800757e:	fb03 f202 	mul.w	r2, r3, r2
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	fbb2 f3f3 	udiv	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	e004      	b.n	8007596 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007590:	fb02 f303 	mul.w	r3, r2, r3
 8007594:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	613b      	str	r3, [r7, #16]
      break;
 800759a:	e002      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800759e:	613b      	str	r3, [r7, #16]
      break;
 80075a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075a2:	693b      	ldr	r3, [r7, #16]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	40021000 	.word	0x40021000
 80075b4:	007a1200 	.word	0x007a1200
 80075b8:	0800da64 	.word	0x0800da64
 80075bc:	0800da74 	.word	0x0800da74
 80075c0:	003d0900 	.word	0x003d0900

080075c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80075ca:	681b      	ldr	r3, [r3, #0]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bc80      	pop	{r7}
 80075d2:	4770      	bx	lr
 80075d4:	20000004 	.word	0x20000004

080075d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075dc:	f7ff fff2 	bl	80075c4 <HAL_RCC_GetHCLKFreq>
 80075e0:	4602      	mov	r2, r0
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	f003 0307 	and.w	r3, r3, #7
 80075ec:	4903      	ldr	r1, [pc, #12]	; (80075fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ee:	5ccb      	ldrb	r3, [r1, r3]
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	40021000 	.word	0x40021000
 80075fc:	0800da5c 	.word	0x0800da5c

08007600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007604:	f7ff ffde 	bl	80075c4 <HAL_RCC_GetHCLKFreq>
 8007608:	4602      	mov	r2, r0
 800760a:	4b05      	ldr	r3, [pc, #20]	; (8007620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	0adb      	lsrs	r3, r3, #11
 8007610:	f003 0307 	and.w	r3, r3, #7
 8007614:	4903      	ldr	r1, [pc, #12]	; (8007624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007616:	5ccb      	ldrb	r3, [r1, r3]
 8007618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800761c:	4618      	mov	r0, r3
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40021000 	.word	0x40021000
 8007624:	0800da5c 	.word	0x0800da5c

08007628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007630:	4b0a      	ldr	r3, [pc, #40]	; (800765c <RCC_Delay+0x34>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <RCC_Delay+0x38>)
 8007636:	fba2 2303 	umull	r2, r3, r2, r3
 800763a:	0a5b      	lsrs	r3, r3, #9
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	fb02 f303 	mul.w	r3, r2, r3
 8007642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007644:	bf00      	nop
  }
  while (Delay --);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	1e5a      	subs	r2, r3, #1
 800764a:	60fa      	str	r2, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f9      	bne.n	8007644 <RCC_Delay+0x1c>
}
 8007650:	bf00      	nop
 8007652:	bf00      	nop
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	bc80      	pop	{r7}
 800765a:	4770      	bx	lr
 800765c:	20000004 	.word	0x20000004
 8007660:	10624dd3 	.word	0x10624dd3

08007664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800766c:	2300      	movs	r3, #0
 800766e:	613b      	str	r3, [r7, #16]
 8007670:	2300      	movs	r3, #0
 8007672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d07d      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007684:	4b4f      	ldr	r3, [pc, #316]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10d      	bne.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007690:	4b4c      	ldr	r3, [pc, #304]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	4a4b      	ldr	r2, [pc, #300]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769a:	61d3      	str	r3, [r2, #28]
 800769c:	4b49      	ldr	r3, [pc, #292]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a4:	60bb      	str	r3, [r7, #8]
 80076a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076a8:	2301      	movs	r3, #1
 80076aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ac:	4b46      	ldr	r3, [pc, #280]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d118      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076b8:	4b43      	ldr	r3, [pc, #268]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a42      	ldr	r2, [pc, #264]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076c4:	f7fd fbae 	bl	8004e24 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ca:	e008      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076cc:	f7fd fbaa 	bl	8004e24 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b64      	cmp	r3, #100	; 0x64
 80076d8:	d901      	bls.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e06d      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076de:	4b3a      	ldr	r3, [pc, #232]	; (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f0      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076ea:	4b36      	ldr	r3, [pc, #216]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d02e      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	429a      	cmp	r2, r3
 8007706:	d027      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007708:	4b2e      	ldr	r3, [pc, #184]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007714:	2201      	movs	r2, #1
 8007716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007718:	4b2c      	ldr	r3, [pc, #176]	; (80077cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d014      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772e:	f7fd fb79 	bl	8004e24 <HAL_GetTick>
 8007732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007734:	e00a      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007736:	f7fd fb75 	bl	8004e24 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f241 3288 	movw	r2, #5000	; 0x1388
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e036      	b.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800774c:	4b1d      	ldr	r3, [pc, #116]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ee      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800775a:	6a1b      	ldr	r3, [r3, #32]
 800775c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4917      	ldr	r1, [pc, #92]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007766:	4313      	orrs	r3, r2
 8007768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800776a:	7dfb      	ldrb	r3, [r7, #23]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d105      	bne.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007770:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	4a13      	ldr	r2, [pc, #76]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800777a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d008      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	490b      	ldr	r1, [pc, #44]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007796:	4313      	orrs	r3, r2
 8007798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0310 	and.w	r3, r3, #16
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077a6:	4b07      	ldr	r3, [pc, #28]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	4904      	ldr	r1, [pc, #16]	; (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40021000 	.word	0x40021000
 80077c8:	40007000 	.word	0x40007000
 80077cc:	42420440 	.word	0x42420440

080077d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	2300      	movs	r3, #0
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	2300      	movs	r3, #0
 80077e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	2300      	movs	r3, #0
 80077ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b10      	cmp	r3, #16
 80077f0:	d00a      	beq.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b10      	cmp	r3, #16
 80077f6:	f200 808a 	bhi.w	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d045      	beq.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d075      	beq.n	80078f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007806:	e082      	b.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007808:	4b46      	ldr	r3, [pc, #280]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800780e:	4b45      	ldr	r3, [pc, #276]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d07b      	beq.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	0c9b      	lsrs	r3, r3, #18
 800781e:	f003 030f 	and.w	r3, r3, #15
 8007822:	4a41      	ldr	r2, [pc, #260]	; (8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007824:	5cd3      	ldrb	r3, [r2, r3]
 8007826:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d015      	beq.n	800785e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007832:	4b3c      	ldr	r3, [pc, #240]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	0c5b      	lsrs	r3, r3, #17
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	4a3b      	ldr	r2, [pc, #236]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800783e:	5cd3      	ldrb	r3, [r2, r3]
 8007840:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00d      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800784c:	4a38      	ldr	r2, [pc, #224]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	fbb2 f2f3 	udiv	r2, r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	fb02 f303 	mul.w	r3, r2, r3
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	e004      	b.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4a34      	ldr	r2, [pc, #208]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007862:	fb02 f303 	mul.w	r3, r2, r3
 8007866:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007868:	4b2e      	ldr	r3, [pc, #184]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007870:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007874:	d102      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	61bb      	str	r3, [r7, #24]
      break;
 800787a:	e04a      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4a2d      	ldr	r2, [pc, #180]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	085b      	lsrs	r3, r3, #1
 8007888:	61bb      	str	r3, [r7, #24]
      break;
 800788a:	e042      	b.n	8007912 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800788c:	4b25      	ldr	r3, [pc, #148]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789c:	d108      	bne.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0302 	and.w	r3, r3, #2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80078a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e01f      	b.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078ba:	d109      	bne.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80078bc:	4b19      	ldr	r3, [pc, #100]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80078c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80078cc:	61bb      	str	r3, [r7, #24]
 80078ce:	e00f      	b.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078da:	d11c      	bne.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80078dc:	4b11      	ldr	r3, [pc, #68]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d016      	beq.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80078e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80078ec:	61bb      	str	r3, [r7, #24]
      break;
 80078ee:	e012      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80078f0:	e011      	b.n	8007916 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80078f2:	f7ff fe85 	bl	8007600 <HAL_RCC_GetPCLK2Freq>
 80078f6:	4602      	mov	r2, r0
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	0b9b      	lsrs	r3, r3, #14
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	3301      	adds	r3, #1
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	fbb2 f3f3 	udiv	r3, r2, r3
 800790a:	61bb      	str	r3, [r7, #24]
      break;
 800790c:	e004      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800790e:	bf00      	nop
 8007910:	e002      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007912:	bf00      	nop
 8007914:	e000      	b.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007916:	bf00      	nop
    }
  }
  return (frequency);
 8007918:	69bb      	ldr	r3, [r7, #24]
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	40021000 	.word	0x40021000
 8007928:	0800da78 	.word	0x0800da78
 800792c:	0800da88 	.word	0x0800da88
 8007930:	007a1200 	.word	0x007a1200
 8007934:	003d0900 	.word	0x003d0900
 8007938:	aaaaaaab 	.word	0xaaaaaaab

0800793c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e041      	b.n	80079d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fd f82e 	bl	80049c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f000 fabe 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d001      	beq.n	80079f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e032      	b.n	8007a5a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2202      	movs	r2, #2
 80079f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	; (8007a64 <HAL_TIM_Base_Start+0x88>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d00e      	beq.n	8007a24 <HAL_TIM_Base_Start+0x48>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a0e:	d009      	beq.n	8007a24 <HAL_TIM_Base_Start+0x48>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a14      	ldr	r2, [pc, #80]	; (8007a68 <HAL_TIM_Base_Start+0x8c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <HAL_TIM_Base_Start+0x48>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a13      	ldr	r2, [pc, #76]	; (8007a6c <HAL_TIM_Base_Start+0x90>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d111      	bne.n	8007a48 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f003 0307 	and.w	r3, r3, #7
 8007a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b06      	cmp	r3, #6
 8007a34:	d010      	beq.n	8007a58 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0201 	orr.w	r2, r2, #1
 8007a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a46:	e007      	b.n	8007a58 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bc80      	pop	{r7}
 8007a62:	4770      	bx	lr
 8007a64:	40012c00 	.word	0x40012c00
 8007a68:	40000400 	.word	0x40000400
 8007a6c:	40000800 	.word	0x40000800

08007a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d001      	beq.n	8007a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e03a      	b.n	8007afe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0201 	orr.w	r2, r2, #1
 8007a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIM_Base_Start_IT+0x98>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00e      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab2:	d009      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a14      	ldr	r2, [pc, #80]	; (8007b0c <HAL_TIM_Base_Start_IT+0x9c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d004      	beq.n	8007ac8 <HAL_TIM_Base_Start_IT+0x58>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <HAL_TIM_Base_Start_IT+0xa0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d111      	bne.n	8007aec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0307 	and.w	r3, r3, #7
 8007ad2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b06      	cmp	r3, #6
 8007ad8:	d010      	beq.n	8007afc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f042 0201 	orr.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aea:	e007      	b.n	8007afc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0201 	orr.w	r2, r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr
 8007b08:	40012c00 	.word	0x40012c00
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800

08007b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d122      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d11b      	bne.n	8007b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0202 	mvn.w	r2, #2
 8007b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f9b4 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007b5c:	e005      	b.n	8007b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9a7 	bl	8007eb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f9b6 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0304 	and.w	r3, r3, #4
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0204 	mvn.w	r2, #4
 8007b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f98a 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f97d 	bl	8007eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f98c 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d122      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d11b      	bne.n	8007c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0208 	mvn.w	r2, #8
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2204      	movs	r2, #4
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f003 0303 	and.w	r3, r3, #3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f960 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f953 	bl	8007eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f962 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0310 	and.w	r3, r3, #16
 8007c22:	2b10      	cmp	r3, #16
 8007c24:	d122      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0310 	and.w	r3, r3, #16
 8007c30:	2b10      	cmp	r3, #16
 8007c32:	d11b      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0210 	mvn.w	r2, #16
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2208      	movs	r2, #8
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f936 	bl	8007ec4 <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f929 	bl	8007eb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f938 	bl	8007ed6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10e      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d107      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0201 	mvn.w	r2, #1
 8007c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7fc fa60 	bl	8004158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca2:	2b80      	cmp	r3, #128	; 0x80
 8007ca4:	d10e      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb0:	2b80      	cmp	r3, #128	; 0x80
 8007cb2:	d107      	bne.n	8007cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa7b 	bl	80081ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cce:	2b40      	cmp	r3, #64	; 0x40
 8007cd0:	d10e      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b40      	cmp	r3, #64	; 0x40
 8007cde:	d107      	bne.n	8007cf0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f8fc 	bl	8007ee8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d10e      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	f003 0320 	and.w	r3, r3, #32
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d107      	bne.n	8007d1c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f06f 0220 	mvn.w	r2, #32
 8007d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa46 	bl	80081a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d101      	bne.n	8007d40 <HAL_TIM_ConfigClockSource+0x1c>
 8007d3c:	2302      	movs	r3, #2
 8007d3e:	e0b4      	b.n	8007eaa <HAL_TIM_ConfigClockSource+0x186>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d78:	d03e      	beq.n	8007df8 <HAL_TIM_ConfigClockSource+0xd4>
 8007d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d7e:	f200 8087 	bhi.w	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	f000 8086 	beq.w	8007e96 <HAL_TIM_ConfigClockSource+0x172>
 8007d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d8e:	d87f      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b70      	cmp	r3, #112	; 0x70
 8007d92:	d01a      	beq.n	8007dca <HAL_TIM_ConfigClockSource+0xa6>
 8007d94:	2b70      	cmp	r3, #112	; 0x70
 8007d96:	d87b      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b60      	cmp	r3, #96	; 0x60
 8007d9a:	d050      	beq.n	8007e3e <HAL_TIM_ConfigClockSource+0x11a>
 8007d9c:	2b60      	cmp	r3, #96	; 0x60
 8007d9e:	d877      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b50      	cmp	r3, #80	; 0x50
 8007da2:	d03c      	beq.n	8007e1e <HAL_TIM_ConfigClockSource+0xfa>
 8007da4:	2b50      	cmp	r3, #80	; 0x50
 8007da6:	d873      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b40      	cmp	r3, #64	; 0x40
 8007daa:	d058      	beq.n	8007e5e <HAL_TIM_ConfigClockSource+0x13a>
 8007dac:	2b40      	cmp	r3, #64	; 0x40
 8007dae:	d86f      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b30      	cmp	r3, #48	; 0x30
 8007db2:	d064      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	2b30      	cmp	r3, #48	; 0x30
 8007db6:	d86b      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d060      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b20      	cmp	r3, #32
 8007dbe:	d867      	bhi.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d05c      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d05a      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0x15a>
 8007dc8:	e062      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007dda:	f000 f968 	bl	80080ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	609a      	str	r2, [r3, #8]
      break;
 8007df6:	e04f      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e08:	f000 f951 	bl	80080ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e1a:	609a      	str	r2, [r3, #8]
      break;
 8007e1c:	e03c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f000 f8c8 	bl	8007fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2150      	movs	r1, #80	; 0x50
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 f91f 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007e3c:	e02c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f000 f8e6 	bl	800801c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2160      	movs	r1, #96	; 0x60
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f90f 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007e5c:	e01c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f000 f8a8 	bl	8007fc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2140      	movs	r1, #64	; 0x40
 8007e76:	4618      	mov	r0, r3
 8007e78:	f000 f8ff 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007e7c:	e00c      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f000 f8f6 	bl	800807a <TIM_ITRx_SetConfig>
      break;
 8007e8e:	e003      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e90:	2301      	movs	r3, #1
 8007e92:	73fb      	strb	r3, [r7, #15]
      break;
 8007e94:	e000      	b.n	8007e98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr

08007ec4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ecc:	bf00      	nop
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr

08007ed6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b083      	sub	sp, #12
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ede:	bf00      	nop
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bc80      	pop	{r7}
 8007ef8:	4770      	bx	lr
	...

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a29      	ldr	r2, [pc, #164]	; (8007fb4 <TIM_Base_SetConfig+0xb8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d007      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a26      	ldr	r2, [pc, #152]	; (8007fb8 <TIM_Base_SetConfig+0xbc>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0x30>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a25      	ldr	r2, [pc, #148]	; (8007fbc <TIM_Base_SetConfig+0xc0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d108      	bne.n	8007f3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	; (8007fb4 <TIM_Base_SetConfig+0xb8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <TIM_Base_SetConfig+0xbc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0x62>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <TIM_Base_SetConfig+0xc0>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a07      	ldr	r2, [pc, #28]	; (8007fb4 <TIM_Base_SetConfig+0xb8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d103      	bne.n	8007fa4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	615a      	str	r2, [r3, #20]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bc80      	pop	{r7}
 8007fb2:	4770      	bx	lr
 8007fb4:	40012c00 	.word	0x40012c00
 8007fb8:	40000400 	.word	0x40000400
 8007fbc:	40000800 	.word	0x40000800

08007fc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b087      	sub	sp, #28
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6a1b      	ldr	r3, [r3, #32]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f023 030a 	bic.w	r3, r3, #10
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	4313      	orrs	r3, r2
 8008004:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	621a      	str	r2, [r3, #32]
}
 8008012:	bf00      	nop
 8008014:	371c      	adds	r7, #28
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0210 	bic.w	r2, r3, #16
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	031b      	lsls	r3, r3, #12
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008058:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	4313      	orrs	r3, r2
 8008062:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	621a      	str	r2, [r3, #32]
}
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr

0800807a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807a:	b480      	push	{r7}
 800807c:	b085      	sub	sp, #20
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008090:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008092:	683a      	ldr	r2, [r7, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4313      	orrs	r3, r2
 8008098:	f043 0307 	orr.w	r3, r3, #7
 800809c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	609a      	str	r2, [r3, #8]
}
 80080a4:	bf00      	nop
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bc80      	pop	{r7}
 80080ac:	4770      	bx	lr

080080ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080ae:	b480      	push	{r7}
 80080b0:	b087      	sub	sp, #28
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
 80080ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	021a      	lsls	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	4313      	orrs	r3, r2
 80080da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	609a      	str	r2, [r3, #8]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d101      	bne.n	8008104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008100:	2302      	movs	r3, #2
 8008102:	e046      	b.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2202      	movs	r2, #2
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800812a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a16      	ldr	r2, [pc, #88]	; (800819c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008150:	d009      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a12      	ldr	r2, [pc, #72]	; (80081a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a10      	ldr	r2, [pc, #64]	; (80081a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d10c      	bne.n	8008180 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800816c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	4313      	orrs	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr
 800819c:	40012c00 	.word	0x40012c00
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800

080081a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr

080081cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e042      	b.n	8008264 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d106      	bne.n	80081f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fc fc0a 	bl	8004a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2224      	movs	r2, #36	; 0x24
 80081fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800820e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fdc5 	bl	8008da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695a      	ldr	r2, [r3, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2220      	movs	r2, #32
 8008250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2220      	movs	r2, #32
 8008258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b08a      	sub	sp, #40	; 0x28
 8008270:	af02      	add	r7, sp, #8
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	603b      	str	r3, [r7, #0]
 8008278:	4613      	mov	r3, r2
 800827a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b20      	cmp	r3, #32
 800828a:	d16d      	bne.n	8008368 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_UART_Transmit+0x2c>
 8008292:	88fb      	ldrh	r3, [r7, #6]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d101      	bne.n	800829c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e066      	b.n	800836a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2200      	movs	r2, #0
 80082a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2221      	movs	r2, #33	; 0x21
 80082a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80082aa:	f7fc fdbb 	bl	8004e24 <HAL_GetTick>
 80082ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	88fa      	ldrh	r2, [r7, #6]
 80082ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c4:	d108      	bne.n	80082d8 <HAL_UART_Transmit+0x6c>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d104      	bne.n	80082d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e003      	b.n	80082e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082dc:	2300      	movs	r3, #0
 80082de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082e0:	e02a      	b.n	8008338 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2200      	movs	r2, #0
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 fb14 	bl	800891a <UART_WaitOnFlagUntilTimeout>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e036      	b.n	800836a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80082fc:	69fb      	ldr	r3, [r7, #28]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10b      	bne.n	800831a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	881b      	ldrh	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	3302      	adds	r3, #2
 8008316:	61bb      	str	r3, [r7, #24]
 8008318:	e007      	b.n	800832a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	3301      	adds	r3, #1
 8008328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800832e:	b29b      	uxth	r3, r3
 8008330:	3b01      	subs	r3, #1
 8008332:	b29a      	uxth	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1cf      	bne.n	80082e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2200      	movs	r2, #0
 800834a:	2140      	movs	r1, #64	; 0x40
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 fae4 	bl	800891a <UART_WaitOnFlagUntilTimeout>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8008358:	2303      	movs	r3, #3
 800835a:	e006      	b.n	800836a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2220      	movs	r2, #32
 8008360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	e000      	b.n	800836a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008368:	2302      	movs	r3, #2
  }
}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	4613      	mov	r3, r2
 800837e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b20      	cmp	r3, #32
 800838a:	d112      	bne.n	80083b2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d002      	beq.n	8008398 <HAL_UART_Receive_IT+0x26>
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e00b      	b.n	80083b4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80083a2:	88fb      	ldrh	r3, [r7, #6]
 80083a4:	461a      	mov	r2, r3
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f000 fb24 	bl	80089f6 <UART_Start_Receive_IT>
 80083ae:	4603      	mov	r3, r0
 80083b0:	e000      	b.n	80083b4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
  }
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b0ba      	sub	sp, #232	; 0xe8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80083ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f2:	f003 030f 	and.w	r3, r3, #15
 80083f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80083fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10f      	bne.n	8008422 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008406:	f003 0320 	and.w	r3, r3, #32
 800840a:	2b00      	cmp	r3, #0
 800840c:	d009      	beq.n	8008422 <HAL_UART_IRQHandler+0x66>
 800840e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fc01 	bl	8008c22 <UART_Receive_IT>
      return;
 8008420:	e25b      	b.n	80088da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008422:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80de 	beq.w	80085e8 <HAL_UART_IRQHandler+0x22c>
 800842c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d106      	bne.n	8008446 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800843c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80d1 	beq.w	80085e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00b      	beq.n	800846a <HAL_UART_IRQHandler+0xae>
 8008452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845a:	2b00      	cmp	r3, #0
 800845c:	d005      	beq.n	800846a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008462:	f043 0201 	orr.w	r2, r3, #1
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800846a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00b      	beq.n	800848e <HAL_UART_IRQHandler+0xd2>
 8008476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800847a:	f003 0301 	and.w	r3, r3, #1
 800847e:	2b00      	cmp	r3, #0
 8008480:	d005      	beq.n	800848e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008486:	f043 0202 	orr.w	r2, r3, #2
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800848e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008492:	f003 0302 	and.w	r3, r3, #2
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00b      	beq.n	80084b2 <HAL_UART_IRQHandler+0xf6>
 800849a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d005      	beq.n	80084b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	f043 0204 	orr.w	r2, r3, #4
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80084b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b6:	f003 0308 	and.w	r3, r3, #8
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d011      	beq.n	80084e2 <HAL_UART_IRQHandler+0x126>
 80084be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084c2:	f003 0320 	and.w	r3, r3, #32
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d105      	bne.n	80084d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80084ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d005      	beq.n	80084e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084da:	f043 0208 	orr.w	r2, r3, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 81f2 	beq.w	80088d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_UART_IRQHandler+0x14e>
 80084f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d002      	beq.n	800850a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 fb8c 	bl	8008c22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	bf14      	ite	ne
 8008518:	2301      	movne	r3, #1
 800851a:	2300      	moveq	r3, #0
 800851c:	b2db      	uxtb	r3, r3
 800851e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <HAL_UART_IRQHandler+0x17a>
 800852e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008532:	2b00      	cmp	r3, #0
 8008534:	d04f      	beq.n	80085d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa96 	bl	8008a68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	695b      	ldr	r3, [r3, #20]
 8008542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008546:	2b00      	cmp	r3, #0
 8008548:	d041      	beq.n	80085ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008554:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008568:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	3314      	adds	r3, #20
 8008572:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008576:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800857a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008582:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800858e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1d9      	bne.n	800854a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d013      	beq.n	80085c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a2:	4a7e      	ldr	r2, [pc, #504]	; (800879c <HAL_UART_IRQHandler+0x3e0>)
 80085a4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fd f9dc 	bl	8005968 <HAL_DMA_Abort_IT>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d016      	beq.n	80085e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80085c0:	4610      	mov	r0, r2
 80085c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	e00e      	b.n	80085e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f993 	bl	80088f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085cc:	e00a      	b.n	80085e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f98f 	bl	80088f2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085d4:	e006      	b.n	80085e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f98b 	bl	80088f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80085e2:	e175      	b.n	80088d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	bf00      	nop
    return;
 80085e6:	e173      	b.n	80088d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	f040 814f 	bne.w	8008890 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80085f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085f6:	f003 0310 	and.w	r3, r3, #16
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	f000 8148 	beq.w	8008890 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 8141 	beq.w	8008890 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800860e:	2300      	movs	r3, #0
 8008610:	60bb      	str	r3, [r7, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	60bb      	str	r3, [r7, #8]
 8008622:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80b6 	beq.w	80087a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008640:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008644:	2b00      	cmp	r3, #0
 8008646:	f000 8145 	beq.w	80088d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800864e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008652:	429a      	cmp	r2, r3
 8008654:	f080 813e 	bcs.w	80088d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800865e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	2b20      	cmp	r3, #32
 8008668:	f000 8088 	beq.w	800877c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008676:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800867a:	e853 3f00 	ldrex	r3, [r3]
 800867e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800868a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330c      	adds	r3, #12
 8008694:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008698:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800869c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086a8:	e841 2300 	strex	r3, r2, [r1]
 80086ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80086b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1d9      	bne.n	800866c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3314      	adds	r3, #20
 80086be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086c2:	e853 3f00 	ldrex	r3, [r3]
 80086c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80086c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086ca:	f023 0301 	bic.w	r3, r3, #1
 80086ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3314      	adds	r3, #20
 80086d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80086dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80086e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80086e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80086e8:	e841 2300 	strex	r3, r2, [r1]
 80086ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80086ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1e1      	bne.n	80086b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3314      	adds	r3, #20
 80086fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fe:	e853 3f00 	ldrex	r3, [r3]
 8008702:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008704:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800870a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3314      	adds	r3, #20
 8008714:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008718:	66fa      	str	r2, [r7, #108]	; 0x6c
 800871a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800871e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e3      	bne.n	80086f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	330c      	adds	r3, #12
 8008740:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800874a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874c:	f023 0310 	bic.w	r3, r3, #16
 8008750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	330c      	adds	r3, #12
 800875a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800875e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008760:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800876c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e3      	bne.n	800873a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008776:	4618      	mov	r0, r3
 8008778:	f7fd f8bb 	bl	80058f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2202      	movs	r2, #2
 8008780:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800878a:	b29b      	uxth	r3, r3
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	b29b      	uxth	r3, r3
 8008790:	4619      	mov	r1, r3
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f8b6 	bl	8008904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008798:	e09c      	b.n	80088d4 <HAL_UART_IRQHandler+0x518>
 800879a:	bf00      	nop
 800879c:	08008b2d 	.word	0x08008b2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 808e 	beq.w	80088d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80087bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8089 	beq.w	80088d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	330c      	adds	r3, #12
 80087cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80087ea:	647a      	str	r2, [r7, #68]	; 0x44
 80087ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087f2:	e841 2300 	strex	r3, r2, [r1]
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d1e3      	bne.n	80087c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3314      	adds	r3, #20
 8008804:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	623b      	str	r3, [r7, #32]
   return(result);
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	f023 0301 	bic.w	r3, r3, #1
 8008814:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	3314      	adds	r3, #20
 800881e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008822:	633a      	str	r2, [r7, #48]	; 0x30
 8008824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e3      	bne.n	80087fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2220      	movs	r2, #32
 800883a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	e853 3f00 	ldrex	r3, [r3]
 8008852:	60fb      	str	r3, [r7, #12]
   return(result);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0310 	bic.w	r3, r3, #16
 800885a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	330c      	adds	r3, #12
 8008864:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008868:	61fa      	str	r2, [r7, #28]
 800886a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	69b9      	ldr	r1, [r7, #24]
 800886e:	69fa      	ldr	r2, [r7, #28]
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	617b      	str	r3, [r7, #20]
   return(result);
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e3      	bne.n	8008844 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2202      	movs	r2, #2
 8008880:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f83b 	bl	8008904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800888e:	e023      	b.n	80088d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008898:	2b00      	cmp	r3, #0
 800889a:	d009      	beq.n	80088b0 <HAL_UART_IRQHandler+0x4f4>
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 f953 	bl	8008b54 <UART_Transmit_IT>
    return;
 80088ae:	e014      	b.n	80088da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80088b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <HAL_UART_IRQHandler+0x51e>
 80088bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d008      	beq.n	80088da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f992 	bl	8008bf2 <UART_EndTransmit_IT>
    return;
 80088ce:	e004      	b.n	80088da <HAL_UART_IRQHandler+0x51e>
    return;
 80088d0:	bf00      	nop
 80088d2:	e002      	b.n	80088da <HAL_UART_IRQHandler+0x51e>
      return;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <HAL_UART_IRQHandler+0x51e>
      return;
 80088d8:	bf00      	nop
  }
}
 80088da:	37e8      	adds	r7, #232	; 0xe8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr

080088f2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	bc80      	pop	{r7}
 8008902:	4770      	bx	lr

08008904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	460b      	mov	r3, r1
 800890e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	bc80      	pop	{r7}
 8008918:	4770      	bx	lr

0800891a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b090      	sub	sp, #64	; 0x40
 800891e:	af00      	add	r7, sp, #0
 8008920:	60f8      	str	r0, [r7, #12]
 8008922:	60b9      	str	r1, [r7, #8]
 8008924:	603b      	str	r3, [r7, #0]
 8008926:	4613      	mov	r3, r2
 8008928:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892a:	e050      	b.n	80089ce <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008932:	d04c      	beq.n	80089ce <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0x30>
 800893a:	f7fc fa73 	bl	8004e24 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008946:	429a      	cmp	r2, r3
 8008948:	d241      	bcs.n	80089ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	330c      	adds	r3, #12
 8008950:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	330c      	adds	r3, #12
 8008968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800896a:	637a      	str	r2, [r7, #52]	; 0x34
 800896c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008970:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e5      	bne.n	800894a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	3314      	adds	r3, #20
 8008984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	e853 3f00 	ldrex	r3, [r3]
 800898c:	613b      	str	r3, [r7, #16]
   return(result);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f023 0301 	bic.w	r3, r3, #1
 8008994:	63bb      	str	r3, [r7, #56]	; 0x38
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3314      	adds	r3, #20
 800899c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800899e:	623a      	str	r2, [r7, #32]
 80089a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a2:	69f9      	ldr	r1, [r7, #28]
 80089a4:	6a3a      	ldr	r2, [r7, #32]
 80089a6:	e841 2300 	strex	r3, r2, [r1]
 80089aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1e5      	bne.n	800897e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2220      	movs	r2, #32
 80089be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e00f      	b.n	80089ee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4013      	ands	r3, r2
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	429a      	cmp	r2, r3
 80089dc:	bf0c      	ite	eq
 80089de:	2301      	moveq	r3, #1
 80089e0:	2300      	movne	r3, #0
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	79fb      	ldrb	r3, [r7, #7]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d09f      	beq.n	800892c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3740      	adds	r7, #64	; 0x40
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	4613      	mov	r3, r2
 8008a02:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2222      	movs	r2, #34	; 0x22
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68da      	ldr	r2, [r3, #12]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	695a      	ldr	r2, [r3, #20]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f042 0220 	orr.w	r2, r2, #32
 8008a5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bc80      	pop	{r7}
 8008a66:	4770      	bx	lr

08008a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b095      	sub	sp, #84	; 0x54
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	330c      	adds	r3, #12
 8008a76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a7a:	e853 3f00 	ldrex	r3, [r3]
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a90:	643a      	str	r2, [r7, #64]	; 0x40
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a98:	e841 2300 	strex	r3, r2, [r1]
 8008a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e5      	bne.n	8008a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3314      	adds	r3, #20
 8008aaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	f023 0301 	bic.w	r3, r3, #1
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3314      	adds	r3, #20
 8008ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008acc:	e841 2300 	strex	r3, r2, [r1]
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d1e5      	bne.n	8008aa4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d119      	bne.n	8008b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	330c      	adds	r3, #12
 8008ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0310 	bic.w	r3, r3, #16
 8008af6:	647b      	str	r3, [r7, #68]	; 0x44
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b00:	61ba      	str	r2, [r7, #24]
 8008b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6979      	ldr	r1, [r7, #20]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b22:	bf00      	nop
 8008b24:	3754      	adds	r7, #84	; 0x54
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bc80      	pop	{r7}
 8008b2a:	4770      	bx	lr

08008b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2200      	movs	r2, #0
 8008b44:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff fed3 	bl	80088f2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b21      	cmp	r3, #33	; 0x21
 8008b66:	d13e      	bne.n	8008be6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b70:	d114      	bne.n	8008b9c <UART_Transmit_IT+0x48>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d110      	bne.n	8008b9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	881b      	ldrh	r3, [r3, #0]
 8008b84:	461a      	mov	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	1c9a      	adds	r2, r3, #2
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	621a      	str	r2, [r3, #32]
 8008b9a:	e008      	b.n	8008bae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a1b      	ldr	r3, [r3, #32]
 8008ba0:	1c59      	adds	r1, r3, #1
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6211      	str	r1, [r2, #32]
 8008ba6:	781a      	ldrb	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4619      	mov	r1, r3
 8008bbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10f      	bne.n	8008be2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	e000      	b.n	8008be8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008be6:	2302      	movs	r3, #2
  }
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bc80      	pop	{r7}
 8008bf0:	4770      	bx	lr

08008bf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68da      	ldr	r2, [r3, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7ff fe64 	bl	80088e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b08c      	sub	sp, #48	; 0x30
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b22      	cmp	r3, #34	; 0x22
 8008c34:	f040 80ae 	bne.w	8008d94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c40:	d117      	bne.n	8008c72 <UART_Receive_IT+0x50>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d113      	bne.n	8008c72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c6a:	1c9a      	adds	r2, r3, #2
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8008c70:	e026      	b.n	8008cc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c84:	d007      	beq.n	8008c96 <UART_Receive_IT+0x74>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <UART_Receive_IT+0x82>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d106      	bne.n	8008ca4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca0:	701a      	strb	r2, [r3, #0]
 8008ca2:	e008      	b.n	8008cb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb0:	b2da      	uxtb	r2, r3
 8008cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d15d      	bne.n	8008d90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0220 	bic.w	r2, r2, #32
 8008ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68da      	ldr	r2, [r3, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	695a      	ldr	r2, [r3, #20]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0201 	bic.w	r2, r2, #1
 8008d02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d135      	bne.n	8008d86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	330c      	adds	r3, #12
 8008d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f023 0310 	bic.w	r3, r3, #16
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d40:	623a      	str	r2, [r7, #32]
 8008d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	6a3a      	ldr	r2, [r7, #32]
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e5      	bne.n	8008d20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0310 	and.w	r3, r3, #16
 8008d5e:	2b10      	cmp	r3, #16
 8008d60:	d10a      	bne.n	8008d78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fdc0 	bl	8008904 <HAL_UARTEx_RxEventCallback>
 8008d84:	e002      	b.n	8008d8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7fb fa00 	bl	800418c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e002      	b.n	8008d96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	e000      	b.n	8008d96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
  }
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3730      	adds	r7, #48	; 0x30
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	431a      	orrs	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008dda:	f023 030c 	bic.w	r3, r3, #12
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	68b9      	ldr	r1, [r7, #8]
 8008de4:	430b      	orrs	r3, r1
 8008de6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a2c      	ldr	r2, [pc, #176]	; (8008eb4 <UART_SetConfig+0x114>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d103      	bne.n	8008e10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008e08:	f7fe fbfa 	bl	8007600 <HAL_RCC_GetPCLK2Freq>
 8008e0c:	60f8      	str	r0, [r7, #12]
 8008e0e:	e002      	b.n	8008e16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008e10:	f7fe fbe2 	bl	80075d8 <HAL_RCC_GetPCLK1Freq>
 8008e14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009a      	lsls	r2, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	009b      	lsls	r3, r3, #2
 8008e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e2c:	4a22      	ldr	r2, [pc, #136]	; (8008eb8 <UART_SetConfig+0x118>)
 8008e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e32:	095b      	lsrs	r3, r3, #5
 8008e34:	0119      	lsls	r1, r3, #4
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	009a      	lsls	r2, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e4c:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <UART_SetConfig+0x118>)
 8008e4e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e52:	095b      	lsrs	r3, r3, #5
 8008e54:	2064      	movs	r0, #100	; 0x64
 8008e56:	fb00 f303 	mul.w	r3, r0, r3
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	3332      	adds	r3, #50	; 0x32
 8008e60:	4a15      	ldr	r2, [pc, #84]	; (8008eb8 <UART_SetConfig+0x118>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e6c:	4419      	add	r1, r3
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4613      	mov	r3, r2
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	009a      	lsls	r2, r3, #2
 8008e78:	441a      	add	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e84:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <UART_SetConfig+0x118>)
 8008e86:	fba3 0302 	umull	r0, r3, r3, r2
 8008e8a:	095b      	lsrs	r3, r3, #5
 8008e8c:	2064      	movs	r0, #100	; 0x64
 8008e8e:	fb00 f303 	mul.w	r3, r0, r3
 8008e92:	1ad3      	subs	r3, r2, r3
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	3332      	adds	r3, #50	; 0x32
 8008e98:	4a07      	ldr	r2, [pc, #28]	; (8008eb8 <UART_SetConfig+0x118>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	095b      	lsrs	r3, r3, #5
 8008ea0:	f003 020f 	and.w	r2, r3, #15
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008eac:	bf00      	nop
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	40013800 	.word	0x40013800
 8008eb8:	51eb851f 	.word	0x51eb851f

08008ebc <atoi>:
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	f000 b880 	b.w	8008fc4 <strtol>

08008ec4 <_strtol_l.constprop.0>:
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eca:	4686      	mov	lr, r0
 8008ecc:	4690      	mov	r8, r2
 8008ece:	d001      	beq.n	8008ed4 <_strtol_l.constprop.0+0x10>
 8008ed0:	2b24      	cmp	r3, #36	; 0x24
 8008ed2:	d906      	bls.n	8008ee2 <_strtol_l.constprop.0+0x1e>
 8008ed4:	f001 f888 	bl	8009fe8 <__errno>
 8008ed8:	2316      	movs	r3, #22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	2000      	movs	r0, #0
 8008ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee2:	460d      	mov	r5, r1
 8008ee4:	4835      	ldr	r0, [pc, #212]	; (8008fbc <_strtol_l.constprop.0+0xf8>)
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008eec:	5d06      	ldrb	r6, [r0, r4]
 8008eee:	f016 0608 	ands.w	r6, r6, #8
 8008ef2:	d1f8      	bne.n	8008ee6 <_strtol_l.constprop.0+0x22>
 8008ef4:	2c2d      	cmp	r4, #45	; 0x2d
 8008ef6:	d12e      	bne.n	8008f56 <_strtol_l.constprop.0+0x92>
 8008ef8:	2601      	movs	r6, #1
 8008efa:	782c      	ldrb	r4, [r5, #0]
 8008efc:	1c95      	adds	r5, r2, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d057      	beq.n	8008fb2 <_strtol_l.constprop.0+0xee>
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	d109      	bne.n	8008f1a <_strtol_l.constprop.0+0x56>
 8008f06:	2c30      	cmp	r4, #48	; 0x30
 8008f08:	d107      	bne.n	8008f1a <_strtol_l.constprop.0+0x56>
 8008f0a:	782a      	ldrb	r2, [r5, #0]
 8008f0c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008f10:	2a58      	cmp	r2, #88	; 0x58
 8008f12:	d149      	bne.n	8008fa8 <_strtol_l.constprop.0+0xe4>
 8008f14:	2310      	movs	r3, #16
 8008f16:	786c      	ldrb	r4, [r5, #1]
 8008f18:	3502      	adds	r5, #2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008f20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f24:	fbbc f9f3 	udiv	r9, ip, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f2e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008f32:	2f09      	cmp	r7, #9
 8008f34:	d814      	bhi.n	8008f60 <_strtol_l.constprop.0+0x9c>
 8008f36:	463c      	mov	r4, r7
 8008f38:	42a3      	cmp	r3, r4
 8008f3a:	dd20      	ble.n	8008f7e <_strtol_l.constprop.0+0xba>
 8008f3c:	1c57      	adds	r7, r2, #1
 8008f3e:	d007      	beq.n	8008f50 <_strtol_l.constprop.0+0x8c>
 8008f40:	4581      	cmp	r9, r0
 8008f42:	d319      	bcc.n	8008f78 <_strtol_l.constprop.0+0xb4>
 8008f44:	d101      	bne.n	8008f4a <_strtol_l.constprop.0+0x86>
 8008f46:	45a2      	cmp	sl, r4
 8008f48:	db16      	blt.n	8008f78 <_strtol_l.constprop.0+0xb4>
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	fb00 4003 	mla	r0, r0, r3, r4
 8008f50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f54:	e7eb      	b.n	8008f2e <_strtol_l.constprop.0+0x6a>
 8008f56:	2c2b      	cmp	r4, #43	; 0x2b
 8008f58:	bf04      	itt	eq
 8008f5a:	782c      	ldrbeq	r4, [r5, #0]
 8008f5c:	1c95      	addeq	r5, r2, #2
 8008f5e:	e7ce      	b.n	8008efe <_strtol_l.constprop.0+0x3a>
 8008f60:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008f64:	2f19      	cmp	r7, #25
 8008f66:	d801      	bhi.n	8008f6c <_strtol_l.constprop.0+0xa8>
 8008f68:	3c37      	subs	r4, #55	; 0x37
 8008f6a:	e7e5      	b.n	8008f38 <_strtol_l.constprop.0+0x74>
 8008f6c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008f70:	2f19      	cmp	r7, #25
 8008f72:	d804      	bhi.n	8008f7e <_strtol_l.constprop.0+0xba>
 8008f74:	3c57      	subs	r4, #87	; 0x57
 8008f76:	e7df      	b.n	8008f38 <_strtol_l.constprop.0+0x74>
 8008f78:	f04f 32ff 	mov.w	r2, #4294967295
 8008f7c:	e7e8      	b.n	8008f50 <_strtol_l.constprop.0+0x8c>
 8008f7e:	1c53      	adds	r3, r2, #1
 8008f80:	d108      	bne.n	8008f94 <_strtol_l.constprop.0+0xd0>
 8008f82:	2322      	movs	r3, #34	; 0x22
 8008f84:	4660      	mov	r0, ip
 8008f86:	f8ce 3000 	str.w	r3, [lr]
 8008f8a:	f1b8 0f00 	cmp.w	r8, #0
 8008f8e:	d0a6      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008f90:	1e69      	subs	r1, r5, #1
 8008f92:	e006      	b.n	8008fa2 <_strtol_l.constprop.0+0xde>
 8008f94:	b106      	cbz	r6, 8008f98 <_strtol_l.constprop.0+0xd4>
 8008f96:	4240      	negs	r0, r0
 8008f98:	f1b8 0f00 	cmp.w	r8, #0
 8008f9c:	d09f      	beq.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008f9e:	2a00      	cmp	r2, #0
 8008fa0:	d1f6      	bne.n	8008f90 <_strtol_l.constprop.0+0xcc>
 8008fa2:	f8c8 1000 	str.w	r1, [r8]
 8008fa6:	e79a      	b.n	8008ede <_strtol_l.constprop.0+0x1a>
 8008fa8:	2430      	movs	r4, #48	; 0x30
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1b5      	bne.n	8008f1a <_strtol_l.constprop.0+0x56>
 8008fae:	2308      	movs	r3, #8
 8008fb0:	e7b3      	b.n	8008f1a <_strtol_l.constprop.0+0x56>
 8008fb2:	2c30      	cmp	r4, #48	; 0x30
 8008fb4:	d0a9      	beq.n	8008f0a <_strtol_l.constprop.0+0x46>
 8008fb6:	230a      	movs	r3, #10
 8008fb8:	e7af      	b.n	8008f1a <_strtol_l.constprop.0+0x56>
 8008fba:	bf00      	nop
 8008fbc:	0800da8b 	.word	0x0800da8b

08008fc0 <_strtol_r>:
 8008fc0:	f7ff bf80 	b.w	8008ec4 <_strtol_l.constprop.0>

08008fc4 <strtol>:
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	460a      	mov	r2, r1
 8008fc8:	4601      	mov	r1, r0
 8008fca:	4802      	ldr	r0, [pc, #8]	; (8008fd4 <strtol+0x10>)
 8008fcc:	6800      	ldr	r0, [r0, #0]
 8008fce:	f7ff bf79 	b.w	8008ec4 <_strtol_l.constprop.0>
 8008fd2:	bf00      	nop
 8008fd4:	20000068 	.word	0x20000068

08008fd8 <__cvt>:
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fde:	461f      	mov	r7, r3
 8008fe0:	bfbb      	ittet	lt
 8008fe2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008fe6:	461f      	movlt	r7, r3
 8008fe8:	2300      	movge	r3, #0
 8008fea:	232d      	movlt	r3, #45	; 0x2d
 8008fec:	b088      	sub	sp, #32
 8008fee:	4614      	mov	r4, r2
 8008ff0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008ff2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008ff4:	7013      	strb	r3, [r2, #0]
 8008ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ff8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008ffc:	f023 0820 	bic.w	r8, r3, #32
 8009000:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009004:	d005      	beq.n	8009012 <__cvt+0x3a>
 8009006:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800900a:	d100      	bne.n	800900e <__cvt+0x36>
 800900c:	3501      	adds	r5, #1
 800900e:	2302      	movs	r3, #2
 8009010:	e000      	b.n	8009014 <__cvt+0x3c>
 8009012:	2303      	movs	r3, #3
 8009014:	aa07      	add	r2, sp, #28
 8009016:	9204      	str	r2, [sp, #16]
 8009018:	aa06      	add	r2, sp, #24
 800901a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800901e:	e9cd 3500 	strd	r3, r5, [sp]
 8009022:	4622      	mov	r2, r4
 8009024:	463b      	mov	r3, r7
 8009026:	f001 f8ab 	bl	800a180 <_dtoa_r>
 800902a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800902e:	4606      	mov	r6, r0
 8009030:	d102      	bne.n	8009038 <__cvt+0x60>
 8009032:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009034:	07db      	lsls	r3, r3, #31
 8009036:	d522      	bpl.n	800907e <__cvt+0xa6>
 8009038:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800903c:	eb06 0905 	add.w	r9, r6, r5
 8009040:	d110      	bne.n	8009064 <__cvt+0x8c>
 8009042:	7833      	ldrb	r3, [r6, #0]
 8009044:	2b30      	cmp	r3, #48	; 0x30
 8009046:	d10a      	bne.n	800905e <__cvt+0x86>
 8009048:	2200      	movs	r2, #0
 800904a:	2300      	movs	r3, #0
 800904c:	4620      	mov	r0, r4
 800904e:	4639      	mov	r1, r7
 8009050:	f7f7 fcaa 	bl	80009a8 <__aeabi_dcmpeq>
 8009054:	b918      	cbnz	r0, 800905e <__cvt+0x86>
 8009056:	f1c5 0501 	rsb	r5, r5, #1
 800905a:	f8ca 5000 	str.w	r5, [sl]
 800905e:	f8da 3000 	ldr.w	r3, [sl]
 8009062:	4499      	add	r9, r3
 8009064:	2200      	movs	r2, #0
 8009066:	2300      	movs	r3, #0
 8009068:	4620      	mov	r0, r4
 800906a:	4639      	mov	r1, r7
 800906c:	f7f7 fc9c 	bl	80009a8 <__aeabi_dcmpeq>
 8009070:	b108      	cbz	r0, 8009076 <__cvt+0x9e>
 8009072:	f8cd 901c 	str.w	r9, [sp, #28]
 8009076:	2230      	movs	r2, #48	; 0x30
 8009078:	9b07      	ldr	r3, [sp, #28]
 800907a:	454b      	cmp	r3, r9
 800907c:	d307      	bcc.n	800908e <__cvt+0xb6>
 800907e:	4630      	mov	r0, r6
 8009080:	9b07      	ldr	r3, [sp, #28]
 8009082:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009084:	1b9b      	subs	r3, r3, r6
 8009086:	6013      	str	r3, [r2, #0]
 8009088:	b008      	add	sp, #32
 800908a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800908e:	1c59      	adds	r1, r3, #1
 8009090:	9107      	str	r1, [sp, #28]
 8009092:	701a      	strb	r2, [r3, #0]
 8009094:	e7f0      	b.n	8009078 <__cvt+0xa0>

08009096 <__exponent>:
 8009096:	4603      	mov	r3, r0
 8009098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800909a:	2900      	cmp	r1, #0
 800909c:	f803 2b02 	strb.w	r2, [r3], #2
 80090a0:	bfb6      	itet	lt
 80090a2:	222d      	movlt	r2, #45	; 0x2d
 80090a4:	222b      	movge	r2, #43	; 0x2b
 80090a6:	4249      	neglt	r1, r1
 80090a8:	2909      	cmp	r1, #9
 80090aa:	7042      	strb	r2, [r0, #1]
 80090ac:	dd2a      	ble.n	8009104 <__exponent+0x6e>
 80090ae:	f10d 0207 	add.w	r2, sp, #7
 80090b2:	4617      	mov	r7, r2
 80090b4:	260a      	movs	r6, #10
 80090b6:	fb91 f5f6 	sdiv	r5, r1, r6
 80090ba:	4694      	mov	ip, r2
 80090bc:	fb06 1415 	mls	r4, r6, r5, r1
 80090c0:	3430      	adds	r4, #48	; 0x30
 80090c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80090c6:	460c      	mov	r4, r1
 80090c8:	2c63      	cmp	r4, #99	; 0x63
 80090ca:	4629      	mov	r1, r5
 80090cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80090d0:	dcf1      	bgt.n	80090b6 <__exponent+0x20>
 80090d2:	3130      	adds	r1, #48	; 0x30
 80090d4:	f1ac 0402 	sub.w	r4, ip, #2
 80090d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80090dc:	4622      	mov	r2, r4
 80090de:	1c41      	adds	r1, r0, #1
 80090e0:	42ba      	cmp	r2, r7
 80090e2:	d30a      	bcc.n	80090fa <__exponent+0x64>
 80090e4:	f10d 0209 	add.w	r2, sp, #9
 80090e8:	eba2 020c 	sub.w	r2, r2, ip
 80090ec:	42bc      	cmp	r4, r7
 80090ee:	bf88      	it	hi
 80090f0:	2200      	movhi	r2, #0
 80090f2:	4413      	add	r3, r2
 80090f4:	1a18      	subs	r0, r3, r0
 80090f6:	b003      	add	sp, #12
 80090f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009102:	e7ed      	b.n	80090e0 <__exponent+0x4a>
 8009104:	2330      	movs	r3, #48	; 0x30
 8009106:	3130      	adds	r1, #48	; 0x30
 8009108:	7083      	strb	r3, [r0, #2]
 800910a:	70c1      	strb	r1, [r0, #3]
 800910c:	1d03      	adds	r3, r0, #4
 800910e:	e7f1      	b.n	80090f4 <__exponent+0x5e>

08009110 <_printf_float>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	b091      	sub	sp, #68	; 0x44
 8009116:	460c      	mov	r4, r1
 8009118:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800911c:	4616      	mov	r6, r2
 800911e:	461f      	mov	r7, r3
 8009120:	4605      	mov	r5, r0
 8009122:	f000 ff17 	bl	8009f54 <_localeconv_r>
 8009126:	6803      	ldr	r3, [r0, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	9309      	str	r3, [sp, #36]	; 0x24
 800912c:	f7f7 f810 	bl	8000150 <strlen>
 8009130:	2300      	movs	r3, #0
 8009132:	930e      	str	r3, [sp, #56]	; 0x38
 8009134:	f8d8 3000 	ldr.w	r3, [r8]
 8009138:	900a      	str	r0, [sp, #40]	; 0x28
 800913a:	3307      	adds	r3, #7
 800913c:	f023 0307 	bic.w	r3, r3, #7
 8009140:	f103 0208 	add.w	r2, r3, #8
 8009144:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009148:	f8d4 b000 	ldr.w	fp, [r4]
 800914c:	f8c8 2000 	str.w	r2, [r8]
 8009150:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009154:	4652      	mov	r2, sl
 8009156:	4643      	mov	r3, r8
 8009158:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800915c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009160:	930b      	str	r3, [sp, #44]	; 0x2c
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	4650      	mov	r0, sl
 8009168:	4b9c      	ldr	r3, [pc, #624]	; (80093dc <_printf_float+0x2cc>)
 800916a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800916c:	f7f7 fc4e 	bl	8000a0c <__aeabi_dcmpun>
 8009170:	bb70      	cbnz	r0, 80091d0 <_printf_float+0xc0>
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	4650      	mov	r0, sl
 8009178:	4b98      	ldr	r3, [pc, #608]	; (80093dc <_printf_float+0x2cc>)
 800917a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800917c:	f7f7 fc28 	bl	80009d0 <__aeabi_dcmple>
 8009180:	bb30      	cbnz	r0, 80091d0 <_printf_float+0xc0>
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	4650      	mov	r0, sl
 8009188:	4641      	mov	r1, r8
 800918a:	f7f7 fc17 	bl	80009bc <__aeabi_dcmplt>
 800918e:	b110      	cbz	r0, 8009196 <_printf_float+0x86>
 8009190:	232d      	movs	r3, #45	; 0x2d
 8009192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009196:	4a92      	ldr	r2, [pc, #584]	; (80093e0 <_printf_float+0x2d0>)
 8009198:	4b92      	ldr	r3, [pc, #584]	; (80093e4 <_printf_float+0x2d4>)
 800919a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800919e:	bf94      	ite	ls
 80091a0:	4690      	movls	r8, r2
 80091a2:	4698      	movhi	r8, r3
 80091a4:	2303      	movs	r3, #3
 80091a6:	f04f 0a00 	mov.w	sl, #0
 80091aa:	6123      	str	r3, [r4, #16]
 80091ac:	f02b 0304 	bic.w	r3, fp, #4
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	4633      	mov	r3, r6
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	9700      	str	r7, [sp, #0]
 80091ba:	aa0f      	add	r2, sp, #60	; 0x3c
 80091bc:	f000 f9d6 	bl	800956c <_printf_common>
 80091c0:	3001      	adds	r0, #1
 80091c2:	f040 8090 	bne.w	80092e6 <_printf_float+0x1d6>
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	b011      	add	sp, #68	; 0x44
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	4652      	mov	r2, sl
 80091d2:	4643      	mov	r3, r8
 80091d4:	4650      	mov	r0, sl
 80091d6:	4641      	mov	r1, r8
 80091d8:	f7f7 fc18 	bl	8000a0c <__aeabi_dcmpun>
 80091dc:	b148      	cbz	r0, 80091f2 <_printf_float+0xe2>
 80091de:	f1b8 0f00 	cmp.w	r8, #0
 80091e2:	bfb8      	it	lt
 80091e4:	232d      	movlt	r3, #45	; 0x2d
 80091e6:	4a80      	ldr	r2, [pc, #512]	; (80093e8 <_printf_float+0x2d8>)
 80091e8:	bfb8      	it	lt
 80091ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091ee:	4b7f      	ldr	r3, [pc, #508]	; (80093ec <_printf_float+0x2dc>)
 80091f0:	e7d3      	b.n	800919a <_printf_float+0x8a>
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	d142      	bne.n	8009282 <_printf_float+0x172>
 80091fc:	2306      	movs	r3, #6
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	9206      	str	r2, [sp, #24]
 8009204:	aa0e      	add	r2, sp, #56	; 0x38
 8009206:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800920a:	aa0d      	add	r2, sp, #52	; 0x34
 800920c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009210:	9203      	str	r2, [sp, #12]
 8009212:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009216:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	6863      	ldr	r3, [r4, #4]
 800921e:	4652      	mov	r2, sl
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4628      	mov	r0, r5
 8009224:	4643      	mov	r3, r8
 8009226:	910b      	str	r1, [sp, #44]	; 0x2c
 8009228:	f7ff fed6 	bl	8008fd8 <__cvt>
 800922c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800922e:	4680      	mov	r8, r0
 8009230:	2947      	cmp	r1, #71	; 0x47
 8009232:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009234:	d108      	bne.n	8009248 <_printf_float+0x138>
 8009236:	1cc8      	adds	r0, r1, #3
 8009238:	db02      	blt.n	8009240 <_printf_float+0x130>
 800923a:	6863      	ldr	r3, [r4, #4]
 800923c:	4299      	cmp	r1, r3
 800923e:	dd40      	ble.n	80092c2 <_printf_float+0x1b2>
 8009240:	f1a9 0902 	sub.w	r9, r9, #2
 8009244:	fa5f f989 	uxtb.w	r9, r9
 8009248:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800924c:	d81f      	bhi.n	800928e <_printf_float+0x17e>
 800924e:	464a      	mov	r2, r9
 8009250:	3901      	subs	r1, #1
 8009252:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009256:	910d      	str	r1, [sp, #52]	; 0x34
 8009258:	f7ff ff1d 	bl	8009096 <__exponent>
 800925c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925e:	4682      	mov	sl, r0
 8009260:	1813      	adds	r3, r2, r0
 8009262:	2a01      	cmp	r2, #1
 8009264:	6123      	str	r3, [r4, #16]
 8009266:	dc02      	bgt.n	800926e <_printf_float+0x15e>
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	07d2      	lsls	r2, r2, #31
 800926c:	d501      	bpl.n	8009272 <_printf_float+0x162>
 800926e:	3301      	adds	r3, #1
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009276:	2b00      	cmp	r3, #0
 8009278:	d09b      	beq.n	80091b2 <_printf_float+0xa2>
 800927a:	232d      	movs	r3, #45	; 0x2d
 800927c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009280:	e797      	b.n	80091b2 <_printf_float+0xa2>
 8009282:	2947      	cmp	r1, #71	; 0x47
 8009284:	d1bc      	bne.n	8009200 <_printf_float+0xf0>
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1ba      	bne.n	8009200 <_printf_float+0xf0>
 800928a:	2301      	movs	r3, #1
 800928c:	e7b7      	b.n	80091fe <_printf_float+0xee>
 800928e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009292:	d118      	bne.n	80092c6 <_printf_float+0x1b6>
 8009294:	2900      	cmp	r1, #0
 8009296:	6863      	ldr	r3, [r4, #4]
 8009298:	dd0b      	ble.n	80092b2 <_printf_float+0x1a2>
 800929a:	6121      	str	r1, [r4, #16]
 800929c:	b913      	cbnz	r3, 80092a4 <_printf_float+0x194>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	07d0      	lsls	r0, r2, #31
 80092a2:	d502      	bpl.n	80092aa <_printf_float+0x19a>
 80092a4:	3301      	adds	r3, #1
 80092a6:	440b      	add	r3, r1
 80092a8:	6123      	str	r3, [r4, #16]
 80092aa:	f04f 0a00 	mov.w	sl, #0
 80092ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80092b0:	e7df      	b.n	8009272 <_printf_float+0x162>
 80092b2:	b913      	cbnz	r3, 80092ba <_printf_float+0x1aa>
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	07d2      	lsls	r2, r2, #31
 80092b8:	d501      	bpl.n	80092be <_printf_float+0x1ae>
 80092ba:	3302      	adds	r3, #2
 80092bc:	e7f4      	b.n	80092a8 <_printf_float+0x198>
 80092be:	2301      	movs	r3, #1
 80092c0:	e7f2      	b.n	80092a8 <_printf_float+0x198>
 80092c2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80092c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092c8:	4299      	cmp	r1, r3
 80092ca:	db05      	blt.n	80092d8 <_printf_float+0x1c8>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	6121      	str	r1, [r4, #16]
 80092d0:	07d8      	lsls	r0, r3, #31
 80092d2:	d5ea      	bpl.n	80092aa <_printf_float+0x19a>
 80092d4:	1c4b      	adds	r3, r1, #1
 80092d6:	e7e7      	b.n	80092a8 <_printf_float+0x198>
 80092d8:	2900      	cmp	r1, #0
 80092da:	bfcc      	ite	gt
 80092dc:	2201      	movgt	r2, #1
 80092de:	f1c1 0202 	rsble	r2, r1, #2
 80092e2:	4413      	add	r3, r2
 80092e4:	e7e0      	b.n	80092a8 <_printf_float+0x198>
 80092e6:	6823      	ldr	r3, [r4, #0]
 80092e8:	055a      	lsls	r2, r3, #21
 80092ea:	d407      	bmi.n	80092fc <_printf_float+0x1ec>
 80092ec:	6923      	ldr	r3, [r4, #16]
 80092ee:	4642      	mov	r2, r8
 80092f0:	4631      	mov	r1, r6
 80092f2:	4628      	mov	r0, r5
 80092f4:	47b8      	blx	r7
 80092f6:	3001      	adds	r0, #1
 80092f8:	d12b      	bne.n	8009352 <_printf_float+0x242>
 80092fa:	e764      	b.n	80091c6 <_printf_float+0xb6>
 80092fc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009300:	f240 80dd 	bls.w	80094be <_printf_float+0x3ae>
 8009304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009308:	2200      	movs	r2, #0
 800930a:	2300      	movs	r3, #0
 800930c:	f7f7 fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8009310:	2800      	cmp	r0, #0
 8009312:	d033      	beq.n	800937c <_printf_float+0x26c>
 8009314:	2301      	movs	r3, #1
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	4a35      	ldr	r2, [pc, #212]	; (80093f0 <_printf_float+0x2e0>)
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	f43f af51 	beq.w	80091c6 <_printf_float+0xb6>
 8009324:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009328:	429a      	cmp	r2, r3
 800932a:	db02      	blt.n	8009332 <_printf_float+0x222>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	07d8      	lsls	r0, r3, #31
 8009330:	d50f      	bpl.n	8009352 <_printf_float+0x242>
 8009332:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f af42 	beq.w	80091c6 <_printf_float+0xb6>
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	f104 091a 	add.w	r9, r4, #26
 800934a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800934c:	3b01      	subs	r3, #1
 800934e:	4543      	cmp	r3, r8
 8009350:	dc09      	bgt.n	8009366 <_printf_float+0x256>
 8009352:	6823      	ldr	r3, [r4, #0]
 8009354:	079b      	lsls	r3, r3, #30
 8009356:	f100 8104 	bmi.w	8009562 <_printf_float+0x452>
 800935a:	68e0      	ldr	r0, [r4, #12]
 800935c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800935e:	4298      	cmp	r0, r3
 8009360:	bfb8      	it	lt
 8009362:	4618      	movlt	r0, r3
 8009364:	e731      	b.n	80091ca <_printf_float+0xba>
 8009366:	2301      	movs	r3, #1
 8009368:	464a      	mov	r2, r9
 800936a:	4631      	mov	r1, r6
 800936c:	4628      	mov	r0, r5
 800936e:	47b8      	blx	r7
 8009370:	3001      	adds	r0, #1
 8009372:	f43f af28 	beq.w	80091c6 <_printf_float+0xb6>
 8009376:	f108 0801 	add.w	r8, r8, #1
 800937a:	e7e6      	b.n	800934a <_printf_float+0x23a>
 800937c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc38      	bgt.n	80093f4 <_printf_float+0x2e4>
 8009382:	2301      	movs	r3, #1
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	4a19      	ldr	r2, [pc, #100]	; (80093f0 <_printf_float+0x2e0>)
 800938a:	47b8      	blx	r7
 800938c:	3001      	adds	r0, #1
 800938e:	f43f af1a 	beq.w	80091c6 <_printf_float+0xb6>
 8009392:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009396:	4313      	orrs	r3, r2
 8009398:	d102      	bne.n	80093a0 <_printf_float+0x290>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	07d9      	lsls	r1, r3, #31
 800939e:	d5d8      	bpl.n	8009352 <_printf_float+0x242>
 80093a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f af0b 	beq.w	80091c6 <_printf_float+0xb6>
 80093b0:	f04f 0900 	mov.w	r9, #0
 80093b4:	f104 0a1a 	add.w	sl, r4, #26
 80093b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093ba:	425b      	negs	r3, r3
 80093bc:	454b      	cmp	r3, r9
 80093be:	dc01      	bgt.n	80093c4 <_printf_float+0x2b4>
 80093c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093c2:	e794      	b.n	80092ee <_printf_float+0x1de>
 80093c4:	2301      	movs	r3, #1
 80093c6:	4652      	mov	r2, sl
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	f43f aef9 	beq.w	80091c6 <_printf_float+0xb6>
 80093d4:	f109 0901 	add.w	r9, r9, #1
 80093d8:	e7ee      	b.n	80093b8 <_printf_float+0x2a8>
 80093da:	bf00      	nop
 80093dc:	7fefffff 	.word	0x7fefffff
 80093e0:	0800db8b 	.word	0x0800db8b
 80093e4:	0800db8f 	.word	0x0800db8f
 80093e8:	0800db93 	.word	0x0800db93
 80093ec:	0800db97 	.word	0x0800db97
 80093f0:	0800db9b 	.word	0x0800db9b
 80093f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bfa8      	it	ge
 80093fc:	461a      	movge	r2, r3
 80093fe:	2a00      	cmp	r2, #0
 8009400:	4691      	mov	r9, r2
 8009402:	dc37      	bgt.n	8009474 <_printf_float+0x364>
 8009404:	f04f 0b00 	mov.w	fp, #0
 8009408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800940c:	f104 021a 	add.w	r2, r4, #26
 8009410:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009414:	ebaa 0309 	sub.w	r3, sl, r9
 8009418:	455b      	cmp	r3, fp
 800941a:	dc33      	bgt.n	8009484 <_printf_float+0x374>
 800941c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009420:	429a      	cmp	r2, r3
 8009422:	db3b      	blt.n	800949c <_printf_float+0x38c>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	d438      	bmi.n	800949c <_printf_float+0x38c>
 800942a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800942e:	eba2 0903 	sub.w	r9, r2, r3
 8009432:	eba2 020a 	sub.w	r2, r2, sl
 8009436:	4591      	cmp	r9, r2
 8009438:	bfa8      	it	ge
 800943a:	4691      	movge	r9, r2
 800943c:	f1b9 0f00 	cmp.w	r9, #0
 8009440:	dc34      	bgt.n	80094ac <_printf_float+0x39c>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800944a:	f104 0a1a 	add.w	sl, r4, #26
 800944e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	eba3 0309 	sub.w	r3, r3, r9
 8009458:	4543      	cmp	r3, r8
 800945a:	f77f af7a 	ble.w	8009352 <_printf_float+0x242>
 800945e:	2301      	movs	r3, #1
 8009460:	4652      	mov	r2, sl
 8009462:	4631      	mov	r1, r6
 8009464:	4628      	mov	r0, r5
 8009466:	47b8      	blx	r7
 8009468:	3001      	adds	r0, #1
 800946a:	f43f aeac 	beq.w	80091c6 <_printf_float+0xb6>
 800946e:	f108 0801 	add.w	r8, r8, #1
 8009472:	e7ec      	b.n	800944e <_printf_float+0x33e>
 8009474:	4613      	mov	r3, r2
 8009476:	4631      	mov	r1, r6
 8009478:	4642      	mov	r2, r8
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	d1c0      	bne.n	8009404 <_printf_float+0x2f4>
 8009482:	e6a0      	b.n	80091c6 <_printf_float+0xb6>
 8009484:	2301      	movs	r3, #1
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	920b      	str	r2, [sp, #44]	; 0x2c
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f ae99 	beq.w	80091c6 <_printf_float+0xb6>
 8009494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009496:	f10b 0b01 	add.w	fp, fp, #1
 800949a:	e7b9      	b.n	8009410 <_printf_float+0x300>
 800949c:	4631      	mov	r1, r6
 800949e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094a2:	4628      	mov	r0, r5
 80094a4:	47b8      	blx	r7
 80094a6:	3001      	adds	r0, #1
 80094a8:	d1bf      	bne.n	800942a <_printf_float+0x31a>
 80094aa:	e68c      	b.n	80091c6 <_printf_float+0xb6>
 80094ac:	464b      	mov	r3, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	eb08 020a 	add.w	r2, r8, sl
 80094b6:	47b8      	blx	r7
 80094b8:	3001      	adds	r0, #1
 80094ba:	d1c2      	bne.n	8009442 <_printf_float+0x332>
 80094bc:	e683      	b.n	80091c6 <_printf_float+0xb6>
 80094be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c0:	2a01      	cmp	r2, #1
 80094c2:	dc01      	bgt.n	80094c8 <_printf_float+0x3b8>
 80094c4:	07db      	lsls	r3, r3, #31
 80094c6:	d539      	bpl.n	800953c <_printf_float+0x42c>
 80094c8:	2301      	movs	r3, #1
 80094ca:	4642      	mov	r2, r8
 80094cc:	4631      	mov	r1, r6
 80094ce:	4628      	mov	r0, r5
 80094d0:	47b8      	blx	r7
 80094d2:	3001      	adds	r0, #1
 80094d4:	f43f ae77 	beq.w	80091c6 <_printf_float+0xb6>
 80094d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80094dc:	4631      	mov	r1, r6
 80094de:	4628      	mov	r0, r5
 80094e0:	47b8      	blx	r7
 80094e2:	3001      	adds	r0, #1
 80094e4:	f43f ae6f 	beq.w	80091c6 <_printf_float+0xb6>
 80094e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094ec:	2200      	movs	r2, #0
 80094ee:	2300      	movs	r3, #0
 80094f0:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80094f4:	f7f7 fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80094f8:	b9d8      	cbnz	r0, 8009532 <_printf_float+0x422>
 80094fa:	f109 33ff 	add.w	r3, r9, #4294967295
 80094fe:	f108 0201 	add.w	r2, r8, #1
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	d10e      	bne.n	800952a <_printf_float+0x41a>
 800950c:	e65b      	b.n	80091c6 <_printf_float+0xb6>
 800950e:	2301      	movs	r3, #1
 8009510:	464a      	mov	r2, r9
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	f43f ae54 	beq.w	80091c6 <_printf_float+0xb6>
 800951e:	f108 0801 	add.w	r8, r8, #1
 8009522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009524:	3b01      	subs	r3, #1
 8009526:	4543      	cmp	r3, r8
 8009528:	dcf1      	bgt.n	800950e <_printf_float+0x3fe>
 800952a:	4653      	mov	r3, sl
 800952c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009530:	e6de      	b.n	80092f0 <_printf_float+0x1e0>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f104 091a 	add.w	r9, r4, #26
 800953a:	e7f2      	b.n	8009522 <_printf_float+0x412>
 800953c:	2301      	movs	r3, #1
 800953e:	4642      	mov	r2, r8
 8009540:	e7df      	b.n	8009502 <_printf_float+0x3f2>
 8009542:	2301      	movs	r3, #1
 8009544:	464a      	mov	r2, r9
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae3a 	beq.w	80091c6 <_printf_float+0xb6>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	4543      	cmp	r3, r8
 800955e:	dcf0      	bgt.n	8009542 <_printf_float+0x432>
 8009560:	e6fb      	b.n	800935a <_printf_float+0x24a>
 8009562:	f04f 0800 	mov.w	r8, #0
 8009566:	f104 0919 	add.w	r9, r4, #25
 800956a:	e7f4      	b.n	8009556 <_printf_float+0x446>

0800956c <_printf_common>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	4616      	mov	r6, r2
 8009572:	4699      	mov	r9, r3
 8009574:	688a      	ldr	r2, [r1, #8]
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	4607      	mov	r7, r0
 800957a:	4293      	cmp	r3, r2
 800957c:	bfb8      	it	lt
 800957e:	4613      	movlt	r3, r2
 8009580:	6033      	str	r3, [r6, #0]
 8009582:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009586:	460c      	mov	r4, r1
 8009588:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800958c:	b10a      	cbz	r2, 8009592 <_printf_common+0x26>
 800958e:	3301      	adds	r3, #1
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	6833      	ldrmi	r3, [r6, #0]
 800959a:	3302      	addmi	r3, #2
 800959c:	6033      	strmi	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d106      	bne.n	80095b4 <_printf_common+0x48>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dc2b      	bgt.n	800960c <_printf_common+0xa0>
 80095b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b8:	1e13      	subs	r3, r2, #0
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	0692      	lsls	r2, r2, #26
 80095c2:	d430      	bmi.n	8009626 <_printf_common+0xba>
 80095c4:	4649      	mov	r1, r9
 80095c6:	4638      	mov	r0, r7
 80095c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d023      	beq.n	800961a <_printf_common+0xae>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	6922      	ldr	r2, [r4, #16]
 80095d6:	f003 0306 	and.w	r3, r3, #6
 80095da:	2b04      	cmp	r3, #4
 80095dc:	bf14      	ite	ne
 80095de:	2500      	movne	r5, #0
 80095e0:	6833      	ldreq	r3, [r6, #0]
 80095e2:	f04f 0600 	mov.w	r6, #0
 80095e6:	bf08      	it	eq
 80095e8:	68e5      	ldreq	r5, [r4, #12]
 80095ea:	f104 041a 	add.w	r4, r4, #26
 80095ee:	bf08      	it	eq
 80095f0:	1aed      	subeq	r5, r5, r3
 80095f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80095f6:	bf08      	it	eq
 80095f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095fc:	4293      	cmp	r3, r2
 80095fe:	bfc4      	itt	gt
 8009600:	1a9b      	subgt	r3, r3, r2
 8009602:	18ed      	addgt	r5, r5, r3
 8009604:	42b5      	cmp	r5, r6
 8009606:	d11a      	bne.n	800963e <_printf_common+0xd2>
 8009608:	2000      	movs	r0, #0
 800960a:	e008      	b.n	800961e <_printf_common+0xb2>
 800960c:	2301      	movs	r3, #1
 800960e:	4652      	mov	r2, sl
 8009610:	4649      	mov	r1, r9
 8009612:	4638      	mov	r0, r7
 8009614:	47c0      	blx	r8
 8009616:	3001      	adds	r0, #1
 8009618:	d103      	bne.n	8009622 <_printf_common+0xb6>
 800961a:	f04f 30ff 	mov.w	r0, #4294967295
 800961e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009622:	3501      	adds	r5, #1
 8009624:	e7c1      	b.n	80095aa <_printf_common+0x3e>
 8009626:	2030      	movs	r0, #48	; 0x30
 8009628:	18e1      	adds	r1, r4, r3
 800962a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009634:	4422      	add	r2, r4
 8009636:	3302      	adds	r3, #2
 8009638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800963c:	e7c2      	b.n	80095c4 <_printf_common+0x58>
 800963e:	2301      	movs	r3, #1
 8009640:	4622      	mov	r2, r4
 8009642:	4649      	mov	r1, r9
 8009644:	4638      	mov	r0, r7
 8009646:	47c0      	blx	r8
 8009648:	3001      	adds	r0, #1
 800964a:	d0e6      	beq.n	800961a <_printf_common+0xae>
 800964c:	3601      	adds	r6, #1
 800964e:	e7d9      	b.n	8009604 <_printf_common+0x98>

08009650 <_printf_i>:
 8009650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009654:	7e0f      	ldrb	r7, [r1, #24]
 8009656:	4691      	mov	r9, r2
 8009658:	2f78      	cmp	r7, #120	; 0x78
 800965a:	4680      	mov	r8, r0
 800965c:	460c      	mov	r4, r1
 800965e:	469a      	mov	sl, r3
 8009660:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009662:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009666:	d807      	bhi.n	8009678 <_printf_i+0x28>
 8009668:	2f62      	cmp	r7, #98	; 0x62
 800966a:	d80a      	bhi.n	8009682 <_printf_i+0x32>
 800966c:	2f00      	cmp	r7, #0
 800966e:	f000 80d5 	beq.w	800981c <_printf_i+0x1cc>
 8009672:	2f58      	cmp	r7, #88	; 0x58
 8009674:	f000 80c1 	beq.w	80097fa <_printf_i+0x1aa>
 8009678:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800967c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009680:	e03a      	b.n	80096f8 <_printf_i+0xa8>
 8009682:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009686:	2b15      	cmp	r3, #21
 8009688:	d8f6      	bhi.n	8009678 <_printf_i+0x28>
 800968a:	a101      	add	r1, pc, #4	; (adr r1, 8009690 <_printf_i+0x40>)
 800968c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009690:	080096e9 	.word	0x080096e9
 8009694:	080096fd 	.word	0x080096fd
 8009698:	08009679 	.word	0x08009679
 800969c:	08009679 	.word	0x08009679
 80096a0:	08009679 	.word	0x08009679
 80096a4:	08009679 	.word	0x08009679
 80096a8:	080096fd 	.word	0x080096fd
 80096ac:	08009679 	.word	0x08009679
 80096b0:	08009679 	.word	0x08009679
 80096b4:	08009679 	.word	0x08009679
 80096b8:	08009679 	.word	0x08009679
 80096bc:	08009803 	.word	0x08009803
 80096c0:	08009729 	.word	0x08009729
 80096c4:	080097bd 	.word	0x080097bd
 80096c8:	08009679 	.word	0x08009679
 80096cc:	08009679 	.word	0x08009679
 80096d0:	08009825 	.word	0x08009825
 80096d4:	08009679 	.word	0x08009679
 80096d8:	08009729 	.word	0x08009729
 80096dc:	08009679 	.word	0x08009679
 80096e0:	08009679 	.word	0x08009679
 80096e4:	080097c5 	.word	0x080097c5
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	1d1a      	adds	r2, r3, #4
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	602a      	str	r2, [r5, #0]
 80096f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f8:	2301      	movs	r3, #1
 80096fa:	e0a0      	b.n	800983e <_printf_i+0x1ee>
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	682b      	ldr	r3, [r5, #0]
 8009700:	0607      	lsls	r7, r0, #24
 8009702:	f103 0104 	add.w	r1, r3, #4
 8009706:	6029      	str	r1, [r5, #0]
 8009708:	d501      	bpl.n	800970e <_printf_i+0xbe>
 800970a:	681e      	ldr	r6, [r3, #0]
 800970c:	e003      	b.n	8009716 <_printf_i+0xc6>
 800970e:	0646      	lsls	r6, r0, #25
 8009710:	d5fb      	bpl.n	800970a <_printf_i+0xba>
 8009712:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009716:	2e00      	cmp	r6, #0
 8009718:	da03      	bge.n	8009722 <_printf_i+0xd2>
 800971a:	232d      	movs	r3, #45	; 0x2d
 800971c:	4276      	negs	r6, r6
 800971e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009722:	230a      	movs	r3, #10
 8009724:	4859      	ldr	r0, [pc, #356]	; (800988c <_printf_i+0x23c>)
 8009726:	e012      	b.n	800974e <_printf_i+0xfe>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	6820      	ldr	r0, [r4, #0]
 800972c:	1d19      	adds	r1, r3, #4
 800972e:	6029      	str	r1, [r5, #0]
 8009730:	0605      	lsls	r5, r0, #24
 8009732:	d501      	bpl.n	8009738 <_printf_i+0xe8>
 8009734:	681e      	ldr	r6, [r3, #0]
 8009736:	e002      	b.n	800973e <_printf_i+0xee>
 8009738:	0641      	lsls	r1, r0, #25
 800973a:	d5fb      	bpl.n	8009734 <_printf_i+0xe4>
 800973c:	881e      	ldrh	r6, [r3, #0]
 800973e:	2f6f      	cmp	r7, #111	; 0x6f
 8009740:	bf0c      	ite	eq
 8009742:	2308      	moveq	r3, #8
 8009744:	230a      	movne	r3, #10
 8009746:	4851      	ldr	r0, [pc, #324]	; (800988c <_printf_i+0x23c>)
 8009748:	2100      	movs	r1, #0
 800974a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800974e:	6865      	ldr	r5, [r4, #4]
 8009750:	2d00      	cmp	r5, #0
 8009752:	bfa8      	it	ge
 8009754:	6821      	ldrge	r1, [r4, #0]
 8009756:	60a5      	str	r5, [r4, #8]
 8009758:	bfa4      	itt	ge
 800975a:	f021 0104 	bicge.w	r1, r1, #4
 800975e:	6021      	strge	r1, [r4, #0]
 8009760:	b90e      	cbnz	r6, 8009766 <_printf_i+0x116>
 8009762:	2d00      	cmp	r5, #0
 8009764:	d04b      	beq.n	80097fe <_printf_i+0x1ae>
 8009766:	4615      	mov	r5, r2
 8009768:	fbb6 f1f3 	udiv	r1, r6, r3
 800976c:	fb03 6711 	mls	r7, r3, r1, r6
 8009770:	5dc7      	ldrb	r7, [r0, r7]
 8009772:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009776:	4637      	mov	r7, r6
 8009778:	42bb      	cmp	r3, r7
 800977a:	460e      	mov	r6, r1
 800977c:	d9f4      	bls.n	8009768 <_printf_i+0x118>
 800977e:	2b08      	cmp	r3, #8
 8009780:	d10b      	bne.n	800979a <_printf_i+0x14a>
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	07de      	lsls	r6, r3, #31
 8009786:	d508      	bpl.n	800979a <_printf_i+0x14a>
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	6861      	ldr	r1, [r4, #4]
 800978c:	4299      	cmp	r1, r3
 800978e:	bfde      	ittt	le
 8009790:	2330      	movle	r3, #48	; 0x30
 8009792:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800979a:	1b52      	subs	r2, r2, r5
 800979c:	6122      	str	r2, [r4, #16]
 800979e:	464b      	mov	r3, r9
 80097a0:	4621      	mov	r1, r4
 80097a2:	4640      	mov	r0, r8
 80097a4:	f8cd a000 	str.w	sl, [sp]
 80097a8:	aa03      	add	r2, sp, #12
 80097aa:	f7ff fedf 	bl	800956c <_printf_common>
 80097ae:	3001      	adds	r0, #1
 80097b0:	d14a      	bne.n	8009848 <_printf_i+0x1f8>
 80097b2:	f04f 30ff 	mov.w	r0, #4294967295
 80097b6:	b004      	add	sp, #16
 80097b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	f043 0320 	orr.w	r3, r3, #32
 80097c2:	6023      	str	r3, [r4, #0]
 80097c4:	2778      	movs	r7, #120	; 0x78
 80097c6:	4832      	ldr	r0, [pc, #200]	; (8009890 <_printf_i+0x240>)
 80097c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80097cc:	6823      	ldr	r3, [r4, #0]
 80097ce:	6829      	ldr	r1, [r5, #0]
 80097d0:	061f      	lsls	r7, r3, #24
 80097d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80097d6:	d402      	bmi.n	80097de <_printf_i+0x18e>
 80097d8:	065f      	lsls	r7, r3, #25
 80097da:	bf48      	it	mi
 80097dc:	b2b6      	uxthmi	r6, r6
 80097de:	07df      	lsls	r7, r3, #31
 80097e0:	bf48      	it	mi
 80097e2:	f043 0320 	orrmi.w	r3, r3, #32
 80097e6:	6029      	str	r1, [r5, #0]
 80097e8:	bf48      	it	mi
 80097ea:	6023      	strmi	r3, [r4, #0]
 80097ec:	b91e      	cbnz	r6, 80097f6 <_printf_i+0x1a6>
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	f023 0320 	bic.w	r3, r3, #32
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	2310      	movs	r3, #16
 80097f8:	e7a6      	b.n	8009748 <_printf_i+0xf8>
 80097fa:	4824      	ldr	r0, [pc, #144]	; (800988c <_printf_i+0x23c>)
 80097fc:	e7e4      	b.n	80097c8 <_printf_i+0x178>
 80097fe:	4615      	mov	r5, r2
 8009800:	e7bd      	b.n	800977e <_printf_i+0x12e>
 8009802:	682b      	ldr	r3, [r5, #0]
 8009804:	6826      	ldr	r6, [r4, #0]
 8009806:	1d18      	adds	r0, r3, #4
 8009808:	6961      	ldr	r1, [r4, #20]
 800980a:	6028      	str	r0, [r5, #0]
 800980c:	0635      	lsls	r5, r6, #24
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	d501      	bpl.n	8009816 <_printf_i+0x1c6>
 8009812:	6019      	str	r1, [r3, #0]
 8009814:	e002      	b.n	800981c <_printf_i+0x1cc>
 8009816:	0670      	lsls	r0, r6, #25
 8009818:	d5fb      	bpl.n	8009812 <_printf_i+0x1c2>
 800981a:	8019      	strh	r1, [r3, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	4615      	mov	r5, r2
 8009820:	6123      	str	r3, [r4, #16]
 8009822:	e7bc      	b.n	800979e <_printf_i+0x14e>
 8009824:	682b      	ldr	r3, [r5, #0]
 8009826:	2100      	movs	r1, #0
 8009828:	1d1a      	adds	r2, r3, #4
 800982a:	602a      	str	r2, [r5, #0]
 800982c:	681d      	ldr	r5, [r3, #0]
 800982e:	6862      	ldr	r2, [r4, #4]
 8009830:	4628      	mov	r0, r5
 8009832:	f000 fc06 	bl	800a042 <memchr>
 8009836:	b108      	cbz	r0, 800983c <_printf_i+0x1ec>
 8009838:	1b40      	subs	r0, r0, r5
 800983a:	6060      	str	r0, [r4, #4]
 800983c:	6863      	ldr	r3, [r4, #4]
 800983e:	6123      	str	r3, [r4, #16]
 8009840:	2300      	movs	r3, #0
 8009842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009846:	e7aa      	b.n	800979e <_printf_i+0x14e>
 8009848:	462a      	mov	r2, r5
 800984a:	4649      	mov	r1, r9
 800984c:	4640      	mov	r0, r8
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	47d0      	blx	sl
 8009852:	3001      	adds	r0, #1
 8009854:	d0ad      	beq.n	80097b2 <_printf_i+0x162>
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	079b      	lsls	r3, r3, #30
 800985a:	d413      	bmi.n	8009884 <_printf_i+0x234>
 800985c:	68e0      	ldr	r0, [r4, #12]
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	4298      	cmp	r0, r3
 8009862:	bfb8      	it	lt
 8009864:	4618      	movlt	r0, r3
 8009866:	e7a6      	b.n	80097b6 <_printf_i+0x166>
 8009868:	2301      	movs	r3, #1
 800986a:	4632      	mov	r2, r6
 800986c:	4649      	mov	r1, r9
 800986e:	4640      	mov	r0, r8
 8009870:	47d0      	blx	sl
 8009872:	3001      	adds	r0, #1
 8009874:	d09d      	beq.n	80097b2 <_printf_i+0x162>
 8009876:	3501      	adds	r5, #1
 8009878:	68e3      	ldr	r3, [r4, #12]
 800987a:	9903      	ldr	r1, [sp, #12]
 800987c:	1a5b      	subs	r3, r3, r1
 800987e:	42ab      	cmp	r3, r5
 8009880:	dcf2      	bgt.n	8009868 <_printf_i+0x218>
 8009882:	e7eb      	b.n	800985c <_printf_i+0x20c>
 8009884:	2500      	movs	r5, #0
 8009886:	f104 0619 	add.w	r6, r4, #25
 800988a:	e7f5      	b.n	8009878 <_printf_i+0x228>
 800988c:	0800db9d 	.word	0x0800db9d
 8009890:	0800dbae 	.word	0x0800dbae

08009894 <_scanf_float>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	b087      	sub	sp, #28
 800989a:	9303      	str	r3, [sp, #12]
 800989c:	688b      	ldr	r3, [r1, #8]
 800989e:	4617      	mov	r7, r2
 80098a0:	1e5a      	subs	r2, r3, #1
 80098a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80098a6:	bf85      	ittet	hi
 80098a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80098ac:	195b      	addhi	r3, r3, r5
 80098ae:	2300      	movls	r3, #0
 80098b0:	9302      	strhi	r3, [sp, #8]
 80098b2:	bf88      	it	hi
 80098b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80098b8:	468b      	mov	fp, r1
 80098ba:	f04f 0500 	mov.w	r5, #0
 80098be:	bf8c      	ite	hi
 80098c0:	608b      	strhi	r3, [r1, #8]
 80098c2:	9302      	strls	r3, [sp, #8]
 80098c4:	680b      	ldr	r3, [r1, #0]
 80098c6:	4680      	mov	r8, r0
 80098c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80098cc:	f84b 3b1c 	str.w	r3, [fp], #28
 80098d0:	460c      	mov	r4, r1
 80098d2:	465e      	mov	r6, fp
 80098d4:	46aa      	mov	sl, r5
 80098d6:	46a9      	mov	r9, r5
 80098d8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80098dc:	9501      	str	r5, [sp, #4]
 80098de:	68a2      	ldr	r2, [r4, #8]
 80098e0:	b152      	cbz	r2, 80098f8 <_scanf_float+0x64>
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b4e      	cmp	r3, #78	; 0x4e
 80098e8:	d864      	bhi.n	80099b4 <_scanf_float+0x120>
 80098ea:	2b40      	cmp	r3, #64	; 0x40
 80098ec:	d83c      	bhi.n	8009968 <_scanf_float+0xd4>
 80098ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80098f2:	b2c8      	uxtb	r0, r1
 80098f4:	280e      	cmp	r0, #14
 80098f6:	d93a      	bls.n	800996e <_scanf_float+0xda>
 80098f8:	f1b9 0f00 	cmp.w	r9, #0
 80098fc:	d003      	beq.n	8009906 <_scanf_float+0x72>
 80098fe:	6823      	ldr	r3, [r4, #0]
 8009900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800990a:	f1ba 0f01 	cmp.w	sl, #1
 800990e:	f200 8113 	bhi.w	8009b38 <_scanf_float+0x2a4>
 8009912:	455e      	cmp	r6, fp
 8009914:	f200 8105 	bhi.w	8009b22 <_scanf_float+0x28e>
 8009918:	2501      	movs	r5, #1
 800991a:	4628      	mov	r0, r5
 800991c:	b007      	add	sp, #28
 800991e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009922:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009926:	2a0d      	cmp	r2, #13
 8009928:	d8e6      	bhi.n	80098f8 <_scanf_float+0x64>
 800992a:	a101      	add	r1, pc, #4	; (adr r1, 8009930 <_scanf_float+0x9c>)
 800992c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009930:	08009a6f 	.word	0x08009a6f
 8009934:	080098f9 	.word	0x080098f9
 8009938:	080098f9 	.word	0x080098f9
 800993c:	080098f9 	.word	0x080098f9
 8009940:	08009acf 	.word	0x08009acf
 8009944:	08009aa7 	.word	0x08009aa7
 8009948:	080098f9 	.word	0x080098f9
 800994c:	080098f9 	.word	0x080098f9
 8009950:	08009a7d 	.word	0x08009a7d
 8009954:	080098f9 	.word	0x080098f9
 8009958:	080098f9 	.word	0x080098f9
 800995c:	080098f9 	.word	0x080098f9
 8009960:	080098f9 	.word	0x080098f9
 8009964:	08009a35 	.word	0x08009a35
 8009968:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800996c:	e7db      	b.n	8009926 <_scanf_float+0x92>
 800996e:	290e      	cmp	r1, #14
 8009970:	d8c2      	bhi.n	80098f8 <_scanf_float+0x64>
 8009972:	a001      	add	r0, pc, #4	; (adr r0, 8009978 <_scanf_float+0xe4>)
 8009974:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009978:	08009a27 	.word	0x08009a27
 800997c:	080098f9 	.word	0x080098f9
 8009980:	08009a27 	.word	0x08009a27
 8009984:	08009abb 	.word	0x08009abb
 8009988:	080098f9 	.word	0x080098f9
 800998c:	080099d5 	.word	0x080099d5
 8009990:	08009a11 	.word	0x08009a11
 8009994:	08009a11 	.word	0x08009a11
 8009998:	08009a11 	.word	0x08009a11
 800999c:	08009a11 	.word	0x08009a11
 80099a0:	08009a11 	.word	0x08009a11
 80099a4:	08009a11 	.word	0x08009a11
 80099a8:	08009a11 	.word	0x08009a11
 80099ac:	08009a11 	.word	0x08009a11
 80099b0:	08009a11 	.word	0x08009a11
 80099b4:	2b6e      	cmp	r3, #110	; 0x6e
 80099b6:	d809      	bhi.n	80099cc <_scanf_float+0x138>
 80099b8:	2b60      	cmp	r3, #96	; 0x60
 80099ba:	d8b2      	bhi.n	8009922 <_scanf_float+0x8e>
 80099bc:	2b54      	cmp	r3, #84	; 0x54
 80099be:	d077      	beq.n	8009ab0 <_scanf_float+0x21c>
 80099c0:	2b59      	cmp	r3, #89	; 0x59
 80099c2:	d199      	bne.n	80098f8 <_scanf_float+0x64>
 80099c4:	2d07      	cmp	r5, #7
 80099c6:	d197      	bne.n	80098f8 <_scanf_float+0x64>
 80099c8:	2508      	movs	r5, #8
 80099ca:	e029      	b.n	8009a20 <_scanf_float+0x18c>
 80099cc:	2b74      	cmp	r3, #116	; 0x74
 80099ce:	d06f      	beq.n	8009ab0 <_scanf_float+0x21c>
 80099d0:	2b79      	cmp	r3, #121	; 0x79
 80099d2:	e7f6      	b.n	80099c2 <_scanf_float+0x12e>
 80099d4:	6821      	ldr	r1, [r4, #0]
 80099d6:	05c8      	lsls	r0, r1, #23
 80099d8:	d51a      	bpl.n	8009a10 <_scanf_float+0x17c>
 80099da:	9b02      	ldr	r3, [sp, #8]
 80099dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80099e0:	6021      	str	r1, [r4, #0]
 80099e2:	f109 0901 	add.w	r9, r9, #1
 80099e6:	b11b      	cbz	r3, 80099f0 <_scanf_float+0x15c>
 80099e8:	3b01      	subs	r3, #1
 80099ea:	3201      	adds	r2, #1
 80099ec:	9302      	str	r3, [sp, #8]
 80099ee:	60a2      	str	r2, [r4, #8]
 80099f0:	68a3      	ldr	r3, [r4, #8]
 80099f2:	3b01      	subs	r3, #1
 80099f4:	60a3      	str	r3, [r4, #8]
 80099f6:	6923      	ldr	r3, [r4, #16]
 80099f8:	3301      	adds	r3, #1
 80099fa:	6123      	str	r3, [r4, #16]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	607b      	str	r3, [r7, #4]
 8009a04:	f340 8084 	ble.w	8009b10 <_scanf_float+0x27c>
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	603b      	str	r3, [r7, #0]
 8009a0e:	e766      	b.n	80098de <_scanf_float+0x4a>
 8009a10:	eb1a 0f05 	cmn.w	sl, r5
 8009a14:	f47f af70 	bne.w	80098f8 <_scanf_float+0x64>
 8009a18:	6822      	ldr	r2, [r4, #0]
 8009a1a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009a1e:	6022      	str	r2, [r4, #0]
 8009a20:	f806 3b01 	strb.w	r3, [r6], #1
 8009a24:	e7e4      	b.n	80099f0 <_scanf_float+0x15c>
 8009a26:	6822      	ldr	r2, [r4, #0]
 8009a28:	0610      	lsls	r0, r2, #24
 8009a2a:	f57f af65 	bpl.w	80098f8 <_scanf_float+0x64>
 8009a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a32:	e7f4      	b.n	8009a1e <_scanf_float+0x18a>
 8009a34:	f1ba 0f00 	cmp.w	sl, #0
 8009a38:	d10e      	bne.n	8009a58 <_scanf_float+0x1c4>
 8009a3a:	f1b9 0f00 	cmp.w	r9, #0
 8009a3e:	d10e      	bne.n	8009a5e <_scanf_float+0x1ca>
 8009a40:	6822      	ldr	r2, [r4, #0]
 8009a42:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a46:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a4a:	d108      	bne.n	8009a5e <_scanf_float+0x1ca>
 8009a4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a50:	f04f 0a01 	mov.w	sl, #1
 8009a54:	6022      	str	r2, [r4, #0]
 8009a56:	e7e3      	b.n	8009a20 <_scanf_float+0x18c>
 8009a58:	f1ba 0f02 	cmp.w	sl, #2
 8009a5c:	d055      	beq.n	8009b0a <_scanf_float+0x276>
 8009a5e:	2d01      	cmp	r5, #1
 8009a60:	d002      	beq.n	8009a68 <_scanf_float+0x1d4>
 8009a62:	2d04      	cmp	r5, #4
 8009a64:	f47f af48 	bne.w	80098f8 <_scanf_float+0x64>
 8009a68:	3501      	adds	r5, #1
 8009a6a:	b2ed      	uxtb	r5, r5
 8009a6c:	e7d8      	b.n	8009a20 <_scanf_float+0x18c>
 8009a6e:	f1ba 0f01 	cmp.w	sl, #1
 8009a72:	f47f af41 	bne.w	80098f8 <_scanf_float+0x64>
 8009a76:	f04f 0a02 	mov.w	sl, #2
 8009a7a:	e7d1      	b.n	8009a20 <_scanf_float+0x18c>
 8009a7c:	b97d      	cbnz	r5, 8009a9e <_scanf_float+0x20a>
 8009a7e:	f1b9 0f00 	cmp.w	r9, #0
 8009a82:	f47f af3c 	bne.w	80098fe <_scanf_float+0x6a>
 8009a86:	6822      	ldr	r2, [r4, #0]
 8009a88:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009a8c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a90:	f47f af39 	bne.w	8009906 <_scanf_float+0x72>
 8009a94:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a98:	2501      	movs	r5, #1
 8009a9a:	6022      	str	r2, [r4, #0]
 8009a9c:	e7c0      	b.n	8009a20 <_scanf_float+0x18c>
 8009a9e:	2d03      	cmp	r5, #3
 8009aa0:	d0e2      	beq.n	8009a68 <_scanf_float+0x1d4>
 8009aa2:	2d05      	cmp	r5, #5
 8009aa4:	e7de      	b.n	8009a64 <_scanf_float+0x1d0>
 8009aa6:	2d02      	cmp	r5, #2
 8009aa8:	f47f af26 	bne.w	80098f8 <_scanf_float+0x64>
 8009aac:	2503      	movs	r5, #3
 8009aae:	e7b7      	b.n	8009a20 <_scanf_float+0x18c>
 8009ab0:	2d06      	cmp	r5, #6
 8009ab2:	f47f af21 	bne.w	80098f8 <_scanf_float+0x64>
 8009ab6:	2507      	movs	r5, #7
 8009ab8:	e7b2      	b.n	8009a20 <_scanf_float+0x18c>
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	0591      	lsls	r1, r2, #22
 8009abe:	f57f af1b 	bpl.w	80098f8 <_scanf_float+0x64>
 8009ac2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009ac6:	6022      	str	r2, [r4, #0]
 8009ac8:	f8cd 9004 	str.w	r9, [sp, #4]
 8009acc:	e7a8      	b.n	8009a20 <_scanf_float+0x18c>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009ad4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009ad8:	d006      	beq.n	8009ae8 <_scanf_float+0x254>
 8009ada:	0550      	lsls	r0, r2, #21
 8009adc:	f57f af0c 	bpl.w	80098f8 <_scanf_float+0x64>
 8009ae0:	f1b9 0f00 	cmp.w	r9, #0
 8009ae4:	f43f af0f 	beq.w	8009906 <_scanf_float+0x72>
 8009ae8:	0591      	lsls	r1, r2, #22
 8009aea:	bf58      	it	pl
 8009aec:	9901      	ldrpl	r1, [sp, #4]
 8009aee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009af2:	bf58      	it	pl
 8009af4:	eba9 0101 	subpl.w	r1, r9, r1
 8009af8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009afc:	f04f 0900 	mov.w	r9, #0
 8009b00:	bf58      	it	pl
 8009b02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009b06:	6022      	str	r2, [r4, #0]
 8009b08:	e78a      	b.n	8009a20 <_scanf_float+0x18c>
 8009b0a:	f04f 0a03 	mov.w	sl, #3
 8009b0e:	e787      	b.n	8009a20 <_scanf_float+0x18c>
 8009b10:	4639      	mov	r1, r7
 8009b12:	4640      	mov	r0, r8
 8009b14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b18:	4798      	blx	r3
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	f43f aedf 	beq.w	80098de <_scanf_float+0x4a>
 8009b20:	e6ea      	b.n	80098f8 <_scanf_float+0x64>
 8009b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b26:	463a      	mov	r2, r7
 8009b28:	4640      	mov	r0, r8
 8009b2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b2e:	4798      	blx	r3
 8009b30:	6923      	ldr	r3, [r4, #16]
 8009b32:	3b01      	subs	r3, #1
 8009b34:	6123      	str	r3, [r4, #16]
 8009b36:	e6ec      	b.n	8009912 <_scanf_float+0x7e>
 8009b38:	1e6b      	subs	r3, r5, #1
 8009b3a:	2b06      	cmp	r3, #6
 8009b3c:	d825      	bhi.n	8009b8a <_scanf_float+0x2f6>
 8009b3e:	2d02      	cmp	r5, #2
 8009b40:	d836      	bhi.n	8009bb0 <_scanf_float+0x31c>
 8009b42:	455e      	cmp	r6, fp
 8009b44:	f67f aee8 	bls.w	8009918 <_scanf_float+0x84>
 8009b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b4c:	463a      	mov	r2, r7
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b54:	4798      	blx	r3
 8009b56:	6923      	ldr	r3, [r4, #16]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	6123      	str	r3, [r4, #16]
 8009b5c:	e7f1      	b.n	8009b42 <_scanf_float+0x2ae>
 8009b5e:	9802      	ldr	r0, [sp, #8]
 8009b60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b64:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009b68:	463a      	mov	r2, r7
 8009b6a:	9002      	str	r0, [sp, #8]
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	4798      	blx	r3
 8009b70:	6923      	ldr	r3, [r4, #16]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	6123      	str	r3, [r4, #16]
 8009b76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009b7a:	fa5f fa8a 	uxtb.w	sl, sl
 8009b7e:	f1ba 0f02 	cmp.w	sl, #2
 8009b82:	d1ec      	bne.n	8009b5e <_scanf_float+0x2ca>
 8009b84:	3d03      	subs	r5, #3
 8009b86:	b2ed      	uxtb	r5, r5
 8009b88:	1b76      	subs	r6, r6, r5
 8009b8a:	6823      	ldr	r3, [r4, #0]
 8009b8c:	05da      	lsls	r2, r3, #23
 8009b8e:	d52f      	bpl.n	8009bf0 <_scanf_float+0x35c>
 8009b90:	055b      	lsls	r3, r3, #21
 8009b92:	d510      	bpl.n	8009bb6 <_scanf_float+0x322>
 8009b94:	455e      	cmp	r6, fp
 8009b96:	f67f aebf 	bls.w	8009918 <_scanf_float+0x84>
 8009b9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	4640      	mov	r0, r8
 8009ba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ba6:	4798      	blx	r3
 8009ba8:	6923      	ldr	r3, [r4, #16]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	e7f1      	b.n	8009b94 <_scanf_float+0x300>
 8009bb0:	46aa      	mov	sl, r5
 8009bb2:	9602      	str	r6, [sp, #8]
 8009bb4:	e7df      	b.n	8009b76 <_scanf_float+0x2e2>
 8009bb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009bba:	6923      	ldr	r3, [r4, #16]
 8009bbc:	2965      	cmp	r1, #101	; 0x65
 8009bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009bc2:	f106 35ff 	add.w	r5, r6, #4294967295
 8009bc6:	6123      	str	r3, [r4, #16]
 8009bc8:	d00c      	beq.n	8009be4 <_scanf_float+0x350>
 8009bca:	2945      	cmp	r1, #69	; 0x45
 8009bcc:	d00a      	beq.n	8009be4 <_scanf_float+0x350>
 8009bce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	4798      	blx	r3
 8009bd8:	6923      	ldr	r3, [r4, #16]
 8009bda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009bde:	3b01      	subs	r3, #1
 8009be0:	1eb5      	subs	r5, r6, #2
 8009be2:	6123      	str	r3, [r4, #16]
 8009be4:	463a      	mov	r2, r7
 8009be6:	4640      	mov	r0, r8
 8009be8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009bec:	4798      	blx	r3
 8009bee:	462e      	mov	r6, r5
 8009bf0:	6825      	ldr	r5, [r4, #0]
 8009bf2:	f015 0510 	ands.w	r5, r5, #16
 8009bf6:	d155      	bne.n	8009ca4 <_scanf_float+0x410>
 8009bf8:	7035      	strb	r5, [r6, #0]
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c04:	d11d      	bne.n	8009c42 <_scanf_float+0x3ae>
 8009c06:	9b01      	ldr	r3, [sp, #4]
 8009c08:	454b      	cmp	r3, r9
 8009c0a:	eba3 0209 	sub.w	r2, r3, r9
 8009c0e:	d125      	bne.n	8009c5c <_scanf_float+0x3c8>
 8009c10:	2200      	movs	r2, #0
 8009c12:	4659      	mov	r1, fp
 8009c14:	4640      	mov	r0, r8
 8009c16:	f002 fc47 	bl	800c4a8 <_strtod_r>
 8009c1a:	9b03      	ldr	r3, [sp, #12]
 8009c1c:	f8d4 c000 	ldr.w	ip, [r4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f01c 0f02 	tst.w	ip, #2
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	f103 0204 	add.w	r2, r3, #4
 8009c2e:	d020      	beq.n	8009c72 <_scanf_float+0x3de>
 8009c30:	9903      	ldr	r1, [sp, #12]
 8009c32:	600a      	str	r2, [r1, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	e9c3 6700 	strd	r6, r7, [r3]
 8009c3a:	68e3      	ldr	r3, [r4, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60e3      	str	r3, [r4, #12]
 8009c40:	e66b      	b.n	800991a <_scanf_float+0x86>
 8009c42:	9b04      	ldr	r3, [sp, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d0e3      	beq.n	8009c10 <_scanf_float+0x37c>
 8009c48:	9905      	ldr	r1, [sp, #20]
 8009c4a:	230a      	movs	r3, #10
 8009c4c:	462a      	mov	r2, r5
 8009c4e:	4640      	mov	r0, r8
 8009c50:	3101      	adds	r1, #1
 8009c52:	f7ff f9b5 	bl	8008fc0 <_strtol_r>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	9e05      	ldr	r6, [sp, #20]
 8009c5a:	1ac2      	subs	r2, r0, r3
 8009c5c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009c60:	429e      	cmp	r6, r3
 8009c62:	bf28      	it	cs
 8009c64:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009c68:	4630      	mov	r0, r6
 8009c6a:	490f      	ldr	r1, [pc, #60]	; (8009ca8 <_scanf_float+0x414>)
 8009c6c:	f000 f8e2 	bl	8009e34 <siprintf>
 8009c70:	e7ce      	b.n	8009c10 <_scanf_float+0x37c>
 8009c72:	f01c 0f04 	tst.w	ip, #4
 8009c76:	d1db      	bne.n	8009c30 <_scanf_float+0x39c>
 8009c78:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009c7c:	f8cc 2000 	str.w	r2, [ip]
 8009c80:	f8d3 8000 	ldr.w	r8, [r3]
 8009c84:	4602      	mov	r2, r0
 8009c86:	460b      	mov	r3, r1
 8009c88:	f7f6 fec0 	bl	8000a0c <__aeabi_dcmpun>
 8009c8c:	b128      	cbz	r0, 8009c9a <_scanf_float+0x406>
 8009c8e:	4807      	ldr	r0, [pc, #28]	; (8009cac <_scanf_float+0x418>)
 8009c90:	f000 f9e6 	bl	800a060 <nanf>
 8009c94:	f8c8 0000 	str.w	r0, [r8]
 8009c98:	e7cf      	b.n	8009c3a <_scanf_float+0x3a6>
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	f7f6 ff13 	bl	8000ac8 <__aeabi_d2f>
 8009ca2:	e7f7      	b.n	8009c94 <_scanf_float+0x400>
 8009ca4:	2500      	movs	r5, #0
 8009ca6:	e638      	b.n	800991a <_scanf_float+0x86>
 8009ca8:	0800dbbf 	.word	0x0800dbbf
 8009cac:	0800de54 	.word	0x0800de54

08009cb0 <std>:
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	b510      	push	{r4, lr}
 8009cb4:	4604      	mov	r4, r0
 8009cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8009cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cbe:	6083      	str	r3, [r0, #8]
 8009cc0:	8181      	strh	r1, [r0, #12]
 8009cc2:	6643      	str	r3, [r0, #100]	; 0x64
 8009cc4:	81c2      	strh	r2, [r0, #14]
 8009cc6:	6183      	str	r3, [r0, #24]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	2208      	movs	r2, #8
 8009ccc:	305c      	adds	r0, #92	; 0x5c
 8009cce:	f000 f914 	bl	8009efa <memset>
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	; (8009d08 <std+0x58>)
 8009cd4:	6224      	str	r4, [r4, #32]
 8009cd6:	6263      	str	r3, [r4, #36]	; 0x24
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <std+0x5c>)
 8009cda:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cdc:	4b0c      	ldr	r3, [pc, #48]	; (8009d10 <std+0x60>)
 8009cde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <std+0x64>)
 8009ce2:	6323      	str	r3, [r4, #48]	; 0x30
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <std+0x68>)
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d006      	beq.n	8009cf8 <std+0x48>
 8009cea:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009cee:	4294      	cmp	r4, r2
 8009cf0:	d002      	beq.n	8009cf8 <std+0x48>
 8009cf2:	33d0      	adds	r3, #208	; 0xd0
 8009cf4:	429c      	cmp	r4, r3
 8009cf6:	d105      	bne.n	8009d04 <std+0x54>
 8009cf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d00:	f000 b99c 	b.w	800a03c <__retarget_lock_init_recursive>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	bf00      	nop
 8009d08:	08009e75 	.word	0x08009e75
 8009d0c:	08009e97 	.word	0x08009e97
 8009d10:	08009ecf 	.word	0x08009ecf
 8009d14:	08009ef3 	.word	0x08009ef3
 8009d18:	20000550 	.word	0x20000550

08009d1c <stdio_exit_handler>:
 8009d1c:	4a02      	ldr	r2, [pc, #8]	; (8009d28 <stdio_exit_handler+0xc>)
 8009d1e:	4903      	ldr	r1, [pc, #12]	; (8009d2c <stdio_exit_handler+0x10>)
 8009d20:	4803      	ldr	r0, [pc, #12]	; (8009d30 <stdio_exit_handler+0x14>)
 8009d22:	f000 b869 	b.w	8009df8 <_fwalk_sglue>
 8009d26:	bf00      	nop
 8009d28:	20000010 	.word	0x20000010
 8009d2c:	0800c869 	.word	0x0800c869
 8009d30:	2000001c 	.word	0x2000001c

08009d34 <cleanup_stdio>:
 8009d34:	6841      	ldr	r1, [r0, #4]
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <cleanup_stdio+0x34>)
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	4299      	cmp	r1, r3
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	d001      	beq.n	8009d44 <cleanup_stdio+0x10>
 8009d40:	f002 fd92 	bl	800c868 <_fflush_r>
 8009d44:	68a1      	ldr	r1, [r4, #8]
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <cleanup_stdio+0x38>)
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	d002      	beq.n	8009d52 <cleanup_stdio+0x1e>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f002 fd8b 	bl	800c868 <_fflush_r>
 8009d52:	68e1      	ldr	r1, [r4, #12]
 8009d54:	4b06      	ldr	r3, [pc, #24]	; (8009d70 <cleanup_stdio+0x3c>)
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d004      	beq.n	8009d64 <cleanup_stdio+0x30>
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d60:	f002 bd82 	b.w	800c868 <_fflush_r>
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	bf00      	nop
 8009d68:	20000550 	.word	0x20000550
 8009d6c:	200005b8 	.word	0x200005b8
 8009d70:	20000620 	.word	0x20000620

08009d74 <global_stdio_init.part.0>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <global_stdio_init.part.0+0x30>)
 8009d78:	4c0b      	ldr	r4, [pc, #44]	; (8009da8 <global_stdio_init.part.0+0x34>)
 8009d7a:	4a0c      	ldr	r2, [pc, #48]	; (8009dac <global_stdio_init.part.0+0x38>)
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	2104      	movs	r1, #4
 8009d82:	2200      	movs	r2, #0
 8009d84:	f7ff ff94 	bl	8009cb0 <std>
 8009d88:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	2109      	movs	r1, #9
 8009d90:	f7ff ff8e 	bl	8009cb0 <std>
 8009d94:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009d98:	2202      	movs	r2, #2
 8009d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d9e:	2112      	movs	r1, #18
 8009da0:	f7ff bf86 	b.w	8009cb0 <std>
 8009da4:	20000688 	.word	0x20000688
 8009da8:	20000550 	.word	0x20000550
 8009dac:	08009d1d 	.word	0x08009d1d

08009db0 <__sfp_lock_acquire>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__sfp_lock_acquire+0x8>)
 8009db2:	f000 b944 	b.w	800a03e <__retarget_lock_acquire_recursive>
 8009db6:	bf00      	nop
 8009db8:	20000691 	.word	0x20000691

08009dbc <__sfp_lock_release>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__sfp_lock_release+0x8>)
 8009dbe:	f000 b93f 	b.w	800a040 <__retarget_lock_release_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	20000691 	.word	0x20000691

08009dc8 <__sinit>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	4604      	mov	r4, r0
 8009dcc:	f7ff fff0 	bl	8009db0 <__sfp_lock_acquire>
 8009dd0:	6a23      	ldr	r3, [r4, #32]
 8009dd2:	b11b      	cbz	r3, 8009ddc <__sinit+0x14>
 8009dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dd8:	f7ff bff0 	b.w	8009dbc <__sfp_lock_release>
 8009ddc:	4b04      	ldr	r3, [pc, #16]	; (8009df0 <__sinit+0x28>)
 8009dde:	6223      	str	r3, [r4, #32]
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <__sinit+0x2c>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f5      	bne.n	8009dd4 <__sinit+0xc>
 8009de8:	f7ff ffc4 	bl	8009d74 <global_stdio_init.part.0>
 8009dec:	e7f2      	b.n	8009dd4 <__sinit+0xc>
 8009dee:	bf00      	nop
 8009df0:	08009d35 	.word	0x08009d35
 8009df4:	20000688 	.word	0x20000688

08009df8 <_fwalk_sglue>:
 8009df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dfc:	4607      	mov	r7, r0
 8009dfe:	4688      	mov	r8, r1
 8009e00:	4614      	mov	r4, r2
 8009e02:	2600      	movs	r6, #0
 8009e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e08:	f1b9 0901 	subs.w	r9, r9, #1
 8009e0c:	d505      	bpl.n	8009e1a <_fwalk_sglue+0x22>
 8009e0e:	6824      	ldr	r4, [r4, #0]
 8009e10:	2c00      	cmp	r4, #0
 8009e12:	d1f7      	bne.n	8009e04 <_fwalk_sglue+0xc>
 8009e14:	4630      	mov	r0, r6
 8009e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e1a:	89ab      	ldrh	r3, [r5, #12]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d907      	bls.n	8009e30 <_fwalk_sglue+0x38>
 8009e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e24:	3301      	adds	r3, #1
 8009e26:	d003      	beq.n	8009e30 <_fwalk_sglue+0x38>
 8009e28:	4629      	mov	r1, r5
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	47c0      	blx	r8
 8009e2e:	4306      	orrs	r6, r0
 8009e30:	3568      	adds	r5, #104	; 0x68
 8009e32:	e7e9      	b.n	8009e08 <_fwalk_sglue+0x10>

08009e34 <siprintf>:
 8009e34:	b40e      	push	{r1, r2, r3}
 8009e36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e3a:	b500      	push	{lr}
 8009e3c:	b09c      	sub	sp, #112	; 0x70
 8009e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8009e40:	9002      	str	r0, [sp, #8]
 8009e42:	9006      	str	r0, [sp, #24]
 8009e44:	9107      	str	r1, [sp, #28]
 8009e46:	9104      	str	r1, [sp, #16]
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <siprintf+0x38>)
 8009e4a:	4909      	ldr	r1, [pc, #36]	; (8009e70 <siprintf+0x3c>)
 8009e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e50:	9105      	str	r1, [sp, #20]
 8009e52:	6800      	ldr	r0, [r0, #0]
 8009e54:	a902      	add	r1, sp, #8
 8009e56:	9301      	str	r3, [sp, #4]
 8009e58:	f002 fb86 	bl	800c568 <_svfiprintf_r>
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	9b02      	ldr	r3, [sp, #8]
 8009e60:	701a      	strb	r2, [r3, #0]
 8009e62:	b01c      	add	sp, #112	; 0x70
 8009e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e68:	b003      	add	sp, #12
 8009e6a:	4770      	bx	lr
 8009e6c:	20000068 	.word	0x20000068
 8009e70:	ffff0208 	.word	0xffff0208

08009e74 <__sread>:
 8009e74:	b510      	push	{r4, lr}
 8009e76:	460c      	mov	r4, r1
 8009e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7c:	f000 f890 	bl	8009fa0 <_read_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	bfab      	itete	ge
 8009e84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e86:	89a3      	ldrhlt	r3, [r4, #12]
 8009e88:	181b      	addge	r3, r3, r0
 8009e8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e8e:	bfac      	ite	ge
 8009e90:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e92:	81a3      	strhlt	r3, [r4, #12]
 8009e94:	bd10      	pop	{r4, pc}

08009e96 <__swrite>:
 8009e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9a:	461f      	mov	r7, r3
 8009e9c:	898b      	ldrh	r3, [r1, #12]
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	05db      	lsls	r3, r3, #23
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4616      	mov	r6, r2
 8009ea6:	d505      	bpl.n	8009eb4 <__swrite+0x1e>
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb0:	f000 f864 	bl	8009f7c <_lseek_r>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	4632      	mov	r2, r6
 8009eb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	463b      	mov	r3, r7
 8009ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eca:	f000 b87b 	b.w	8009fc4 <_write_r>

08009ece <__sseek>:
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 f851 	bl	8009f7c <_lseek_r>
 8009eda:	1c43      	adds	r3, r0, #1
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	bf15      	itete	ne
 8009ee0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ee2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ee6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eea:	81a3      	strheq	r3, [r4, #12]
 8009eec:	bf18      	it	ne
 8009eee:	81a3      	strhne	r3, [r4, #12]
 8009ef0:	bd10      	pop	{r4, pc}

08009ef2 <__sclose>:
 8009ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ef6:	f000 b831 	b.w	8009f5c <_close_r>

08009efa <memset>:
 8009efa:	4603      	mov	r3, r0
 8009efc:	4402      	add	r2, r0
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d100      	bne.n	8009f04 <memset+0xa>
 8009f02:	4770      	bx	lr
 8009f04:	f803 1b01 	strb.w	r1, [r3], #1
 8009f08:	e7f9      	b.n	8009efe <memset+0x4>

08009f0a <strcat>:
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	b510      	push	{r4, lr}
 8009f0e:	7814      	ldrb	r4, [r2, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	3201      	adds	r2, #1
 8009f14:	2c00      	cmp	r4, #0
 8009f16:	d1fa      	bne.n	8009f0e <strcat+0x4>
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	d1f9      	bne.n	8009f1a <strcat+0x10>
 8009f26:	bd10      	pop	{r4, pc}

08009f28 <strstr>:
 8009f28:	780a      	ldrb	r2, [r1, #0]
 8009f2a:	b570      	push	{r4, r5, r6, lr}
 8009f2c:	b96a      	cbnz	r2, 8009f4a <strstr+0x22>
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d109      	bne.n	8009f48 <strstr+0x20>
 8009f34:	460c      	mov	r4, r1
 8009f36:	4605      	mov	r5, r0
 8009f38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d0f6      	beq.n	8009f2e <strstr+0x6>
 8009f40:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009f44:	429e      	cmp	r6, r3
 8009f46:	d0f7      	beq.n	8009f38 <strstr+0x10>
 8009f48:	3001      	adds	r0, #1
 8009f4a:	7803      	ldrb	r3, [r0, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1ef      	bne.n	8009f30 <strstr+0x8>
 8009f50:	4618      	mov	r0, r3
 8009f52:	e7ec      	b.n	8009f2e <strstr+0x6>

08009f54 <_localeconv_r>:
 8009f54:	4800      	ldr	r0, [pc, #0]	; (8009f58 <_localeconv_r+0x4>)
 8009f56:	4770      	bx	lr
 8009f58:	2000015c 	.word	0x2000015c

08009f5c <_close_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4d05      	ldr	r5, [pc, #20]	; (8009f78 <_close_r+0x1c>)
 8009f62:	4604      	mov	r4, r0
 8009f64:	4608      	mov	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7fa fe72 	bl	8004c50 <_close>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d102      	bne.n	8009f76 <_close_r+0x1a>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	b103      	cbz	r3, 8009f76 <_close_r+0x1a>
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	bd38      	pop	{r3, r4, r5, pc}
 8009f78:	2000068c 	.word	0x2000068c

08009f7c <_lseek_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	4611      	mov	r1, r2
 8009f84:	2200      	movs	r2, #0
 8009f86:	4d05      	ldr	r5, [pc, #20]	; (8009f9c <_lseek_r+0x20>)
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7fa fe84 	bl	8004c98 <_lseek>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_lseek_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_lseek_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	2000068c 	.word	0x2000068c

08009fa0 <_read_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	2200      	movs	r2, #0
 8009faa:	4d05      	ldr	r5, [pc, #20]	; (8009fc0 <_read_r+0x20>)
 8009fac:	602a      	str	r2, [r5, #0]
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f7fa fe15 	bl	8004bde <_read>
 8009fb4:	1c43      	adds	r3, r0, #1
 8009fb6:	d102      	bne.n	8009fbe <_read_r+0x1e>
 8009fb8:	682b      	ldr	r3, [r5, #0]
 8009fba:	b103      	cbz	r3, 8009fbe <_read_r+0x1e>
 8009fbc:	6023      	str	r3, [r4, #0]
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}
 8009fc0:	2000068c 	.word	0x2000068c

08009fc4 <_write_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	4611      	mov	r1, r2
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4d05      	ldr	r5, [pc, #20]	; (8009fe4 <_write_r+0x20>)
 8009fd0:	602a      	str	r2, [r5, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f7fa fe20 	bl	8004c18 <_write>
 8009fd8:	1c43      	adds	r3, r0, #1
 8009fda:	d102      	bne.n	8009fe2 <_write_r+0x1e>
 8009fdc:	682b      	ldr	r3, [r5, #0]
 8009fde:	b103      	cbz	r3, 8009fe2 <_write_r+0x1e>
 8009fe0:	6023      	str	r3, [r4, #0]
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	2000068c 	.word	0x2000068c

08009fe8 <__errno>:
 8009fe8:	4b01      	ldr	r3, [pc, #4]	; (8009ff0 <__errno+0x8>)
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	4770      	bx	lr
 8009fee:	bf00      	nop
 8009ff0:	20000068 	.word	0x20000068

08009ff4 <__libc_init_array>:
 8009ff4:	b570      	push	{r4, r5, r6, lr}
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	4d0c      	ldr	r5, [pc, #48]	; (800a02c <__libc_init_array+0x38>)
 8009ffa:	4c0d      	ldr	r4, [pc, #52]	; (800a030 <__libc_init_array+0x3c>)
 8009ffc:	1b64      	subs	r4, r4, r5
 8009ffe:	10a4      	asrs	r4, r4, #2
 800a000:	42a6      	cmp	r6, r4
 800a002:	d109      	bne.n	800a018 <__libc_init_array+0x24>
 800a004:	f003 fb42 	bl	800d68c <_init>
 800a008:	2600      	movs	r6, #0
 800a00a:	4d0a      	ldr	r5, [pc, #40]	; (800a034 <__libc_init_array+0x40>)
 800a00c:	4c0a      	ldr	r4, [pc, #40]	; (800a038 <__libc_init_array+0x44>)
 800a00e:	1b64      	subs	r4, r4, r5
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	42a6      	cmp	r6, r4
 800a014:	d105      	bne.n	800a022 <__libc_init_array+0x2e>
 800a016:	bd70      	pop	{r4, r5, r6, pc}
 800a018:	f855 3b04 	ldr.w	r3, [r5], #4
 800a01c:	4798      	blx	r3
 800a01e:	3601      	adds	r6, #1
 800a020:	e7ee      	b.n	800a000 <__libc_init_array+0xc>
 800a022:	f855 3b04 	ldr.w	r3, [r5], #4
 800a026:	4798      	blx	r3
 800a028:	3601      	adds	r6, #1
 800a02a:	e7f2      	b.n	800a012 <__libc_init_array+0x1e>
 800a02c:	0800dec0 	.word	0x0800dec0
 800a030:	0800dec0 	.word	0x0800dec0
 800a034:	0800dec0 	.word	0x0800dec0
 800a038:	0800dec4 	.word	0x0800dec4

0800a03c <__retarget_lock_init_recursive>:
 800a03c:	4770      	bx	lr

0800a03e <__retarget_lock_acquire_recursive>:
 800a03e:	4770      	bx	lr

0800a040 <__retarget_lock_release_recursive>:
 800a040:	4770      	bx	lr

0800a042 <memchr>:
 800a042:	4603      	mov	r3, r0
 800a044:	b510      	push	{r4, lr}
 800a046:	b2c9      	uxtb	r1, r1
 800a048:	4402      	add	r2, r0
 800a04a:	4293      	cmp	r3, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	d101      	bne.n	800a054 <memchr+0x12>
 800a050:	2000      	movs	r0, #0
 800a052:	e003      	b.n	800a05c <memchr+0x1a>
 800a054:	7804      	ldrb	r4, [r0, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	428c      	cmp	r4, r1
 800a05a:	d1f6      	bne.n	800a04a <memchr+0x8>
 800a05c:	bd10      	pop	{r4, pc}
	...

0800a060 <nanf>:
 800a060:	4800      	ldr	r0, [pc, #0]	; (800a064 <nanf+0x4>)
 800a062:	4770      	bx	lr
 800a064:	7fc00000 	.word	0x7fc00000

0800a068 <quorem>:
 800a068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a06c:	6903      	ldr	r3, [r0, #16]
 800a06e:	690c      	ldr	r4, [r1, #16]
 800a070:	4607      	mov	r7, r0
 800a072:	42a3      	cmp	r3, r4
 800a074:	db7f      	blt.n	800a176 <quorem+0x10e>
 800a076:	3c01      	subs	r4, #1
 800a078:	f100 0514 	add.w	r5, r0, #20
 800a07c:	f101 0814 	add.w	r8, r1, #20
 800a080:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a084:	9301      	str	r3, [sp, #4]
 800a086:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a08a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a08e:	3301      	adds	r3, #1
 800a090:	429a      	cmp	r2, r3
 800a092:	fbb2 f6f3 	udiv	r6, r2, r3
 800a096:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a09a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a09e:	d331      	bcc.n	800a104 <quorem+0x9c>
 800a0a0:	f04f 0e00 	mov.w	lr, #0
 800a0a4:	4640      	mov	r0, r8
 800a0a6:	46ac      	mov	ip, r5
 800a0a8:	46f2      	mov	sl, lr
 800a0aa:	f850 2b04 	ldr.w	r2, [r0], #4
 800a0ae:	b293      	uxth	r3, r2
 800a0b0:	fb06 e303 	mla	r3, r6, r3, lr
 800a0b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0b8:	0c1a      	lsrs	r2, r3, #16
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	fb06 220e 	mla	r2, r6, lr, r2
 800a0c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a0c4:	f8dc a000 	ldr.w	sl, [ip]
 800a0c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a0cc:	fa1f fa8a 	uxth.w	sl, sl
 800a0d0:	4453      	add	r3, sl
 800a0d2:	f8dc a000 	ldr.w	sl, [ip]
 800a0d6:	b292      	uxth	r2, r2
 800a0d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a0dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0e6:	4581      	cmp	r9, r0
 800a0e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a0ec:	f84c 3b04 	str.w	r3, [ip], #4
 800a0f0:	d2db      	bcs.n	800a0aa <quorem+0x42>
 800a0f2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a0f6:	b92b      	cbnz	r3, 800a104 <quorem+0x9c>
 800a0f8:	9b01      	ldr	r3, [sp, #4]
 800a0fa:	3b04      	subs	r3, #4
 800a0fc:	429d      	cmp	r5, r3
 800a0fe:	461a      	mov	r2, r3
 800a100:	d32d      	bcc.n	800a15e <quorem+0xf6>
 800a102:	613c      	str	r4, [r7, #16]
 800a104:	4638      	mov	r0, r7
 800a106:	f001 f9df 	bl	800b4c8 <__mcmp>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	db23      	blt.n	800a156 <quorem+0xee>
 800a10e:	4629      	mov	r1, r5
 800a110:	2000      	movs	r0, #0
 800a112:	3601      	adds	r6, #1
 800a114:	f858 2b04 	ldr.w	r2, [r8], #4
 800a118:	f8d1 c000 	ldr.w	ip, [r1]
 800a11c:	b293      	uxth	r3, r2
 800a11e:	1ac3      	subs	r3, r0, r3
 800a120:	0c12      	lsrs	r2, r2, #16
 800a122:	fa1f f08c 	uxth.w	r0, ip
 800a126:	4403      	add	r3, r0
 800a128:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a12c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a130:	b29b      	uxth	r3, r3
 800a132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a136:	45c1      	cmp	r9, r8
 800a138:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a13c:	f841 3b04 	str.w	r3, [r1], #4
 800a140:	d2e8      	bcs.n	800a114 <quorem+0xac>
 800a142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a14a:	b922      	cbnz	r2, 800a156 <quorem+0xee>
 800a14c:	3b04      	subs	r3, #4
 800a14e:	429d      	cmp	r5, r3
 800a150:	461a      	mov	r2, r3
 800a152:	d30a      	bcc.n	800a16a <quorem+0x102>
 800a154:	613c      	str	r4, [r7, #16]
 800a156:	4630      	mov	r0, r6
 800a158:	b003      	add	sp, #12
 800a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a15e:	6812      	ldr	r2, [r2, #0]
 800a160:	3b04      	subs	r3, #4
 800a162:	2a00      	cmp	r2, #0
 800a164:	d1cd      	bne.n	800a102 <quorem+0x9a>
 800a166:	3c01      	subs	r4, #1
 800a168:	e7c8      	b.n	800a0fc <quorem+0x94>
 800a16a:	6812      	ldr	r2, [r2, #0]
 800a16c:	3b04      	subs	r3, #4
 800a16e:	2a00      	cmp	r2, #0
 800a170:	d1f0      	bne.n	800a154 <quorem+0xec>
 800a172:	3c01      	subs	r4, #1
 800a174:	e7eb      	b.n	800a14e <quorem+0xe6>
 800a176:	2000      	movs	r0, #0
 800a178:	e7ee      	b.n	800a158 <quorem+0xf0>
 800a17a:	0000      	movs	r0, r0
 800a17c:	0000      	movs	r0, r0
	...

0800a180 <_dtoa_r>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	4616      	mov	r6, r2
 800a186:	461f      	mov	r7, r3
 800a188:	69c4      	ldr	r4, [r0, #28]
 800a18a:	b099      	sub	sp, #100	; 0x64
 800a18c:	4605      	mov	r5, r0
 800a18e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a192:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a196:	b974      	cbnz	r4, 800a1b6 <_dtoa_r+0x36>
 800a198:	2010      	movs	r0, #16
 800a19a:	f000 fe1d 	bl	800add8 <malloc>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	61e8      	str	r0, [r5, #28]
 800a1a2:	b920      	cbnz	r0, 800a1ae <_dtoa_r+0x2e>
 800a1a4:	21ef      	movs	r1, #239	; 0xef
 800a1a6:	4bac      	ldr	r3, [pc, #688]	; (800a458 <_dtoa_r+0x2d8>)
 800a1a8:	48ac      	ldr	r0, [pc, #688]	; (800a45c <_dtoa_r+0x2dc>)
 800a1aa:	f002 fbd5 	bl	800c958 <__assert_func>
 800a1ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1b2:	6004      	str	r4, [r0, #0]
 800a1b4:	60c4      	str	r4, [r0, #12]
 800a1b6:	69eb      	ldr	r3, [r5, #28]
 800a1b8:	6819      	ldr	r1, [r3, #0]
 800a1ba:	b151      	cbz	r1, 800a1d2 <_dtoa_r+0x52>
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4093      	lsls	r3, r2
 800a1c2:	604a      	str	r2, [r1, #4]
 800a1c4:	608b      	str	r3, [r1, #8]
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 fefa 	bl	800afc0 <_Bfree>
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	69eb      	ldr	r3, [r5, #28]
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	1e3b      	subs	r3, r7, #0
 800a1d4:	bfaf      	iteee	ge
 800a1d6:	2300      	movge	r3, #0
 800a1d8:	2201      	movlt	r2, #1
 800a1da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a1de:	9305      	strlt	r3, [sp, #20]
 800a1e0:	bfa8      	it	ge
 800a1e2:	f8c8 3000 	strge.w	r3, [r8]
 800a1e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a1ea:	4b9d      	ldr	r3, [pc, #628]	; (800a460 <_dtoa_r+0x2e0>)
 800a1ec:	bfb8      	it	lt
 800a1ee:	f8c8 2000 	strlt.w	r2, [r8]
 800a1f2:	ea33 0309 	bics.w	r3, r3, r9
 800a1f6:	d119      	bne.n	800a22c <_dtoa_r+0xac>
 800a1f8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a1fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a204:	4333      	orrs	r3, r6
 800a206:	f000 8589 	beq.w	800ad1c <_dtoa_r+0xb9c>
 800a20a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a20c:	b953      	cbnz	r3, 800a224 <_dtoa_r+0xa4>
 800a20e:	4b95      	ldr	r3, [pc, #596]	; (800a464 <_dtoa_r+0x2e4>)
 800a210:	e023      	b.n	800a25a <_dtoa_r+0xda>
 800a212:	4b95      	ldr	r3, [pc, #596]	; (800a468 <_dtoa_r+0x2e8>)
 800a214:	9303      	str	r3, [sp, #12]
 800a216:	3308      	adds	r3, #8
 800a218:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	9803      	ldr	r0, [sp, #12]
 800a21e:	b019      	add	sp, #100	; 0x64
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	4b8f      	ldr	r3, [pc, #572]	; (800a464 <_dtoa_r+0x2e4>)
 800a226:	9303      	str	r3, [sp, #12]
 800a228:	3303      	adds	r3, #3
 800a22a:	e7f5      	b.n	800a218 <_dtoa_r+0x98>
 800a22c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a230:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a238:	2200      	movs	r2, #0
 800a23a:	2300      	movs	r3, #0
 800a23c:	f7f6 fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 800a240:	4680      	mov	r8, r0
 800a242:	b160      	cbz	r0, 800a25e <_dtoa_r+0xde>
 800a244:	2301      	movs	r3, #1
 800a246:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a248:	6013      	str	r3, [r2, #0]
 800a24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8562 	beq.w	800ad16 <_dtoa_r+0xb96>
 800a252:	4b86      	ldr	r3, [pc, #536]	; (800a46c <_dtoa_r+0x2ec>)
 800a254:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	3b01      	subs	r3, #1
 800a25a:	9303      	str	r3, [sp, #12]
 800a25c:	e7de      	b.n	800a21c <_dtoa_r+0x9c>
 800a25e:	ab16      	add	r3, sp, #88	; 0x58
 800a260:	9301      	str	r3, [sp, #4]
 800a262:	ab17      	add	r3, sp, #92	; 0x5c
 800a264:	9300      	str	r3, [sp, #0]
 800a266:	4628      	mov	r0, r5
 800a268:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a26c:	f001 fa3c 	bl	800b6e8 <__d2b>
 800a270:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a274:	4682      	mov	sl, r0
 800a276:	2c00      	cmp	r4, #0
 800a278:	d07e      	beq.n	800a378 <_dtoa_r+0x1f8>
 800a27a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a280:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a288:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a28c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a290:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a294:	4619      	mov	r1, r3
 800a296:	2200      	movs	r2, #0
 800a298:	4b75      	ldr	r3, [pc, #468]	; (800a470 <_dtoa_r+0x2f0>)
 800a29a:	f7f5 ff65 	bl	8000168 <__aeabi_dsub>
 800a29e:	a368      	add	r3, pc, #416	; (adr r3, 800a440 <_dtoa_r+0x2c0>)
 800a2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a4:	f7f6 f918 	bl	80004d8 <__aeabi_dmul>
 800a2a8:	a367      	add	r3, pc, #412	; (adr r3, 800a448 <_dtoa_r+0x2c8>)
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	f7f5 ff5d 	bl	800016c <__adddf3>
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	460f      	mov	r7, r1
 800a2b8:	f7f6 f8a4 	bl	8000404 <__aeabi_i2d>
 800a2bc:	a364      	add	r3, pc, #400	; (adr r3, 800a450 <_dtoa_r+0x2d0>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	460b      	mov	r3, r1
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	4639      	mov	r1, r7
 800a2ce:	f7f5 ff4d 	bl	800016c <__adddf3>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	f7f6 fbaf 	bl	8000a38 <__aeabi_d2iz>
 800a2da:	2200      	movs	r2, #0
 800a2dc:	4683      	mov	fp, r0
 800a2de:	2300      	movs	r3, #0
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 fb6a 	bl	80009bc <__aeabi_dcmplt>
 800a2e8:	b148      	cbz	r0, 800a2fe <_dtoa_r+0x17e>
 800a2ea:	4658      	mov	r0, fp
 800a2ec:	f7f6 f88a 	bl	8000404 <__aeabi_i2d>
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	f7f6 fb58 	bl	80009a8 <__aeabi_dcmpeq>
 800a2f8:	b908      	cbnz	r0, 800a2fe <_dtoa_r+0x17e>
 800a2fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2fe:	f1bb 0f16 	cmp.w	fp, #22
 800a302:	d857      	bhi.n	800a3b4 <_dtoa_r+0x234>
 800a304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a308:	4b5a      	ldr	r3, [pc, #360]	; (800a474 <_dtoa_r+0x2f4>)
 800a30a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f7f6 fb53 	bl	80009bc <__aeabi_dcmplt>
 800a316:	2800      	cmp	r0, #0
 800a318:	d04e      	beq.n	800a3b8 <_dtoa_r+0x238>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a320:	930f      	str	r3, [sp, #60]	; 0x3c
 800a322:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a324:	1b1b      	subs	r3, r3, r4
 800a326:	1e5a      	subs	r2, r3, #1
 800a328:	bf46      	itte	mi
 800a32a:	f1c3 0901 	rsbmi	r9, r3, #1
 800a32e:	2300      	movmi	r3, #0
 800a330:	f04f 0900 	movpl.w	r9, #0
 800a334:	9209      	str	r2, [sp, #36]	; 0x24
 800a336:	bf48      	it	mi
 800a338:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a33a:	f1bb 0f00 	cmp.w	fp, #0
 800a33e:	db3d      	blt.n	800a3bc <_dtoa_r+0x23c>
 800a340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a342:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a346:	445b      	add	r3, fp
 800a348:	9309      	str	r3, [sp, #36]	; 0x24
 800a34a:	2300      	movs	r3, #0
 800a34c:	930a      	str	r3, [sp, #40]	; 0x28
 800a34e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a350:	2b09      	cmp	r3, #9
 800a352:	d867      	bhi.n	800a424 <_dtoa_r+0x2a4>
 800a354:	2b05      	cmp	r3, #5
 800a356:	bfc4      	itt	gt
 800a358:	3b04      	subgt	r3, #4
 800a35a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a35c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a35e:	bfc8      	it	gt
 800a360:	2400      	movgt	r4, #0
 800a362:	f1a3 0302 	sub.w	r3, r3, #2
 800a366:	bfd8      	it	le
 800a368:	2401      	movle	r4, #1
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	f200 8086 	bhi.w	800a47c <_dtoa_r+0x2fc>
 800a370:	e8df f003 	tbb	[pc, r3]
 800a374:	5637392c 	.word	0x5637392c
 800a378:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a37c:	441c      	add	r4, r3
 800a37e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a382:	2b20      	cmp	r3, #32
 800a384:	bfc1      	itttt	gt
 800a386:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a38a:	fa09 f903 	lslgt.w	r9, r9, r3
 800a38e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a392:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a396:	bfd6      	itet	le
 800a398:	f1c3 0320 	rsble	r3, r3, #32
 800a39c:	ea49 0003 	orrgt.w	r0, r9, r3
 800a3a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a3a4:	f7f6 f81e 	bl	80003e4 <__aeabi_ui2d>
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a3ae:	3c01      	subs	r4, #1
 800a3b0:	9213      	str	r2, [sp, #76]	; 0x4c
 800a3b2:	e76f      	b.n	800a294 <_dtoa_r+0x114>
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e7b3      	b.n	800a320 <_dtoa_r+0x1a0>
 800a3b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800a3ba:	e7b2      	b.n	800a322 <_dtoa_r+0x1a2>
 800a3bc:	f1cb 0300 	rsb	r3, fp, #0
 800a3c0:	930a      	str	r3, [sp, #40]	; 0x28
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	eba9 090b 	sub.w	r9, r9, fp
 800a3c8:	930e      	str	r3, [sp, #56]	; 0x38
 800a3ca:	e7c0      	b.n	800a34e <_dtoa_r+0x1ce>
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	dc55      	bgt.n	800a482 <_dtoa_r+0x302>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	461a      	mov	r2, r3
 800a3da:	9306      	str	r3, [sp, #24]
 800a3dc:	9308      	str	r3, [sp, #32]
 800a3de:	9223      	str	r2, [sp, #140]	; 0x8c
 800a3e0:	e00b      	b.n	800a3fa <_dtoa_r+0x27a>
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	e7f3      	b.n	800a3ce <_dtoa_r+0x24e>
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3ec:	445b      	add	r3, fp
 800a3ee:	9306      	str	r3, [sp, #24]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	9308      	str	r3, [sp, #32]
 800a3f6:	bfb8      	it	lt
 800a3f8:	2301      	movlt	r3, #1
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	2204      	movs	r2, #4
 800a3fe:	69e8      	ldr	r0, [r5, #28]
 800a400:	f102 0614 	add.w	r6, r2, #20
 800a404:	429e      	cmp	r6, r3
 800a406:	d940      	bls.n	800a48a <_dtoa_r+0x30a>
 800a408:	6041      	str	r1, [r0, #4]
 800a40a:	4628      	mov	r0, r5
 800a40c:	f000 fd98 	bl	800af40 <_Balloc>
 800a410:	9003      	str	r0, [sp, #12]
 800a412:	2800      	cmp	r0, #0
 800a414:	d13c      	bne.n	800a490 <_dtoa_r+0x310>
 800a416:	4602      	mov	r2, r0
 800a418:	f240 11af 	movw	r1, #431	; 0x1af
 800a41c:	4b16      	ldr	r3, [pc, #88]	; (800a478 <_dtoa_r+0x2f8>)
 800a41e:	e6c3      	b.n	800a1a8 <_dtoa_r+0x28>
 800a420:	2301      	movs	r3, #1
 800a422:	e7e1      	b.n	800a3e8 <_dtoa_r+0x268>
 800a424:	2401      	movs	r4, #1
 800a426:	2300      	movs	r3, #0
 800a428:	940b      	str	r4, [sp, #44]	; 0x2c
 800a42a:	9322      	str	r3, [sp, #136]	; 0x88
 800a42c:	f04f 33ff 	mov.w	r3, #4294967295
 800a430:	2200      	movs	r2, #0
 800a432:	9306      	str	r3, [sp, #24]
 800a434:	9308      	str	r3, [sp, #32]
 800a436:	2312      	movs	r3, #18
 800a438:	e7d1      	b.n	800a3de <_dtoa_r+0x25e>
 800a43a:	bf00      	nop
 800a43c:	f3af 8000 	nop.w
 800a440:	636f4361 	.word	0x636f4361
 800a444:	3fd287a7 	.word	0x3fd287a7
 800a448:	8b60c8b3 	.word	0x8b60c8b3
 800a44c:	3fc68a28 	.word	0x3fc68a28
 800a450:	509f79fb 	.word	0x509f79fb
 800a454:	3fd34413 	.word	0x3fd34413
 800a458:	0800dbd1 	.word	0x0800dbd1
 800a45c:	0800dbe8 	.word	0x0800dbe8
 800a460:	7ff00000 	.word	0x7ff00000
 800a464:	0800dbcd 	.word	0x0800dbcd
 800a468:	0800dbc4 	.word	0x0800dbc4
 800a46c:	0800db9c 	.word	0x0800db9c
 800a470:	3ff80000 	.word	0x3ff80000
 800a474:	0800dcd8 	.word	0x0800dcd8
 800a478:	0800dc40 	.word	0x0800dc40
 800a47c:	2301      	movs	r3, #1
 800a47e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a480:	e7d4      	b.n	800a42c <_dtoa_r+0x2ac>
 800a482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a484:	9306      	str	r3, [sp, #24]
 800a486:	9308      	str	r3, [sp, #32]
 800a488:	e7b7      	b.n	800a3fa <_dtoa_r+0x27a>
 800a48a:	3101      	adds	r1, #1
 800a48c:	0052      	lsls	r2, r2, #1
 800a48e:	e7b7      	b.n	800a400 <_dtoa_r+0x280>
 800a490:	69eb      	ldr	r3, [r5, #28]
 800a492:	9a03      	ldr	r2, [sp, #12]
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	9b08      	ldr	r3, [sp, #32]
 800a498:	2b0e      	cmp	r3, #14
 800a49a:	f200 80a8 	bhi.w	800a5ee <_dtoa_r+0x46e>
 800a49e:	2c00      	cmp	r4, #0
 800a4a0:	f000 80a5 	beq.w	800a5ee <_dtoa_r+0x46e>
 800a4a4:	f1bb 0f00 	cmp.w	fp, #0
 800a4a8:	dd34      	ble.n	800a514 <_dtoa_r+0x394>
 800a4aa:	4b9a      	ldr	r3, [pc, #616]	; (800a714 <_dtoa_r+0x594>)
 800a4ac:	f00b 020f 	and.w	r2, fp, #15
 800a4b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a4b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a4bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a4c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a4c4:	d016      	beq.n	800a4f4 <_dtoa_r+0x374>
 800a4c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4ca:	4b93      	ldr	r3, [pc, #588]	; (800a718 <_dtoa_r+0x598>)
 800a4cc:	2703      	movs	r7, #3
 800a4ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4d2:	f7f6 f92b 	bl	800072c <__aeabi_ddiv>
 800a4d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4da:	f004 040f 	and.w	r4, r4, #15
 800a4de:	4e8e      	ldr	r6, [pc, #568]	; (800a718 <_dtoa_r+0x598>)
 800a4e0:	b954      	cbnz	r4, 800a4f8 <_dtoa_r+0x378>
 800a4e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a4e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ea:	f7f6 f91f 	bl	800072c <__aeabi_ddiv>
 800a4ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4f2:	e029      	b.n	800a548 <_dtoa_r+0x3c8>
 800a4f4:	2702      	movs	r7, #2
 800a4f6:	e7f2      	b.n	800a4de <_dtoa_r+0x35e>
 800a4f8:	07e1      	lsls	r1, r4, #31
 800a4fa:	d508      	bpl.n	800a50e <_dtoa_r+0x38e>
 800a4fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a500:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a504:	f7f5 ffe8 	bl	80004d8 <__aeabi_dmul>
 800a508:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a50c:	3701      	adds	r7, #1
 800a50e:	1064      	asrs	r4, r4, #1
 800a510:	3608      	adds	r6, #8
 800a512:	e7e5      	b.n	800a4e0 <_dtoa_r+0x360>
 800a514:	f000 80a5 	beq.w	800a662 <_dtoa_r+0x4e2>
 800a518:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a51c:	f1cb 0400 	rsb	r4, fp, #0
 800a520:	4b7c      	ldr	r3, [pc, #496]	; (800a714 <_dtoa_r+0x594>)
 800a522:	f004 020f 	and.w	r2, r4, #15
 800a526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f5 ffd3 	bl	80004d8 <__aeabi_dmul>
 800a532:	2702      	movs	r7, #2
 800a534:	2300      	movs	r3, #0
 800a536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a53a:	4e77      	ldr	r6, [pc, #476]	; (800a718 <_dtoa_r+0x598>)
 800a53c:	1124      	asrs	r4, r4, #4
 800a53e:	2c00      	cmp	r4, #0
 800a540:	f040 8084 	bne.w	800a64c <_dtoa_r+0x4cc>
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1d2      	bne.n	800a4ee <_dtoa_r+0x36e>
 800a548:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a54c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a550:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 8087 	beq.w	800a666 <_dtoa_r+0x4e6>
 800a558:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a55c:	2200      	movs	r2, #0
 800a55e:	4b6f      	ldr	r3, [pc, #444]	; (800a71c <_dtoa_r+0x59c>)
 800a560:	f7f6 fa2c 	bl	80009bc <__aeabi_dcmplt>
 800a564:	2800      	cmp	r0, #0
 800a566:	d07e      	beq.n	800a666 <_dtoa_r+0x4e6>
 800a568:	9b08      	ldr	r3, [sp, #32]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d07b      	beq.n	800a666 <_dtoa_r+0x4e6>
 800a56e:	9b06      	ldr	r3, [sp, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	dd38      	ble.n	800a5e6 <_dtoa_r+0x466>
 800a574:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a578:	2200      	movs	r2, #0
 800a57a:	4b69      	ldr	r3, [pc, #420]	; (800a720 <_dtoa_r+0x5a0>)
 800a57c:	f7f5 ffac 	bl	80004d8 <__aeabi_dmul>
 800a580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a584:	9c06      	ldr	r4, [sp, #24]
 800a586:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a58a:	3701      	adds	r7, #1
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7f5 ff39 	bl	8000404 <__aeabi_i2d>
 800a592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a596:	f7f5 ff9f 	bl	80004d8 <__aeabi_dmul>
 800a59a:	2200      	movs	r2, #0
 800a59c:	4b61      	ldr	r3, [pc, #388]	; (800a724 <_dtoa_r+0x5a4>)
 800a59e:	f7f5 fde5 	bl	800016c <__adddf3>
 800a5a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a5a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a5aa:	9611      	str	r6, [sp, #68]	; 0x44
 800a5ac:	2c00      	cmp	r4, #0
 800a5ae:	d15d      	bne.n	800a66c <_dtoa_r+0x4ec>
 800a5b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4b5c      	ldr	r3, [pc, #368]	; (800a728 <_dtoa_r+0x5a8>)
 800a5b8:	f7f5 fdd6 	bl	8000168 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a5c4:	4633      	mov	r3, r6
 800a5c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5c8:	f7f6 fa16 	bl	80009f8 <__aeabi_dcmpgt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 8295 	bne.w	800aafc <_dtoa_r+0x97c>
 800a5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a5dc:	f7f6 f9ee 	bl	80009bc <__aeabi_dcmplt>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	f040 8289 	bne.w	800aaf8 <_dtoa_r+0x978>
 800a5e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a5ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a5ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f2c0 8151 	blt.w	800a898 <_dtoa_r+0x718>
 800a5f6:	f1bb 0f0e 	cmp.w	fp, #14
 800a5fa:	f300 814d 	bgt.w	800a898 <_dtoa_r+0x718>
 800a5fe:	4b45      	ldr	r3, [pc, #276]	; (800a714 <_dtoa_r+0x594>)
 800a600:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a604:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a608:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a60c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	f280 80da 	bge.w	800a7c8 <_dtoa_r+0x648>
 800a614:	9b08      	ldr	r3, [sp, #32]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f300 80d6 	bgt.w	800a7c8 <_dtoa_r+0x648>
 800a61c:	f040 826b 	bne.w	800aaf6 <_dtoa_r+0x976>
 800a620:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a624:	2200      	movs	r2, #0
 800a626:	4b40      	ldr	r3, [pc, #256]	; (800a728 <_dtoa_r+0x5a8>)
 800a628:	f7f5 ff56 	bl	80004d8 <__aeabi_dmul>
 800a62c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a630:	f7f6 f9d8 	bl	80009e4 <__aeabi_dcmpge>
 800a634:	9c08      	ldr	r4, [sp, #32]
 800a636:	4626      	mov	r6, r4
 800a638:	2800      	cmp	r0, #0
 800a63a:	f040 8241 	bne.w	800aac0 <_dtoa_r+0x940>
 800a63e:	2331      	movs	r3, #49	; 0x31
 800a640:	9f03      	ldr	r7, [sp, #12]
 800a642:	f10b 0b01 	add.w	fp, fp, #1
 800a646:	f807 3b01 	strb.w	r3, [r7], #1
 800a64a:	e23d      	b.n	800aac8 <_dtoa_r+0x948>
 800a64c:	07e2      	lsls	r2, r4, #31
 800a64e:	d505      	bpl.n	800a65c <_dtoa_r+0x4dc>
 800a650:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a654:	f7f5 ff40 	bl	80004d8 <__aeabi_dmul>
 800a658:	2301      	movs	r3, #1
 800a65a:	3701      	adds	r7, #1
 800a65c:	1064      	asrs	r4, r4, #1
 800a65e:	3608      	adds	r6, #8
 800a660:	e76d      	b.n	800a53e <_dtoa_r+0x3be>
 800a662:	2702      	movs	r7, #2
 800a664:	e770      	b.n	800a548 <_dtoa_r+0x3c8>
 800a666:	46d8      	mov	r8, fp
 800a668:	9c08      	ldr	r4, [sp, #32]
 800a66a:	e78f      	b.n	800a58c <_dtoa_r+0x40c>
 800a66c:	9903      	ldr	r1, [sp, #12]
 800a66e:	4b29      	ldr	r3, [pc, #164]	; (800a714 <_dtoa_r+0x594>)
 800a670:	4421      	add	r1, r4
 800a672:	9112      	str	r1, [sp, #72]	; 0x48
 800a674:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a676:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a67a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a67e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a682:	2900      	cmp	r1, #0
 800a684:	d054      	beq.n	800a730 <_dtoa_r+0x5b0>
 800a686:	2000      	movs	r0, #0
 800a688:	4928      	ldr	r1, [pc, #160]	; (800a72c <_dtoa_r+0x5ac>)
 800a68a:	f7f6 f84f 	bl	800072c <__aeabi_ddiv>
 800a68e:	463b      	mov	r3, r7
 800a690:	4632      	mov	r2, r6
 800a692:	f7f5 fd69 	bl	8000168 <__aeabi_dsub>
 800a696:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a69a:	9f03      	ldr	r7, [sp, #12]
 800a69c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6a0:	f7f6 f9ca 	bl	8000a38 <__aeabi_d2iz>
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	f7f5 fead 	bl	8000404 <__aeabi_i2d>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6b2:	f7f5 fd59 	bl	8000168 <__aeabi_dsub>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	3430      	adds	r4, #48	; 0x30
 800a6bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6c4:	f807 4b01 	strb.w	r4, [r7], #1
 800a6c8:	f7f6 f978 	bl	80009bc <__aeabi_dcmplt>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d173      	bne.n	800a7b8 <_dtoa_r+0x638>
 800a6d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	4911      	ldr	r1, [pc, #68]	; (800a71c <_dtoa_r+0x59c>)
 800a6d8:	f7f5 fd46 	bl	8000168 <__aeabi_dsub>
 800a6dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6e0:	f7f6 f96c 	bl	80009bc <__aeabi_dcmplt>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f040 80b6 	bne.w	800a856 <_dtoa_r+0x6d6>
 800a6ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ec:	429f      	cmp	r7, r3
 800a6ee:	f43f af7a 	beq.w	800a5e6 <_dtoa_r+0x466>
 800a6f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	4b09      	ldr	r3, [pc, #36]	; (800a720 <_dtoa_r+0x5a0>)
 800a6fa:	f7f5 feed 	bl	80004d8 <__aeabi_dmul>
 800a6fe:	2200      	movs	r2, #0
 800a700:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a708:	4b05      	ldr	r3, [pc, #20]	; (800a720 <_dtoa_r+0x5a0>)
 800a70a:	f7f5 fee5 	bl	80004d8 <__aeabi_dmul>
 800a70e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a712:	e7c3      	b.n	800a69c <_dtoa_r+0x51c>
 800a714:	0800dcd8 	.word	0x0800dcd8
 800a718:	0800dcb0 	.word	0x0800dcb0
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	40240000 	.word	0x40240000
 800a724:	401c0000 	.word	0x401c0000
 800a728:	40140000 	.word	0x40140000
 800a72c:	3fe00000 	.word	0x3fe00000
 800a730:	4630      	mov	r0, r6
 800a732:	4639      	mov	r1, r7
 800a734:	f7f5 fed0 	bl	80004d8 <__aeabi_dmul>
 800a738:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a73a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a73e:	9c03      	ldr	r4, [sp, #12]
 800a740:	9314      	str	r3, [sp, #80]	; 0x50
 800a742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a746:	f7f6 f977 	bl	8000a38 <__aeabi_d2iz>
 800a74a:	9015      	str	r0, [sp, #84]	; 0x54
 800a74c:	f7f5 fe5a 	bl	8000404 <__aeabi_i2d>
 800a750:	4602      	mov	r2, r0
 800a752:	460b      	mov	r3, r1
 800a754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a758:	f7f5 fd06 	bl	8000168 <__aeabi_dsub>
 800a75c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a75e:	4606      	mov	r6, r0
 800a760:	3330      	adds	r3, #48	; 0x30
 800a762:	f804 3b01 	strb.w	r3, [r4], #1
 800a766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a768:	460f      	mov	r7, r1
 800a76a:	429c      	cmp	r4, r3
 800a76c:	f04f 0200 	mov.w	r2, #0
 800a770:	d124      	bne.n	800a7bc <_dtoa_r+0x63c>
 800a772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a776:	4baf      	ldr	r3, [pc, #700]	; (800aa34 <_dtoa_r+0x8b4>)
 800a778:	f7f5 fcf8 	bl	800016c <__adddf3>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4630      	mov	r0, r6
 800a782:	4639      	mov	r1, r7
 800a784:	f7f6 f938 	bl	80009f8 <__aeabi_dcmpgt>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d163      	bne.n	800a854 <_dtoa_r+0x6d4>
 800a78c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a790:	2000      	movs	r0, #0
 800a792:	49a8      	ldr	r1, [pc, #672]	; (800aa34 <_dtoa_r+0x8b4>)
 800a794:	f7f5 fce8 	bl	8000168 <__aeabi_dsub>
 800a798:	4602      	mov	r2, r0
 800a79a:	460b      	mov	r3, r1
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f90c 	bl	80009bc <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f43f af1e 	beq.w	800a5e6 <_dtoa_r+0x466>
 800a7aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a7ac:	1e7b      	subs	r3, r7, #1
 800a7ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a7b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a7b4:	2b30      	cmp	r3, #48	; 0x30
 800a7b6:	d0f8      	beq.n	800a7aa <_dtoa_r+0x62a>
 800a7b8:	46c3      	mov	fp, r8
 800a7ba:	e03b      	b.n	800a834 <_dtoa_r+0x6b4>
 800a7bc:	4b9e      	ldr	r3, [pc, #632]	; (800aa38 <_dtoa_r+0x8b8>)
 800a7be:	f7f5 fe8b 	bl	80004d8 <__aeabi_dmul>
 800a7c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7c6:	e7bc      	b.n	800a742 <_dtoa_r+0x5c2>
 800a7c8:	9f03      	ldr	r7, [sp, #12]
 800a7ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a7ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f5 ffa9 	bl	800072c <__aeabi_ddiv>
 800a7da:	f7f6 f92d 	bl	8000a38 <__aeabi_d2iz>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	f7f5 fe10 	bl	8000404 <__aeabi_i2d>
 800a7e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7e8:	f7f5 fe76 	bl	80004d8 <__aeabi_dmul>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	4640      	mov	r0, r8
 800a7f2:	4649      	mov	r1, r9
 800a7f4:	f7f5 fcb8 	bl	8000168 <__aeabi_dsub>
 800a7f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a7fc:	f807 6b01 	strb.w	r6, [r7], #1
 800a800:	9e03      	ldr	r6, [sp, #12]
 800a802:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a806:	1bbe      	subs	r6, r7, r6
 800a808:	45b4      	cmp	ip, r6
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	d136      	bne.n	800a87e <_dtoa_r+0x6fe>
 800a810:	f7f5 fcac 	bl	800016c <__adddf3>
 800a814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a818:	4680      	mov	r8, r0
 800a81a:	4689      	mov	r9, r1
 800a81c:	f7f6 f8ec 	bl	80009f8 <__aeabi_dcmpgt>
 800a820:	bb58      	cbnz	r0, 800a87a <_dtoa_r+0x6fa>
 800a822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a826:	4640      	mov	r0, r8
 800a828:	4649      	mov	r1, r9
 800a82a:	f7f6 f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800a82e:	b108      	cbz	r0, 800a834 <_dtoa_r+0x6b4>
 800a830:	07e3      	lsls	r3, r4, #31
 800a832:	d422      	bmi.n	800a87a <_dtoa_r+0x6fa>
 800a834:	4651      	mov	r1, sl
 800a836:	4628      	mov	r0, r5
 800a838:	f000 fbc2 	bl	800afc0 <_Bfree>
 800a83c:	2300      	movs	r3, #0
 800a83e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a840:	703b      	strb	r3, [r7, #0]
 800a842:	f10b 0301 	add.w	r3, fp, #1
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f43f ace6 	beq.w	800a21c <_dtoa_r+0x9c>
 800a850:	601f      	str	r7, [r3, #0]
 800a852:	e4e3      	b.n	800a21c <_dtoa_r+0x9c>
 800a854:	4627      	mov	r7, r4
 800a856:	463b      	mov	r3, r7
 800a858:	461f      	mov	r7, r3
 800a85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85e:	2a39      	cmp	r2, #57	; 0x39
 800a860:	d107      	bne.n	800a872 <_dtoa_r+0x6f2>
 800a862:	9a03      	ldr	r2, [sp, #12]
 800a864:	429a      	cmp	r2, r3
 800a866:	d1f7      	bne.n	800a858 <_dtoa_r+0x6d8>
 800a868:	2230      	movs	r2, #48	; 0x30
 800a86a:	9903      	ldr	r1, [sp, #12]
 800a86c:	f108 0801 	add.w	r8, r8, #1
 800a870:	700a      	strb	r2, [r1, #0]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	3201      	adds	r2, #1
 800a876:	701a      	strb	r2, [r3, #0]
 800a878:	e79e      	b.n	800a7b8 <_dtoa_r+0x638>
 800a87a:	46d8      	mov	r8, fp
 800a87c:	e7eb      	b.n	800a856 <_dtoa_r+0x6d6>
 800a87e:	2200      	movs	r2, #0
 800a880:	4b6d      	ldr	r3, [pc, #436]	; (800aa38 <_dtoa_r+0x8b8>)
 800a882:	f7f5 fe29 	bl	80004d8 <__aeabi_dmul>
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	4680      	mov	r8, r0
 800a88c:	4689      	mov	r9, r1
 800a88e:	f7f6 f88b 	bl	80009a8 <__aeabi_dcmpeq>
 800a892:	2800      	cmp	r0, #0
 800a894:	d09b      	beq.n	800a7ce <_dtoa_r+0x64e>
 800a896:	e7cd      	b.n	800a834 <_dtoa_r+0x6b4>
 800a898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a89a:	2a00      	cmp	r2, #0
 800a89c:	f000 80c4 	beq.w	800aa28 <_dtoa_r+0x8a8>
 800a8a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a8a2:	2a01      	cmp	r2, #1
 800a8a4:	f300 80a8 	bgt.w	800a9f8 <_dtoa_r+0x878>
 800a8a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	f000 80a0 	beq.w	800a9f0 <_dtoa_r+0x870>
 800a8b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a8b4:	464f      	mov	r7, r9
 800a8b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	441a      	add	r2, r3
 800a8be:	4628      	mov	r0, r5
 800a8c0:	4499      	add	r9, r3
 800a8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c4:	f000 fc7c 	bl	800b1c0 <__i2b>
 800a8c8:	4606      	mov	r6, r0
 800a8ca:	b15f      	cbz	r7, 800a8e4 <_dtoa_r+0x764>
 800a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	dd08      	ble.n	800a8e4 <_dtoa_r+0x764>
 800a8d2:	42bb      	cmp	r3, r7
 800a8d4:	bfa8      	it	ge
 800a8d6:	463b      	movge	r3, r7
 800a8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8da:	eba9 0903 	sub.w	r9, r9, r3
 800a8de:	1aff      	subs	r7, r7, r3
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e6:	b1f3      	cbz	r3, 800a926 <_dtoa_r+0x7a6>
 800a8e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	f000 80a0 	beq.w	800aa30 <_dtoa_r+0x8b0>
 800a8f0:	2c00      	cmp	r4, #0
 800a8f2:	dd10      	ble.n	800a916 <_dtoa_r+0x796>
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f000 fd1f 	bl	800b33c <__pow5mult>
 800a8fe:	4652      	mov	r2, sl
 800a900:	4601      	mov	r1, r0
 800a902:	4606      	mov	r6, r0
 800a904:	4628      	mov	r0, r5
 800a906:	f000 fc71 	bl	800b1ec <__multiply>
 800a90a:	4680      	mov	r8, r0
 800a90c:	4651      	mov	r1, sl
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 fb56 	bl	800afc0 <_Bfree>
 800a914:	46c2      	mov	sl, r8
 800a916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a918:	1b1a      	subs	r2, r3, r4
 800a91a:	d004      	beq.n	800a926 <_dtoa_r+0x7a6>
 800a91c:	4651      	mov	r1, sl
 800a91e:	4628      	mov	r0, r5
 800a920:	f000 fd0c 	bl	800b33c <__pow5mult>
 800a924:	4682      	mov	sl, r0
 800a926:	2101      	movs	r1, #1
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 fc49 	bl	800b1c0 <__i2b>
 800a92e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a930:	4604      	mov	r4, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	f340 8082 	ble.w	800aa3c <_dtoa_r+0x8bc>
 800a938:	461a      	mov	r2, r3
 800a93a:	4601      	mov	r1, r0
 800a93c:	4628      	mov	r0, r5
 800a93e:	f000 fcfd 	bl	800b33c <__pow5mult>
 800a942:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a944:	4604      	mov	r4, r0
 800a946:	2b01      	cmp	r3, #1
 800a948:	dd7b      	ble.n	800aa42 <_dtoa_r+0x8c2>
 800a94a:	f04f 0800 	mov.w	r8, #0
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a954:	6918      	ldr	r0, [r3, #16]
 800a956:	f000 fbe5 	bl	800b124 <__hi0bits>
 800a95a:	f1c0 0020 	rsb	r0, r0, #32
 800a95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a960:	4418      	add	r0, r3
 800a962:	f010 001f 	ands.w	r0, r0, #31
 800a966:	f000 8092 	beq.w	800aa8e <_dtoa_r+0x90e>
 800a96a:	f1c0 0320 	rsb	r3, r0, #32
 800a96e:	2b04      	cmp	r3, #4
 800a970:	f340 8085 	ble.w	800aa7e <_dtoa_r+0x8fe>
 800a974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a976:	f1c0 001c 	rsb	r0, r0, #28
 800a97a:	4403      	add	r3, r0
 800a97c:	4481      	add	r9, r0
 800a97e:	4407      	add	r7, r0
 800a980:	9309      	str	r3, [sp, #36]	; 0x24
 800a982:	f1b9 0f00 	cmp.w	r9, #0
 800a986:	dd05      	ble.n	800a994 <_dtoa_r+0x814>
 800a988:	4651      	mov	r1, sl
 800a98a:	464a      	mov	r2, r9
 800a98c:	4628      	mov	r0, r5
 800a98e:	f000 fd2f 	bl	800b3f0 <__lshift>
 800a992:	4682      	mov	sl, r0
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	dd05      	ble.n	800a9a6 <_dtoa_r+0x826>
 800a99a:	4621      	mov	r1, r4
 800a99c:	461a      	mov	r2, r3
 800a99e:	4628      	mov	r0, r5
 800a9a0:	f000 fd26 	bl	800b3f0 <__lshift>
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d072      	beq.n	800aa92 <_dtoa_r+0x912>
 800a9ac:	4621      	mov	r1, r4
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	f000 fd8a 	bl	800b4c8 <__mcmp>
 800a9b4:	2800      	cmp	r0, #0
 800a9b6:	da6c      	bge.n	800aa92 <_dtoa_r+0x912>
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	4651      	mov	r1, sl
 800a9bc:	220a      	movs	r2, #10
 800a9be:	4628      	mov	r0, r5
 800a9c0:	f000 fb20 	bl	800b004 <__multadd>
 800a9c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c6:	4682      	mov	sl, r0
 800a9c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 81ac 	beq.w	800ad2a <_dtoa_r+0xbaa>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	220a      	movs	r2, #10
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f000 fb13 	bl	800b004 <__multadd>
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	4606      	mov	r6, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f300 8093 	bgt.w	800ab0e <_dtoa_r+0x98e>
 800a9e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ea:	2b02      	cmp	r3, #2
 800a9ec:	dc59      	bgt.n	800aaa2 <_dtoa_r+0x922>
 800a9ee:	e08e      	b.n	800ab0e <_dtoa_r+0x98e>
 800a9f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9f6:	e75d      	b.n	800a8b4 <_dtoa_r+0x734>
 800a9f8:	9b08      	ldr	r3, [sp, #32]
 800a9fa:	1e5c      	subs	r4, r3, #1
 800a9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9fe:	42a3      	cmp	r3, r4
 800aa00:	bfbf      	itttt	lt
 800aa02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aa04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800aa06:	1ae3      	sublt	r3, r4, r3
 800aa08:	18d2      	addlt	r2, r2, r3
 800aa0a:	bfa8      	it	ge
 800aa0c:	1b1c      	subge	r4, r3, r4
 800aa0e:	9b08      	ldr	r3, [sp, #32]
 800aa10:	bfbe      	ittt	lt
 800aa12:	940a      	strlt	r4, [sp, #40]	; 0x28
 800aa14:	920e      	strlt	r2, [sp, #56]	; 0x38
 800aa16:	2400      	movlt	r4, #0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bfb5      	itete	lt
 800aa1c:	eba9 0703 	sublt.w	r7, r9, r3
 800aa20:	464f      	movge	r7, r9
 800aa22:	2300      	movlt	r3, #0
 800aa24:	9b08      	ldrge	r3, [sp, #32]
 800aa26:	e747      	b.n	800a8b8 <_dtoa_r+0x738>
 800aa28:	464f      	mov	r7, r9
 800aa2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800aa2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800aa2e:	e74c      	b.n	800a8ca <_dtoa_r+0x74a>
 800aa30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa32:	e773      	b.n	800a91c <_dtoa_r+0x79c>
 800aa34:	3fe00000 	.word	0x3fe00000
 800aa38:	40240000 	.word	0x40240000
 800aa3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	dc18      	bgt.n	800aa74 <_dtoa_r+0x8f4>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	b9b3      	cbnz	r3, 800aa74 <_dtoa_r+0x8f4>
 800aa46:	9b05      	ldr	r3, [sp, #20]
 800aa48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa4c:	b993      	cbnz	r3, 800aa74 <_dtoa_r+0x8f4>
 800aa4e:	9b05      	ldr	r3, [sp, #20]
 800aa50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa54:	0d1b      	lsrs	r3, r3, #20
 800aa56:	051b      	lsls	r3, r3, #20
 800aa58:	b17b      	cbz	r3, 800aa7a <_dtoa_r+0x8fa>
 800aa5a:	f04f 0801 	mov.w	r8, #1
 800aa5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa60:	f109 0901 	add.w	r9, r9, #1
 800aa64:	3301      	adds	r3, #1
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f47f af6f 	bne.w	800a94e <_dtoa_r+0x7ce>
 800aa70:	2001      	movs	r0, #1
 800aa72:	e774      	b.n	800a95e <_dtoa_r+0x7de>
 800aa74:	f04f 0800 	mov.w	r8, #0
 800aa78:	e7f6      	b.n	800aa68 <_dtoa_r+0x8e8>
 800aa7a:	4698      	mov	r8, r3
 800aa7c:	e7f4      	b.n	800aa68 <_dtoa_r+0x8e8>
 800aa7e:	d080      	beq.n	800a982 <_dtoa_r+0x802>
 800aa80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa82:	331c      	adds	r3, #28
 800aa84:	441a      	add	r2, r3
 800aa86:	4499      	add	r9, r3
 800aa88:	441f      	add	r7, r3
 800aa8a:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8c:	e779      	b.n	800a982 <_dtoa_r+0x802>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	e7f6      	b.n	800aa80 <_dtoa_r+0x900>
 800aa92:	9b08      	ldr	r3, [sp, #32]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dc34      	bgt.n	800ab02 <_dtoa_r+0x982>
 800aa98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	dd31      	ble.n	800ab02 <_dtoa_r+0x982>
 800aa9e:	9b08      	ldr	r3, [sp, #32]
 800aaa0:	9306      	str	r3, [sp, #24]
 800aaa2:	9b06      	ldr	r3, [sp, #24]
 800aaa4:	b963      	cbnz	r3, 800aac0 <_dtoa_r+0x940>
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	2205      	movs	r2, #5
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f000 faaa 	bl	800b004 <__multadd>
 800aab0:	4601      	mov	r1, r0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4650      	mov	r0, sl
 800aab6:	f000 fd07 	bl	800b4c8 <__mcmp>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f73f adbf 	bgt.w	800a63e <_dtoa_r+0x4be>
 800aac0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aac2:	9f03      	ldr	r7, [sp, #12]
 800aac4:	ea6f 0b03 	mvn.w	fp, r3
 800aac8:	f04f 0800 	mov.w	r8, #0
 800aacc:	4621      	mov	r1, r4
 800aace:	4628      	mov	r0, r5
 800aad0:	f000 fa76 	bl	800afc0 <_Bfree>
 800aad4:	2e00      	cmp	r6, #0
 800aad6:	f43f aead 	beq.w	800a834 <_dtoa_r+0x6b4>
 800aada:	f1b8 0f00 	cmp.w	r8, #0
 800aade:	d005      	beq.n	800aaec <_dtoa_r+0x96c>
 800aae0:	45b0      	cmp	r8, r6
 800aae2:	d003      	beq.n	800aaec <_dtoa_r+0x96c>
 800aae4:	4641      	mov	r1, r8
 800aae6:	4628      	mov	r0, r5
 800aae8:	f000 fa6a 	bl	800afc0 <_Bfree>
 800aaec:	4631      	mov	r1, r6
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 fa66 	bl	800afc0 <_Bfree>
 800aaf4:	e69e      	b.n	800a834 <_dtoa_r+0x6b4>
 800aaf6:	2400      	movs	r4, #0
 800aaf8:	4626      	mov	r6, r4
 800aafa:	e7e1      	b.n	800aac0 <_dtoa_r+0x940>
 800aafc:	46c3      	mov	fp, r8
 800aafe:	4626      	mov	r6, r4
 800ab00:	e59d      	b.n	800a63e <_dtoa_r+0x4be>
 800ab02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80c8 	beq.w	800ac9a <_dtoa_r+0xb1a>
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	9306      	str	r3, [sp, #24]
 800ab0e:	2f00      	cmp	r7, #0
 800ab10:	dd05      	ble.n	800ab1e <_dtoa_r+0x99e>
 800ab12:	4631      	mov	r1, r6
 800ab14:	463a      	mov	r2, r7
 800ab16:	4628      	mov	r0, r5
 800ab18:	f000 fc6a 	bl	800b3f0 <__lshift>
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	f1b8 0f00 	cmp.w	r8, #0
 800ab22:	d05b      	beq.n	800abdc <_dtoa_r+0xa5c>
 800ab24:	4628      	mov	r0, r5
 800ab26:	6871      	ldr	r1, [r6, #4]
 800ab28:	f000 fa0a 	bl	800af40 <_Balloc>
 800ab2c:	4607      	mov	r7, r0
 800ab2e:	b928      	cbnz	r0, 800ab3c <_dtoa_r+0x9bc>
 800ab30:	4602      	mov	r2, r0
 800ab32:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ab36:	4b81      	ldr	r3, [pc, #516]	; (800ad3c <_dtoa_r+0xbbc>)
 800ab38:	f7ff bb36 	b.w	800a1a8 <_dtoa_r+0x28>
 800ab3c:	6932      	ldr	r2, [r6, #16]
 800ab3e:	f106 010c 	add.w	r1, r6, #12
 800ab42:	3202      	adds	r2, #2
 800ab44:	0092      	lsls	r2, r2, #2
 800ab46:	300c      	adds	r0, #12
 800ab48:	f001 fef2 	bl	800c930 <memcpy>
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	4639      	mov	r1, r7
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 fc4d 	bl	800b3f0 <__lshift>
 800ab56:	46b0      	mov	r8, r6
 800ab58:	4606      	mov	r6, r0
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	9a03      	ldr	r2, [sp, #12]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	9308      	str	r3, [sp, #32]
 800ab62:	9b06      	ldr	r3, [sp, #24]
 800ab64:	4413      	add	r3, r2
 800ab66:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab68:	9b04      	ldr	r3, [sp, #16]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab70:	9b08      	ldr	r3, [sp, #32]
 800ab72:	4621      	mov	r1, r4
 800ab74:	3b01      	subs	r3, #1
 800ab76:	4650      	mov	r0, sl
 800ab78:	9304      	str	r3, [sp, #16]
 800ab7a:	f7ff fa75 	bl	800a068 <quorem>
 800ab7e:	4641      	mov	r1, r8
 800ab80:	9006      	str	r0, [sp, #24]
 800ab82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab86:	4650      	mov	r0, sl
 800ab88:	f000 fc9e 	bl	800b4c8 <__mcmp>
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	9009      	str	r0, [sp, #36]	; 0x24
 800ab90:	4621      	mov	r1, r4
 800ab92:	4628      	mov	r0, r5
 800ab94:	f000 fcb4 	bl	800b500 <__mdiff>
 800ab98:	68c2      	ldr	r2, [r0, #12]
 800ab9a:	4607      	mov	r7, r0
 800ab9c:	bb02      	cbnz	r2, 800abe0 <_dtoa_r+0xa60>
 800ab9e:	4601      	mov	r1, r0
 800aba0:	4650      	mov	r0, sl
 800aba2:	f000 fc91 	bl	800b4c8 <__mcmp>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4639      	mov	r1, r7
 800abaa:	4628      	mov	r0, r5
 800abac:	920c      	str	r2, [sp, #48]	; 0x30
 800abae:	f000 fa07 	bl	800afc0 <_Bfree>
 800abb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abb6:	9f08      	ldr	r7, [sp, #32]
 800abb8:	ea43 0102 	orr.w	r1, r3, r2
 800abbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abbe:	4319      	orrs	r1, r3
 800abc0:	d110      	bne.n	800abe4 <_dtoa_r+0xa64>
 800abc2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abc6:	d029      	beq.n	800ac1c <_dtoa_r+0xa9c>
 800abc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abca:	2b00      	cmp	r3, #0
 800abcc:	dd02      	ble.n	800abd4 <_dtoa_r+0xa54>
 800abce:	9b06      	ldr	r3, [sp, #24]
 800abd0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800abd4:	9b04      	ldr	r3, [sp, #16]
 800abd6:	f883 9000 	strb.w	r9, [r3]
 800abda:	e777      	b.n	800aacc <_dtoa_r+0x94c>
 800abdc:	4630      	mov	r0, r6
 800abde:	e7ba      	b.n	800ab56 <_dtoa_r+0x9d6>
 800abe0:	2201      	movs	r2, #1
 800abe2:	e7e1      	b.n	800aba8 <_dtoa_r+0xa28>
 800abe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	db04      	blt.n	800abf4 <_dtoa_r+0xa74>
 800abea:	9922      	ldr	r1, [sp, #136]	; 0x88
 800abec:	430b      	orrs	r3, r1
 800abee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abf0:	430b      	orrs	r3, r1
 800abf2:	d120      	bne.n	800ac36 <_dtoa_r+0xab6>
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	dded      	ble.n	800abd4 <_dtoa_r+0xa54>
 800abf8:	4651      	mov	r1, sl
 800abfa:	2201      	movs	r2, #1
 800abfc:	4628      	mov	r0, r5
 800abfe:	f000 fbf7 	bl	800b3f0 <__lshift>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4682      	mov	sl, r0
 800ac06:	f000 fc5f 	bl	800b4c8 <__mcmp>
 800ac0a:	2800      	cmp	r0, #0
 800ac0c:	dc03      	bgt.n	800ac16 <_dtoa_r+0xa96>
 800ac0e:	d1e1      	bne.n	800abd4 <_dtoa_r+0xa54>
 800ac10:	f019 0f01 	tst.w	r9, #1
 800ac14:	d0de      	beq.n	800abd4 <_dtoa_r+0xa54>
 800ac16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac1a:	d1d8      	bne.n	800abce <_dtoa_r+0xa4e>
 800ac1c:	2339      	movs	r3, #57	; 0x39
 800ac1e:	9a04      	ldr	r2, [sp, #16]
 800ac20:	7013      	strb	r3, [r2, #0]
 800ac22:	463b      	mov	r3, r7
 800ac24:	461f      	mov	r7, r3
 800ac26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	2a39      	cmp	r2, #57	; 0x39
 800ac2e:	d06b      	beq.n	800ad08 <_dtoa_r+0xb88>
 800ac30:	3201      	adds	r2, #1
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e74a      	b.n	800aacc <_dtoa_r+0x94c>
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	dd07      	ble.n	800ac4a <_dtoa_r+0xaca>
 800ac3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ac3e:	d0ed      	beq.n	800ac1c <_dtoa_r+0xa9c>
 800ac40:	9a04      	ldr	r2, [sp, #16]
 800ac42:	f109 0301 	add.w	r3, r9, #1
 800ac46:	7013      	strb	r3, [r2, #0]
 800ac48:	e740      	b.n	800aacc <_dtoa_r+0x94c>
 800ac4a:	9b08      	ldr	r3, [sp, #32]
 800ac4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d042      	beq.n	800acdc <_dtoa_r+0xb5c>
 800ac56:	4651      	mov	r1, sl
 800ac58:	2300      	movs	r3, #0
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	f000 f9d1 	bl	800b004 <__multadd>
 800ac62:	45b0      	cmp	r8, r6
 800ac64:	4682      	mov	sl, r0
 800ac66:	f04f 0300 	mov.w	r3, #0
 800ac6a:	f04f 020a 	mov.w	r2, #10
 800ac6e:	4641      	mov	r1, r8
 800ac70:	4628      	mov	r0, r5
 800ac72:	d107      	bne.n	800ac84 <_dtoa_r+0xb04>
 800ac74:	f000 f9c6 	bl	800b004 <__multadd>
 800ac78:	4680      	mov	r8, r0
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	9b08      	ldr	r3, [sp, #32]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	9308      	str	r3, [sp, #32]
 800ac82:	e775      	b.n	800ab70 <_dtoa_r+0x9f0>
 800ac84:	f000 f9be 	bl	800b004 <__multadd>
 800ac88:	4631      	mov	r1, r6
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	220a      	movs	r2, #10
 800ac90:	4628      	mov	r0, r5
 800ac92:	f000 f9b7 	bl	800b004 <__multadd>
 800ac96:	4606      	mov	r6, r0
 800ac98:	e7f0      	b.n	800ac7c <_dtoa_r+0xafc>
 800ac9a:	9b08      	ldr	r3, [sp, #32]
 800ac9c:	9306      	str	r3, [sp, #24]
 800ac9e:	9f03      	ldr	r7, [sp, #12]
 800aca0:	4621      	mov	r1, r4
 800aca2:	4650      	mov	r0, sl
 800aca4:	f7ff f9e0 	bl	800a068 <quorem>
 800aca8:	9b03      	ldr	r3, [sp, #12]
 800acaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800acae:	f807 9b01 	strb.w	r9, [r7], #1
 800acb2:	1afa      	subs	r2, r7, r3
 800acb4:	9b06      	ldr	r3, [sp, #24]
 800acb6:	4293      	cmp	r3, r2
 800acb8:	dd07      	ble.n	800acca <_dtoa_r+0xb4a>
 800acba:	4651      	mov	r1, sl
 800acbc:	2300      	movs	r3, #0
 800acbe:	220a      	movs	r2, #10
 800acc0:	4628      	mov	r0, r5
 800acc2:	f000 f99f 	bl	800b004 <__multadd>
 800acc6:	4682      	mov	sl, r0
 800acc8:	e7ea      	b.n	800aca0 <_dtoa_r+0xb20>
 800acca:	9b06      	ldr	r3, [sp, #24]
 800accc:	f04f 0800 	mov.w	r8, #0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bfcc      	ite	gt
 800acd4:	461f      	movgt	r7, r3
 800acd6:	2701      	movle	r7, #1
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	441f      	add	r7, r3
 800acdc:	4651      	mov	r1, sl
 800acde:	2201      	movs	r2, #1
 800ace0:	4628      	mov	r0, r5
 800ace2:	f000 fb85 	bl	800b3f0 <__lshift>
 800ace6:	4621      	mov	r1, r4
 800ace8:	4682      	mov	sl, r0
 800acea:	f000 fbed 	bl	800b4c8 <__mcmp>
 800acee:	2800      	cmp	r0, #0
 800acf0:	dc97      	bgt.n	800ac22 <_dtoa_r+0xaa2>
 800acf2:	d102      	bne.n	800acfa <_dtoa_r+0xb7a>
 800acf4:	f019 0f01 	tst.w	r9, #1
 800acf8:	d193      	bne.n	800ac22 <_dtoa_r+0xaa2>
 800acfa:	463b      	mov	r3, r7
 800acfc:	461f      	mov	r7, r3
 800acfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad02:	2a30      	cmp	r2, #48	; 0x30
 800ad04:	d0fa      	beq.n	800acfc <_dtoa_r+0xb7c>
 800ad06:	e6e1      	b.n	800aacc <_dtoa_r+0x94c>
 800ad08:	9a03      	ldr	r2, [sp, #12]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d18a      	bne.n	800ac24 <_dtoa_r+0xaa4>
 800ad0e:	2331      	movs	r3, #49	; 0x31
 800ad10:	f10b 0b01 	add.w	fp, fp, #1
 800ad14:	e797      	b.n	800ac46 <_dtoa_r+0xac6>
 800ad16:	4b0a      	ldr	r3, [pc, #40]	; (800ad40 <_dtoa_r+0xbc0>)
 800ad18:	f7ff ba9f 	b.w	800a25a <_dtoa_r+0xda>
 800ad1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	f47f aa77 	bne.w	800a212 <_dtoa_r+0x92>
 800ad24:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <_dtoa_r+0xbc4>)
 800ad26:	f7ff ba98 	b.w	800a25a <_dtoa_r+0xda>
 800ad2a:	9b06      	ldr	r3, [sp, #24]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	dcb6      	bgt.n	800ac9e <_dtoa_r+0xb1e>
 800ad30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	f73f aeb5 	bgt.w	800aaa2 <_dtoa_r+0x922>
 800ad38:	e7b1      	b.n	800ac9e <_dtoa_r+0xb1e>
 800ad3a:	bf00      	nop
 800ad3c:	0800dc40 	.word	0x0800dc40
 800ad40:	0800db9b 	.word	0x0800db9b
 800ad44:	0800dbc4 	.word	0x0800dbc4

0800ad48 <_free_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	2900      	cmp	r1, #0
 800ad4e:	d040      	beq.n	800add2 <_free_r+0x8a>
 800ad50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad54:	1f0c      	subs	r4, r1, #4
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bfb8      	it	lt
 800ad5a:	18e4      	addlt	r4, r4, r3
 800ad5c:	f000 f8e4 	bl	800af28 <__malloc_lock>
 800ad60:	4a1c      	ldr	r2, [pc, #112]	; (800add4 <_free_r+0x8c>)
 800ad62:	6813      	ldr	r3, [r2, #0]
 800ad64:	b933      	cbnz	r3, 800ad74 <_free_r+0x2c>
 800ad66:	6063      	str	r3, [r4, #4]
 800ad68:	6014      	str	r4, [r2, #0]
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad70:	f000 b8e0 	b.w	800af34 <__malloc_unlock>
 800ad74:	42a3      	cmp	r3, r4
 800ad76:	d908      	bls.n	800ad8a <_free_r+0x42>
 800ad78:	6820      	ldr	r0, [r4, #0]
 800ad7a:	1821      	adds	r1, r4, r0
 800ad7c:	428b      	cmp	r3, r1
 800ad7e:	bf01      	itttt	eq
 800ad80:	6819      	ldreq	r1, [r3, #0]
 800ad82:	685b      	ldreq	r3, [r3, #4]
 800ad84:	1809      	addeq	r1, r1, r0
 800ad86:	6021      	streq	r1, [r4, #0]
 800ad88:	e7ed      	b.n	800ad66 <_free_r+0x1e>
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	b10b      	cbz	r3, 800ad94 <_free_r+0x4c>
 800ad90:	42a3      	cmp	r3, r4
 800ad92:	d9fa      	bls.n	800ad8a <_free_r+0x42>
 800ad94:	6811      	ldr	r1, [r2, #0]
 800ad96:	1850      	adds	r0, r2, r1
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d10b      	bne.n	800adb4 <_free_r+0x6c>
 800ad9c:	6820      	ldr	r0, [r4, #0]
 800ad9e:	4401      	add	r1, r0
 800ada0:	1850      	adds	r0, r2, r1
 800ada2:	4283      	cmp	r3, r0
 800ada4:	6011      	str	r1, [r2, #0]
 800ada6:	d1e0      	bne.n	800ad6a <_free_r+0x22>
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	4408      	add	r0, r1
 800adae:	6010      	str	r0, [r2, #0]
 800adb0:	6053      	str	r3, [r2, #4]
 800adb2:	e7da      	b.n	800ad6a <_free_r+0x22>
 800adb4:	d902      	bls.n	800adbc <_free_r+0x74>
 800adb6:	230c      	movs	r3, #12
 800adb8:	602b      	str	r3, [r5, #0]
 800adba:	e7d6      	b.n	800ad6a <_free_r+0x22>
 800adbc:	6820      	ldr	r0, [r4, #0]
 800adbe:	1821      	adds	r1, r4, r0
 800adc0:	428b      	cmp	r3, r1
 800adc2:	bf01      	itttt	eq
 800adc4:	6819      	ldreq	r1, [r3, #0]
 800adc6:	685b      	ldreq	r3, [r3, #4]
 800adc8:	1809      	addeq	r1, r1, r0
 800adca:	6021      	streq	r1, [r4, #0]
 800adcc:	6063      	str	r3, [r4, #4]
 800adce:	6054      	str	r4, [r2, #4]
 800add0:	e7cb      	b.n	800ad6a <_free_r+0x22>
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	20000694 	.word	0x20000694

0800add8 <malloc>:
 800add8:	4b02      	ldr	r3, [pc, #8]	; (800ade4 <malloc+0xc>)
 800adda:	4601      	mov	r1, r0
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	f000 b823 	b.w	800ae28 <_malloc_r>
 800ade2:	bf00      	nop
 800ade4:	20000068 	.word	0x20000068

0800ade8 <sbrk_aligned>:
 800ade8:	b570      	push	{r4, r5, r6, lr}
 800adea:	4e0e      	ldr	r6, [pc, #56]	; (800ae24 <sbrk_aligned+0x3c>)
 800adec:	460c      	mov	r4, r1
 800adee:	6831      	ldr	r1, [r6, #0]
 800adf0:	4605      	mov	r5, r0
 800adf2:	b911      	cbnz	r1, 800adfa <sbrk_aligned+0x12>
 800adf4:	f001 fd8c 	bl	800c910 <_sbrk_r>
 800adf8:	6030      	str	r0, [r6, #0]
 800adfa:	4621      	mov	r1, r4
 800adfc:	4628      	mov	r0, r5
 800adfe:	f001 fd87 	bl	800c910 <_sbrk_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	d00a      	beq.n	800ae1c <sbrk_aligned+0x34>
 800ae06:	1cc4      	adds	r4, r0, #3
 800ae08:	f024 0403 	bic.w	r4, r4, #3
 800ae0c:	42a0      	cmp	r0, r4
 800ae0e:	d007      	beq.n	800ae20 <sbrk_aligned+0x38>
 800ae10:	1a21      	subs	r1, r4, r0
 800ae12:	4628      	mov	r0, r5
 800ae14:	f001 fd7c 	bl	800c910 <_sbrk_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	d101      	bne.n	800ae20 <sbrk_aligned+0x38>
 800ae1c:	f04f 34ff 	mov.w	r4, #4294967295
 800ae20:	4620      	mov	r0, r4
 800ae22:	bd70      	pop	{r4, r5, r6, pc}
 800ae24:	20000698 	.word	0x20000698

0800ae28 <_malloc_r>:
 800ae28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae2c:	1ccd      	adds	r5, r1, #3
 800ae2e:	f025 0503 	bic.w	r5, r5, #3
 800ae32:	3508      	adds	r5, #8
 800ae34:	2d0c      	cmp	r5, #12
 800ae36:	bf38      	it	cc
 800ae38:	250c      	movcc	r5, #12
 800ae3a:	2d00      	cmp	r5, #0
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	db01      	blt.n	800ae44 <_malloc_r+0x1c>
 800ae40:	42a9      	cmp	r1, r5
 800ae42:	d905      	bls.n	800ae50 <_malloc_r+0x28>
 800ae44:	230c      	movs	r3, #12
 800ae46:	2600      	movs	r6, #0
 800ae48:	603b      	str	r3, [r7, #0]
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800af24 <_malloc_r+0xfc>
 800ae54:	f000 f868 	bl	800af28 <__malloc_lock>
 800ae58:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5c:	461c      	mov	r4, r3
 800ae5e:	bb5c      	cbnz	r4, 800aeb8 <_malloc_r+0x90>
 800ae60:	4629      	mov	r1, r5
 800ae62:	4638      	mov	r0, r7
 800ae64:	f7ff ffc0 	bl	800ade8 <sbrk_aligned>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	d155      	bne.n	800af1a <_malloc_r+0xf2>
 800ae6e:	f8d8 4000 	ldr.w	r4, [r8]
 800ae72:	4626      	mov	r6, r4
 800ae74:	2e00      	cmp	r6, #0
 800ae76:	d145      	bne.n	800af04 <_malloc_r+0xdc>
 800ae78:	2c00      	cmp	r4, #0
 800ae7a:	d048      	beq.n	800af0e <_malloc_r+0xe6>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	4631      	mov	r1, r6
 800ae80:	4638      	mov	r0, r7
 800ae82:	eb04 0903 	add.w	r9, r4, r3
 800ae86:	f001 fd43 	bl	800c910 <_sbrk_r>
 800ae8a:	4581      	cmp	r9, r0
 800ae8c:	d13f      	bne.n	800af0e <_malloc_r+0xe6>
 800ae8e:	6821      	ldr	r1, [r4, #0]
 800ae90:	4638      	mov	r0, r7
 800ae92:	1a6d      	subs	r5, r5, r1
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7ff ffa7 	bl	800ade8 <sbrk_aligned>
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	d037      	beq.n	800af0e <_malloc_r+0xe6>
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	442b      	add	r3, r5
 800aea2:	6023      	str	r3, [r4, #0]
 800aea4:	f8d8 3000 	ldr.w	r3, [r8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d038      	beq.n	800af1e <_malloc_r+0xf6>
 800aeac:	685a      	ldr	r2, [r3, #4]
 800aeae:	42a2      	cmp	r2, r4
 800aeb0:	d12b      	bne.n	800af0a <_malloc_r+0xe2>
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	605a      	str	r2, [r3, #4]
 800aeb6:	e00f      	b.n	800aed8 <_malloc_r+0xb0>
 800aeb8:	6822      	ldr	r2, [r4, #0]
 800aeba:	1b52      	subs	r2, r2, r5
 800aebc:	d41f      	bmi.n	800aefe <_malloc_r+0xd6>
 800aebe:	2a0b      	cmp	r2, #11
 800aec0:	d917      	bls.n	800aef2 <_malloc_r+0xca>
 800aec2:	1961      	adds	r1, r4, r5
 800aec4:	42a3      	cmp	r3, r4
 800aec6:	6025      	str	r5, [r4, #0]
 800aec8:	bf18      	it	ne
 800aeca:	6059      	strne	r1, [r3, #4]
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	bf08      	it	eq
 800aed0:	f8c8 1000 	streq.w	r1, [r8]
 800aed4:	5162      	str	r2, [r4, r5]
 800aed6:	604b      	str	r3, [r1, #4]
 800aed8:	4638      	mov	r0, r7
 800aeda:	f104 060b 	add.w	r6, r4, #11
 800aede:	f000 f829 	bl	800af34 <__malloc_unlock>
 800aee2:	f026 0607 	bic.w	r6, r6, #7
 800aee6:	1d23      	adds	r3, r4, #4
 800aee8:	1af2      	subs	r2, r6, r3
 800aeea:	d0ae      	beq.n	800ae4a <_malloc_r+0x22>
 800aeec:	1b9b      	subs	r3, r3, r6
 800aeee:	50a3      	str	r3, [r4, r2]
 800aef0:	e7ab      	b.n	800ae4a <_malloc_r+0x22>
 800aef2:	42a3      	cmp	r3, r4
 800aef4:	6862      	ldr	r2, [r4, #4]
 800aef6:	d1dd      	bne.n	800aeb4 <_malloc_r+0x8c>
 800aef8:	f8c8 2000 	str.w	r2, [r8]
 800aefc:	e7ec      	b.n	800aed8 <_malloc_r+0xb0>
 800aefe:	4623      	mov	r3, r4
 800af00:	6864      	ldr	r4, [r4, #4]
 800af02:	e7ac      	b.n	800ae5e <_malloc_r+0x36>
 800af04:	4634      	mov	r4, r6
 800af06:	6876      	ldr	r6, [r6, #4]
 800af08:	e7b4      	b.n	800ae74 <_malloc_r+0x4c>
 800af0a:	4613      	mov	r3, r2
 800af0c:	e7cc      	b.n	800aea8 <_malloc_r+0x80>
 800af0e:	230c      	movs	r3, #12
 800af10:	4638      	mov	r0, r7
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	f000 f80e 	bl	800af34 <__malloc_unlock>
 800af18:	e797      	b.n	800ae4a <_malloc_r+0x22>
 800af1a:	6025      	str	r5, [r4, #0]
 800af1c:	e7dc      	b.n	800aed8 <_malloc_r+0xb0>
 800af1e:	605b      	str	r3, [r3, #4]
 800af20:	deff      	udf	#255	; 0xff
 800af22:	bf00      	nop
 800af24:	20000694 	.word	0x20000694

0800af28 <__malloc_lock>:
 800af28:	4801      	ldr	r0, [pc, #4]	; (800af30 <__malloc_lock+0x8>)
 800af2a:	f7ff b888 	b.w	800a03e <__retarget_lock_acquire_recursive>
 800af2e:	bf00      	nop
 800af30:	20000690 	.word	0x20000690

0800af34 <__malloc_unlock>:
 800af34:	4801      	ldr	r0, [pc, #4]	; (800af3c <__malloc_unlock+0x8>)
 800af36:	f7ff b883 	b.w	800a040 <__retarget_lock_release_recursive>
 800af3a:	bf00      	nop
 800af3c:	20000690 	.word	0x20000690

0800af40 <_Balloc>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	69c6      	ldr	r6, [r0, #28]
 800af44:	4604      	mov	r4, r0
 800af46:	460d      	mov	r5, r1
 800af48:	b976      	cbnz	r6, 800af68 <_Balloc+0x28>
 800af4a:	2010      	movs	r0, #16
 800af4c:	f7ff ff44 	bl	800add8 <malloc>
 800af50:	4602      	mov	r2, r0
 800af52:	61e0      	str	r0, [r4, #28]
 800af54:	b920      	cbnz	r0, 800af60 <_Balloc+0x20>
 800af56:	216b      	movs	r1, #107	; 0x6b
 800af58:	4b17      	ldr	r3, [pc, #92]	; (800afb8 <_Balloc+0x78>)
 800af5a:	4818      	ldr	r0, [pc, #96]	; (800afbc <_Balloc+0x7c>)
 800af5c:	f001 fcfc 	bl	800c958 <__assert_func>
 800af60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af64:	6006      	str	r6, [r0, #0]
 800af66:	60c6      	str	r6, [r0, #12]
 800af68:	69e6      	ldr	r6, [r4, #28]
 800af6a:	68f3      	ldr	r3, [r6, #12]
 800af6c:	b183      	cbz	r3, 800af90 <_Balloc+0x50>
 800af6e:	69e3      	ldr	r3, [r4, #28]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af76:	b9b8      	cbnz	r0, 800afa8 <_Balloc+0x68>
 800af78:	2101      	movs	r1, #1
 800af7a:	fa01 f605 	lsl.w	r6, r1, r5
 800af7e:	1d72      	adds	r2, r6, #5
 800af80:	4620      	mov	r0, r4
 800af82:	0092      	lsls	r2, r2, #2
 800af84:	f001 fd06 	bl	800c994 <_calloc_r>
 800af88:	b160      	cbz	r0, 800afa4 <_Balloc+0x64>
 800af8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af8e:	e00e      	b.n	800afae <_Balloc+0x6e>
 800af90:	2221      	movs	r2, #33	; 0x21
 800af92:	2104      	movs	r1, #4
 800af94:	4620      	mov	r0, r4
 800af96:	f001 fcfd 	bl	800c994 <_calloc_r>
 800af9a:	69e3      	ldr	r3, [r4, #28]
 800af9c:	60f0      	str	r0, [r6, #12]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1e4      	bne.n	800af6e <_Balloc+0x2e>
 800afa4:	2000      	movs	r0, #0
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	6802      	ldr	r2, [r0, #0]
 800afaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afae:	2300      	movs	r3, #0
 800afb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afb4:	e7f7      	b.n	800afa6 <_Balloc+0x66>
 800afb6:	bf00      	nop
 800afb8:	0800dbd1 	.word	0x0800dbd1
 800afbc:	0800dc51 	.word	0x0800dc51

0800afc0 <_Bfree>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	69c6      	ldr	r6, [r0, #28]
 800afc4:	4605      	mov	r5, r0
 800afc6:	460c      	mov	r4, r1
 800afc8:	b976      	cbnz	r6, 800afe8 <_Bfree+0x28>
 800afca:	2010      	movs	r0, #16
 800afcc:	f7ff ff04 	bl	800add8 <malloc>
 800afd0:	4602      	mov	r2, r0
 800afd2:	61e8      	str	r0, [r5, #28]
 800afd4:	b920      	cbnz	r0, 800afe0 <_Bfree+0x20>
 800afd6:	218f      	movs	r1, #143	; 0x8f
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <_Bfree+0x3c>)
 800afda:	4809      	ldr	r0, [pc, #36]	; (800b000 <_Bfree+0x40>)
 800afdc:	f001 fcbc 	bl	800c958 <__assert_func>
 800afe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afe4:	6006      	str	r6, [r0, #0]
 800afe6:	60c6      	str	r6, [r0, #12]
 800afe8:	b13c      	cbz	r4, 800affa <_Bfree+0x3a>
 800afea:	69eb      	ldr	r3, [r5, #28]
 800afec:	6862      	ldr	r2, [r4, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aff4:	6021      	str	r1, [r4, #0]
 800aff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	0800dbd1 	.word	0x0800dbd1
 800b000:	0800dc51 	.word	0x0800dc51

0800b004 <__multadd>:
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	4607      	mov	r7, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	461e      	mov	r6, r3
 800b00e:	2000      	movs	r0, #0
 800b010:	690d      	ldr	r5, [r1, #16]
 800b012:	f101 0c14 	add.w	ip, r1, #20
 800b016:	f8dc 3000 	ldr.w	r3, [ip]
 800b01a:	3001      	adds	r0, #1
 800b01c:	b299      	uxth	r1, r3
 800b01e:	fb02 6101 	mla	r1, r2, r1, r6
 800b022:	0c1e      	lsrs	r6, r3, #16
 800b024:	0c0b      	lsrs	r3, r1, #16
 800b026:	fb02 3306 	mla	r3, r2, r6, r3
 800b02a:	b289      	uxth	r1, r1
 800b02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b030:	4285      	cmp	r5, r0
 800b032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b036:	f84c 1b04 	str.w	r1, [ip], #4
 800b03a:	dcec      	bgt.n	800b016 <__multadd+0x12>
 800b03c:	b30e      	cbz	r6, 800b082 <__multadd+0x7e>
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	42ab      	cmp	r3, r5
 800b042:	dc19      	bgt.n	800b078 <__multadd+0x74>
 800b044:	6861      	ldr	r1, [r4, #4]
 800b046:	4638      	mov	r0, r7
 800b048:	3101      	adds	r1, #1
 800b04a:	f7ff ff79 	bl	800af40 <_Balloc>
 800b04e:	4680      	mov	r8, r0
 800b050:	b928      	cbnz	r0, 800b05e <__multadd+0x5a>
 800b052:	4602      	mov	r2, r0
 800b054:	21ba      	movs	r1, #186	; 0xba
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <__multadd+0x84>)
 800b058:	480c      	ldr	r0, [pc, #48]	; (800b08c <__multadd+0x88>)
 800b05a:	f001 fc7d 	bl	800c958 <__assert_func>
 800b05e:	6922      	ldr	r2, [r4, #16]
 800b060:	f104 010c 	add.w	r1, r4, #12
 800b064:	3202      	adds	r2, #2
 800b066:	0092      	lsls	r2, r2, #2
 800b068:	300c      	adds	r0, #12
 800b06a:	f001 fc61 	bl	800c930 <memcpy>
 800b06e:	4621      	mov	r1, r4
 800b070:	4638      	mov	r0, r7
 800b072:	f7ff ffa5 	bl	800afc0 <_Bfree>
 800b076:	4644      	mov	r4, r8
 800b078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b07c:	3501      	adds	r5, #1
 800b07e:	615e      	str	r6, [r3, #20]
 800b080:	6125      	str	r5, [r4, #16]
 800b082:	4620      	mov	r0, r4
 800b084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b088:	0800dc40 	.word	0x0800dc40
 800b08c:	0800dc51 	.word	0x0800dc51

0800b090 <__s2b>:
 800b090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b094:	4615      	mov	r5, r2
 800b096:	2209      	movs	r2, #9
 800b098:	461f      	mov	r7, r3
 800b09a:	3308      	adds	r3, #8
 800b09c:	460c      	mov	r4, r1
 800b09e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0a2:	4606      	mov	r6, r0
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	db09      	blt.n	800b0c0 <__s2b+0x30>
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	f7ff ff47 	bl	800af40 <_Balloc>
 800b0b2:	b940      	cbnz	r0, 800b0c6 <__s2b+0x36>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	21d3      	movs	r1, #211	; 0xd3
 800b0b8:	4b18      	ldr	r3, [pc, #96]	; (800b11c <__s2b+0x8c>)
 800b0ba:	4819      	ldr	r0, [pc, #100]	; (800b120 <__s2b+0x90>)
 800b0bc:	f001 fc4c 	bl	800c958 <__assert_func>
 800b0c0:	0052      	lsls	r2, r2, #1
 800b0c2:	3101      	adds	r1, #1
 800b0c4:	e7f0      	b.n	800b0a8 <__s2b+0x18>
 800b0c6:	9b08      	ldr	r3, [sp, #32]
 800b0c8:	2d09      	cmp	r5, #9
 800b0ca:	6143      	str	r3, [r0, #20]
 800b0cc:	f04f 0301 	mov.w	r3, #1
 800b0d0:	6103      	str	r3, [r0, #16]
 800b0d2:	dd16      	ble.n	800b102 <__s2b+0x72>
 800b0d4:	f104 0909 	add.w	r9, r4, #9
 800b0d8:	46c8      	mov	r8, r9
 800b0da:	442c      	add	r4, r5
 800b0dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0e0:	4601      	mov	r1, r0
 800b0e2:	220a      	movs	r2, #10
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	3b30      	subs	r3, #48	; 0x30
 800b0e8:	f7ff ff8c 	bl	800b004 <__multadd>
 800b0ec:	45a0      	cmp	r8, r4
 800b0ee:	d1f5      	bne.n	800b0dc <__s2b+0x4c>
 800b0f0:	f1a5 0408 	sub.w	r4, r5, #8
 800b0f4:	444c      	add	r4, r9
 800b0f6:	1b2d      	subs	r5, r5, r4
 800b0f8:	1963      	adds	r3, r4, r5
 800b0fa:	42bb      	cmp	r3, r7
 800b0fc:	db04      	blt.n	800b108 <__s2b+0x78>
 800b0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b102:	2509      	movs	r5, #9
 800b104:	340a      	adds	r4, #10
 800b106:	e7f6      	b.n	800b0f6 <__s2b+0x66>
 800b108:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b10c:	4601      	mov	r1, r0
 800b10e:	220a      	movs	r2, #10
 800b110:	4630      	mov	r0, r6
 800b112:	3b30      	subs	r3, #48	; 0x30
 800b114:	f7ff ff76 	bl	800b004 <__multadd>
 800b118:	e7ee      	b.n	800b0f8 <__s2b+0x68>
 800b11a:	bf00      	nop
 800b11c:	0800dc40 	.word	0x0800dc40
 800b120:	0800dc51 	.word	0x0800dc51

0800b124 <__hi0bits>:
 800b124:	0c02      	lsrs	r2, r0, #16
 800b126:	0412      	lsls	r2, r2, #16
 800b128:	4603      	mov	r3, r0
 800b12a:	b9ca      	cbnz	r2, 800b160 <__hi0bits+0x3c>
 800b12c:	0403      	lsls	r3, r0, #16
 800b12e:	2010      	movs	r0, #16
 800b130:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b134:	bf04      	itt	eq
 800b136:	021b      	lsleq	r3, r3, #8
 800b138:	3008      	addeq	r0, #8
 800b13a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b13e:	bf04      	itt	eq
 800b140:	011b      	lsleq	r3, r3, #4
 800b142:	3004      	addeq	r0, #4
 800b144:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b148:	bf04      	itt	eq
 800b14a:	009b      	lsleq	r3, r3, #2
 800b14c:	3002      	addeq	r0, #2
 800b14e:	2b00      	cmp	r3, #0
 800b150:	db05      	blt.n	800b15e <__hi0bits+0x3a>
 800b152:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b156:	f100 0001 	add.w	r0, r0, #1
 800b15a:	bf08      	it	eq
 800b15c:	2020      	moveq	r0, #32
 800b15e:	4770      	bx	lr
 800b160:	2000      	movs	r0, #0
 800b162:	e7e5      	b.n	800b130 <__hi0bits+0xc>

0800b164 <__lo0bits>:
 800b164:	6803      	ldr	r3, [r0, #0]
 800b166:	4602      	mov	r2, r0
 800b168:	f013 0007 	ands.w	r0, r3, #7
 800b16c:	d00b      	beq.n	800b186 <__lo0bits+0x22>
 800b16e:	07d9      	lsls	r1, r3, #31
 800b170:	d421      	bmi.n	800b1b6 <__lo0bits+0x52>
 800b172:	0798      	lsls	r0, r3, #30
 800b174:	bf49      	itett	mi
 800b176:	085b      	lsrmi	r3, r3, #1
 800b178:	089b      	lsrpl	r3, r3, #2
 800b17a:	2001      	movmi	r0, #1
 800b17c:	6013      	strmi	r3, [r2, #0]
 800b17e:	bf5c      	itt	pl
 800b180:	2002      	movpl	r0, #2
 800b182:	6013      	strpl	r3, [r2, #0]
 800b184:	4770      	bx	lr
 800b186:	b299      	uxth	r1, r3
 800b188:	b909      	cbnz	r1, 800b18e <__lo0bits+0x2a>
 800b18a:	2010      	movs	r0, #16
 800b18c:	0c1b      	lsrs	r3, r3, #16
 800b18e:	b2d9      	uxtb	r1, r3
 800b190:	b909      	cbnz	r1, 800b196 <__lo0bits+0x32>
 800b192:	3008      	adds	r0, #8
 800b194:	0a1b      	lsrs	r3, r3, #8
 800b196:	0719      	lsls	r1, r3, #28
 800b198:	bf04      	itt	eq
 800b19a:	091b      	lsreq	r3, r3, #4
 800b19c:	3004      	addeq	r0, #4
 800b19e:	0799      	lsls	r1, r3, #30
 800b1a0:	bf04      	itt	eq
 800b1a2:	089b      	lsreq	r3, r3, #2
 800b1a4:	3002      	addeq	r0, #2
 800b1a6:	07d9      	lsls	r1, r3, #31
 800b1a8:	d403      	bmi.n	800b1b2 <__lo0bits+0x4e>
 800b1aa:	085b      	lsrs	r3, r3, #1
 800b1ac:	f100 0001 	add.w	r0, r0, #1
 800b1b0:	d003      	beq.n	800b1ba <__lo0bits+0x56>
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	4770      	bx	lr
 800b1b6:	2000      	movs	r0, #0
 800b1b8:	4770      	bx	lr
 800b1ba:	2020      	movs	r0, #32
 800b1bc:	4770      	bx	lr
	...

0800b1c0 <__i2b>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	f7ff febb 	bl	800af40 <_Balloc>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	b928      	cbnz	r0, 800b1da <__i2b+0x1a>
 800b1ce:	f240 1145 	movw	r1, #325	; 0x145
 800b1d2:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <__i2b+0x24>)
 800b1d4:	4804      	ldr	r0, [pc, #16]	; (800b1e8 <__i2b+0x28>)
 800b1d6:	f001 fbbf 	bl	800c958 <__assert_func>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	6144      	str	r4, [r0, #20]
 800b1de:	6103      	str	r3, [r0, #16]
 800b1e0:	bd10      	pop	{r4, pc}
 800b1e2:	bf00      	nop
 800b1e4:	0800dc40 	.word	0x0800dc40
 800b1e8:	0800dc51 	.word	0x0800dc51

0800b1ec <__multiply>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	4691      	mov	r9, r2
 800b1f2:	690a      	ldr	r2, [r1, #16]
 800b1f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1f8:	460c      	mov	r4, r1
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	bfbe      	ittt	lt
 800b1fe:	460b      	movlt	r3, r1
 800b200:	464c      	movlt	r4, r9
 800b202:	4699      	movlt	r9, r3
 800b204:	6927      	ldr	r7, [r4, #16]
 800b206:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b20a:	68a3      	ldr	r3, [r4, #8]
 800b20c:	6861      	ldr	r1, [r4, #4]
 800b20e:	eb07 060a 	add.w	r6, r7, sl
 800b212:	42b3      	cmp	r3, r6
 800b214:	b085      	sub	sp, #20
 800b216:	bfb8      	it	lt
 800b218:	3101      	addlt	r1, #1
 800b21a:	f7ff fe91 	bl	800af40 <_Balloc>
 800b21e:	b930      	cbnz	r0, 800b22e <__multiply+0x42>
 800b220:	4602      	mov	r2, r0
 800b222:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b226:	4b43      	ldr	r3, [pc, #268]	; (800b334 <__multiply+0x148>)
 800b228:	4843      	ldr	r0, [pc, #268]	; (800b338 <__multiply+0x14c>)
 800b22a:	f001 fb95 	bl	800c958 <__assert_func>
 800b22e:	f100 0514 	add.w	r5, r0, #20
 800b232:	462b      	mov	r3, r5
 800b234:	2200      	movs	r2, #0
 800b236:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b23a:	4543      	cmp	r3, r8
 800b23c:	d321      	bcc.n	800b282 <__multiply+0x96>
 800b23e:	f104 0314 	add.w	r3, r4, #20
 800b242:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b246:	f109 0314 	add.w	r3, r9, #20
 800b24a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b24e:	9202      	str	r2, [sp, #8]
 800b250:	1b3a      	subs	r2, r7, r4
 800b252:	3a15      	subs	r2, #21
 800b254:	f022 0203 	bic.w	r2, r2, #3
 800b258:	3204      	adds	r2, #4
 800b25a:	f104 0115 	add.w	r1, r4, #21
 800b25e:	428f      	cmp	r7, r1
 800b260:	bf38      	it	cc
 800b262:	2204      	movcc	r2, #4
 800b264:	9201      	str	r2, [sp, #4]
 800b266:	9a02      	ldr	r2, [sp, #8]
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d80c      	bhi.n	800b288 <__multiply+0x9c>
 800b26e:	2e00      	cmp	r6, #0
 800b270:	dd03      	ble.n	800b27a <__multiply+0x8e>
 800b272:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b276:	2b00      	cmp	r3, #0
 800b278:	d05a      	beq.n	800b330 <__multiply+0x144>
 800b27a:	6106      	str	r6, [r0, #16]
 800b27c:	b005      	add	sp, #20
 800b27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b282:	f843 2b04 	str.w	r2, [r3], #4
 800b286:	e7d8      	b.n	800b23a <__multiply+0x4e>
 800b288:	f8b3 a000 	ldrh.w	sl, [r3]
 800b28c:	f1ba 0f00 	cmp.w	sl, #0
 800b290:	d023      	beq.n	800b2da <__multiply+0xee>
 800b292:	46a9      	mov	r9, r5
 800b294:	f04f 0c00 	mov.w	ip, #0
 800b298:	f104 0e14 	add.w	lr, r4, #20
 800b29c:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b2a0:	f8d9 1000 	ldr.w	r1, [r9]
 800b2a4:	fa1f fb82 	uxth.w	fp, r2
 800b2a8:	b289      	uxth	r1, r1
 800b2aa:	fb0a 110b 	mla	r1, sl, fp, r1
 800b2ae:	4461      	add	r1, ip
 800b2b0:	f8d9 c000 	ldr.w	ip, [r9]
 800b2b4:	0c12      	lsrs	r2, r2, #16
 800b2b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b2ba:	fb0a c202 	mla	r2, sl, r2, ip
 800b2be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2c2:	b289      	uxth	r1, r1
 800b2c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2c8:	4577      	cmp	r7, lr
 800b2ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2ce:	f849 1b04 	str.w	r1, [r9], #4
 800b2d2:	d8e3      	bhi.n	800b29c <__multiply+0xb0>
 800b2d4:	9a01      	ldr	r2, [sp, #4]
 800b2d6:	f845 c002 	str.w	ip, [r5, r2]
 800b2da:	9a03      	ldr	r2, [sp, #12]
 800b2dc:	3304      	adds	r3, #4
 800b2de:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2e2:	f1b9 0f00 	cmp.w	r9, #0
 800b2e6:	d021      	beq.n	800b32c <__multiply+0x140>
 800b2e8:	46ae      	mov	lr, r5
 800b2ea:	f04f 0a00 	mov.w	sl, #0
 800b2ee:	6829      	ldr	r1, [r5, #0]
 800b2f0:	f104 0c14 	add.w	ip, r4, #20
 800b2f4:	f8bc b000 	ldrh.w	fp, [ip]
 800b2f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2fc:	b289      	uxth	r1, r1
 800b2fe:	fb09 220b 	mla	r2, r9, fp, r2
 800b302:	4452      	add	r2, sl
 800b304:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b308:	f84e 1b04 	str.w	r1, [lr], #4
 800b30c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b310:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b314:	f8be 1000 	ldrh.w	r1, [lr]
 800b318:	4567      	cmp	r7, ip
 800b31a:	fb09 110a 	mla	r1, r9, sl, r1
 800b31e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b322:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b326:	d8e5      	bhi.n	800b2f4 <__multiply+0x108>
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	50a9      	str	r1, [r5, r2]
 800b32c:	3504      	adds	r5, #4
 800b32e:	e79a      	b.n	800b266 <__multiply+0x7a>
 800b330:	3e01      	subs	r6, #1
 800b332:	e79c      	b.n	800b26e <__multiply+0x82>
 800b334:	0800dc40 	.word	0x0800dc40
 800b338:	0800dc51 	.word	0x0800dc51

0800b33c <__pow5mult>:
 800b33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b340:	4615      	mov	r5, r2
 800b342:	f012 0203 	ands.w	r2, r2, #3
 800b346:	4606      	mov	r6, r0
 800b348:	460f      	mov	r7, r1
 800b34a:	d007      	beq.n	800b35c <__pow5mult+0x20>
 800b34c:	4c25      	ldr	r4, [pc, #148]	; (800b3e4 <__pow5mult+0xa8>)
 800b34e:	3a01      	subs	r2, #1
 800b350:	2300      	movs	r3, #0
 800b352:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b356:	f7ff fe55 	bl	800b004 <__multadd>
 800b35a:	4607      	mov	r7, r0
 800b35c:	10ad      	asrs	r5, r5, #2
 800b35e:	d03d      	beq.n	800b3dc <__pow5mult+0xa0>
 800b360:	69f4      	ldr	r4, [r6, #28]
 800b362:	b97c      	cbnz	r4, 800b384 <__pow5mult+0x48>
 800b364:	2010      	movs	r0, #16
 800b366:	f7ff fd37 	bl	800add8 <malloc>
 800b36a:	4602      	mov	r2, r0
 800b36c:	61f0      	str	r0, [r6, #28]
 800b36e:	b928      	cbnz	r0, 800b37c <__pow5mult+0x40>
 800b370:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b374:	4b1c      	ldr	r3, [pc, #112]	; (800b3e8 <__pow5mult+0xac>)
 800b376:	481d      	ldr	r0, [pc, #116]	; (800b3ec <__pow5mult+0xb0>)
 800b378:	f001 faee 	bl	800c958 <__assert_func>
 800b37c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b380:	6004      	str	r4, [r0, #0]
 800b382:	60c4      	str	r4, [r0, #12]
 800b384:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b388:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b38c:	b94c      	cbnz	r4, 800b3a2 <__pow5mult+0x66>
 800b38e:	f240 2171 	movw	r1, #625	; 0x271
 800b392:	4630      	mov	r0, r6
 800b394:	f7ff ff14 	bl	800b1c0 <__i2b>
 800b398:	2300      	movs	r3, #0
 800b39a:	4604      	mov	r4, r0
 800b39c:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3a0:	6003      	str	r3, [r0, #0]
 800b3a2:	f04f 0900 	mov.w	r9, #0
 800b3a6:	07eb      	lsls	r3, r5, #31
 800b3a8:	d50a      	bpl.n	800b3c0 <__pow5mult+0x84>
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4622      	mov	r2, r4
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	f7ff ff1c 	bl	800b1ec <__multiply>
 800b3b4:	4680      	mov	r8, r0
 800b3b6:	4639      	mov	r1, r7
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff fe01 	bl	800afc0 <_Bfree>
 800b3be:	4647      	mov	r7, r8
 800b3c0:	106d      	asrs	r5, r5, #1
 800b3c2:	d00b      	beq.n	800b3dc <__pow5mult+0xa0>
 800b3c4:	6820      	ldr	r0, [r4, #0]
 800b3c6:	b938      	cbnz	r0, 800b3d8 <__pow5mult+0x9c>
 800b3c8:	4622      	mov	r2, r4
 800b3ca:	4621      	mov	r1, r4
 800b3cc:	4630      	mov	r0, r6
 800b3ce:	f7ff ff0d 	bl	800b1ec <__multiply>
 800b3d2:	6020      	str	r0, [r4, #0]
 800b3d4:	f8c0 9000 	str.w	r9, [r0]
 800b3d8:	4604      	mov	r4, r0
 800b3da:	e7e4      	b.n	800b3a6 <__pow5mult+0x6a>
 800b3dc:	4638      	mov	r0, r7
 800b3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3e2:	bf00      	nop
 800b3e4:	0800dda0 	.word	0x0800dda0
 800b3e8:	0800dbd1 	.word	0x0800dbd1
 800b3ec:	0800dc51 	.word	0x0800dc51

0800b3f0 <__lshift>:
 800b3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	4607      	mov	r7, r0
 800b3f8:	4691      	mov	r9, r2
 800b3fa:	6923      	ldr	r3, [r4, #16]
 800b3fc:	6849      	ldr	r1, [r1, #4]
 800b3fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b402:	68a3      	ldr	r3, [r4, #8]
 800b404:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b408:	f108 0601 	add.w	r6, r8, #1
 800b40c:	42b3      	cmp	r3, r6
 800b40e:	db0b      	blt.n	800b428 <__lshift+0x38>
 800b410:	4638      	mov	r0, r7
 800b412:	f7ff fd95 	bl	800af40 <_Balloc>
 800b416:	4605      	mov	r5, r0
 800b418:	b948      	cbnz	r0, 800b42e <__lshift+0x3e>
 800b41a:	4602      	mov	r2, r0
 800b41c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b420:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <__lshift+0xd0>)
 800b422:	4828      	ldr	r0, [pc, #160]	; (800b4c4 <__lshift+0xd4>)
 800b424:	f001 fa98 	bl	800c958 <__assert_func>
 800b428:	3101      	adds	r1, #1
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	e7ee      	b.n	800b40c <__lshift+0x1c>
 800b42e:	2300      	movs	r3, #0
 800b430:	f100 0114 	add.w	r1, r0, #20
 800b434:	f100 0210 	add.w	r2, r0, #16
 800b438:	4618      	mov	r0, r3
 800b43a:	4553      	cmp	r3, sl
 800b43c:	db33      	blt.n	800b4a6 <__lshift+0xb6>
 800b43e:	6920      	ldr	r0, [r4, #16]
 800b440:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b444:	f104 0314 	add.w	r3, r4, #20
 800b448:	f019 091f 	ands.w	r9, r9, #31
 800b44c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b450:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b454:	d02b      	beq.n	800b4ae <__lshift+0xbe>
 800b456:	468a      	mov	sl, r1
 800b458:	2200      	movs	r2, #0
 800b45a:	f1c9 0e20 	rsb	lr, r9, #32
 800b45e:	6818      	ldr	r0, [r3, #0]
 800b460:	fa00 f009 	lsl.w	r0, r0, r9
 800b464:	4310      	orrs	r0, r2
 800b466:	f84a 0b04 	str.w	r0, [sl], #4
 800b46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b46e:	459c      	cmp	ip, r3
 800b470:	fa22 f20e 	lsr.w	r2, r2, lr
 800b474:	d8f3      	bhi.n	800b45e <__lshift+0x6e>
 800b476:	ebac 0304 	sub.w	r3, ip, r4
 800b47a:	3b15      	subs	r3, #21
 800b47c:	f023 0303 	bic.w	r3, r3, #3
 800b480:	3304      	adds	r3, #4
 800b482:	f104 0015 	add.w	r0, r4, #21
 800b486:	4584      	cmp	ip, r0
 800b488:	bf38      	it	cc
 800b48a:	2304      	movcc	r3, #4
 800b48c:	50ca      	str	r2, [r1, r3]
 800b48e:	b10a      	cbz	r2, 800b494 <__lshift+0xa4>
 800b490:	f108 0602 	add.w	r6, r8, #2
 800b494:	3e01      	subs	r6, #1
 800b496:	4638      	mov	r0, r7
 800b498:	4621      	mov	r1, r4
 800b49a:	612e      	str	r6, [r5, #16]
 800b49c:	f7ff fd90 	bl	800afc0 <_Bfree>
 800b4a0:	4628      	mov	r0, r5
 800b4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	e7c5      	b.n	800b43a <__lshift+0x4a>
 800b4ae:	3904      	subs	r1, #4
 800b4b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4b4:	459c      	cmp	ip, r3
 800b4b6:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4ba:	d8f9      	bhi.n	800b4b0 <__lshift+0xc0>
 800b4bc:	e7ea      	b.n	800b494 <__lshift+0xa4>
 800b4be:	bf00      	nop
 800b4c0:	0800dc40 	.word	0x0800dc40
 800b4c4:	0800dc51 	.word	0x0800dc51

0800b4c8 <__mcmp>:
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	690a      	ldr	r2, [r1, #16]
 800b4cc:	6900      	ldr	r0, [r0, #16]
 800b4ce:	b530      	push	{r4, r5, lr}
 800b4d0:	1a80      	subs	r0, r0, r2
 800b4d2:	d10d      	bne.n	800b4f0 <__mcmp+0x28>
 800b4d4:	3314      	adds	r3, #20
 800b4d6:	3114      	adds	r1, #20
 800b4d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b4dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b4e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b4e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b4e8:	4295      	cmp	r5, r2
 800b4ea:	d002      	beq.n	800b4f2 <__mcmp+0x2a>
 800b4ec:	d304      	bcc.n	800b4f8 <__mcmp+0x30>
 800b4ee:	2001      	movs	r0, #1
 800b4f0:	bd30      	pop	{r4, r5, pc}
 800b4f2:	42a3      	cmp	r3, r4
 800b4f4:	d3f4      	bcc.n	800b4e0 <__mcmp+0x18>
 800b4f6:	e7fb      	b.n	800b4f0 <__mcmp+0x28>
 800b4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fc:	e7f8      	b.n	800b4f0 <__mcmp+0x28>
	...

0800b500 <__mdiff>:
 800b500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	460d      	mov	r5, r1
 800b506:	4607      	mov	r7, r0
 800b508:	4611      	mov	r1, r2
 800b50a:	4628      	mov	r0, r5
 800b50c:	4614      	mov	r4, r2
 800b50e:	f7ff ffdb 	bl	800b4c8 <__mcmp>
 800b512:	1e06      	subs	r6, r0, #0
 800b514:	d111      	bne.n	800b53a <__mdiff+0x3a>
 800b516:	4631      	mov	r1, r6
 800b518:	4638      	mov	r0, r7
 800b51a:	f7ff fd11 	bl	800af40 <_Balloc>
 800b51e:	4602      	mov	r2, r0
 800b520:	b928      	cbnz	r0, 800b52e <__mdiff+0x2e>
 800b522:	f240 2137 	movw	r1, #567	; 0x237
 800b526:	4b3a      	ldr	r3, [pc, #232]	; (800b610 <__mdiff+0x110>)
 800b528:	483a      	ldr	r0, [pc, #232]	; (800b614 <__mdiff+0x114>)
 800b52a:	f001 fa15 	bl	800c958 <__assert_func>
 800b52e:	2301      	movs	r3, #1
 800b530:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b534:	4610      	mov	r0, r2
 800b536:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53a:	bfa4      	itt	ge
 800b53c:	4623      	movge	r3, r4
 800b53e:	462c      	movge	r4, r5
 800b540:	4638      	mov	r0, r7
 800b542:	6861      	ldr	r1, [r4, #4]
 800b544:	bfa6      	itte	ge
 800b546:	461d      	movge	r5, r3
 800b548:	2600      	movge	r6, #0
 800b54a:	2601      	movlt	r6, #1
 800b54c:	f7ff fcf8 	bl	800af40 <_Balloc>
 800b550:	4602      	mov	r2, r0
 800b552:	b918      	cbnz	r0, 800b55c <__mdiff+0x5c>
 800b554:	f240 2145 	movw	r1, #581	; 0x245
 800b558:	4b2d      	ldr	r3, [pc, #180]	; (800b610 <__mdiff+0x110>)
 800b55a:	e7e5      	b.n	800b528 <__mdiff+0x28>
 800b55c:	f102 0814 	add.w	r8, r2, #20
 800b560:	46c2      	mov	sl, r8
 800b562:	f04f 0c00 	mov.w	ip, #0
 800b566:	6927      	ldr	r7, [r4, #16]
 800b568:	60c6      	str	r6, [r0, #12]
 800b56a:	692e      	ldr	r6, [r5, #16]
 800b56c:	f104 0014 	add.w	r0, r4, #20
 800b570:	f105 0914 	add.w	r9, r5, #20
 800b574:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b57c:	3410      	adds	r4, #16
 800b57e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b582:	f859 3b04 	ldr.w	r3, [r9], #4
 800b586:	fa1f f18b 	uxth.w	r1, fp
 800b58a:	4461      	add	r1, ip
 800b58c:	fa1f fc83 	uxth.w	ip, r3
 800b590:	0c1b      	lsrs	r3, r3, #16
 800b592:	eba1 010c 	sub.w	r1, r1, ip
 800b596:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b59a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b59e:	b289      	uxth	r1, r1
 800b5a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b5a4:	454e      	cmp	r6, r9
 800b5a6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b5aa:	f84a 1b04 	str.w	r1, [sl], #4
 800b5ae:	d8e6      	bhi.n	800b57e <__mdiff+0x7e>
 800b5b0:	1b73      	subs	r3, r6, r5
 800b5b2:	3b15      	subs	r3, #21
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	3515      	adds	r5, #21
 800b5ba:	3304      	adds	r3, #4
 800b5bc:	42ae      	cmp	r6, r5
 800b5be:	bf38      	it	cc
 800b5c0:	2304      	movcc	r3, #4
 800b5c2:	4418      	add	r0, r3
 800b5c4:	4443      	add	r3, r8
 800b5c6:	461e      	mov	r6, r3
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	4575      	cmp	r5, lr
 800b5cc:	d30e      	bcc.n	800b5ec <__mdiff+0xec>
 800b5ce:	f10e 0103 	add.w	r1, lr, #3
 800b5d2:	1a09      	subs	r1, r1, r0
 800b5d4:	f021 0103 	bic.w	r1, r1, #3
 800b5d8:	3803      	subs	r0, #3
 800b5da:	4586      	cmp	lr, r0
 800b5dc:	bf38      	it	cc
 800b5de:	2100      	movcc	r1, #0
 800b5e0:	440b      	add	r3, r1
 800b5e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b5e6:	b189      	cbz	r1, 800b60c <__mdiff+0x10c>
 800b5e8:	6117      	str	r7, [r2, #16]
 800b5ea:	e7a3      	b.n	800b534 <__mdiff+0x34>
 800b5ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800b5f0:	fa1f f188 	uxth.w	r1, r8
 800b5f4:	4461      	add	r1, ip
 800b5f6:	140c      	asrs	r4, r1, #16
 800b5f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5fc:	b289      	uxth	r1, r1
 800b5fe:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b602:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b606:	f846 1b04 	str.w	r1, [r6], #4
 800b60a:	e7de      	b.n	800b5ca <__mdiff+0xca>
 800b60c:	3f01      	subs	r7, #1
 800b60e:	e7e8      	b.n	800b5e2 <__mdiff+0xe2>
 800b610:	0800dc40 	.word	0x0800dc40
 800b614:	0800dc51 	.word	0x0800dc51

0800b618 <__ulp>:
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <__ulp+0x3c>)
 800b61a:	400b      	ands	r3, r1
 800b61c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b620:	2b00      	cmp	r3, #0
 800b622:	dc08      	bgt.n	800b636 <__ulp+0x1e>
 800b624:	425b      	negs	r3, r3
 800b626:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b62a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b62e:	da04      	bge.n	800b63a <__ulp+0x22>
 800b630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b634:	4113      	asrs	r3, r2
 800b636:	2200      	movs	r2, #0
 800b638:	e008      	b.n	800b64c <__ulp+0x34>
 800b63a:	f1a2 0314 	sub.w	r3, r2, #20
 800b63e:	2b1e      	cmp	r3, #30
 800b640:	bfd6      	itet	le
 800b642:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b646:	2201      	movgt	r2, #1
 800b648:	40da      	lsrle	r2, r3
 800b64a:	2300      	movs	r3, #0
 800b64c:	4619      	mov	r1, r3
 800b64e:	4610      	mov	r0, r2
 800b650:	4770      	bx	lr
 800b652:	bf00      	nop
 800b654:	7ff00000 	.word	0x7ff00000

0800b658 <__b2d>:
 800b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65a:	6905      	ldr	r5, [r0, #16]
 800b65c:	f100 0714 	add.w	r7, r0, #20
 800b660:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b664:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b668:	1f2e      	subs	r6, r5, #4
 800b66a:	4620      	mov	r0, r4
 800b66c:	f7ff fd5a 	bl	800b124 <__hi0bits>
 800b670:	f1c0 0220 	rsb	r2, r0, #32
 800b674:	280a      	cmp	r0, #10
 800b676:	4603      	mov	r3, r0
 800b678:	f8df c068 	ldr.w	ip, [pc, #104]	; 800b6e4 <__b2d+0x8c>
 800b67c:	600a      	str	r2, [r1, #0]
 800b67e:	dc12      	bgt.n	800b6a6 <__b2d+0x4e>
 800b680:	f1c0 0e0b 	rsb	lr, r0, #11
 800b684:	fa24 f20e 	lsr.w	r2, r4, lr
 800b688:	42b7      	cmp	r7, r6
 800b68a:	ea42 010c 	orr.w	r1, r2, ip
 800b68e:	bf2c      	ite	cs
 800b690:	2200      	movcs	r2, #0
 800b692:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b696:	3315      	adds	r3, #21
 800b698:	fa04 f303 	lsl.w	r3, r4, r3
 800b69c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b6a0:	431a      	orrs	r2, r3
 800b6a2:	4610      	mov	r0, r2
 800b6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a6:	42b7      	cmp	r7, r6
 800b6a8:	bf2e      	itee	cs
 800b6aa:	2200      	movcs	r2, #0
 800b6ac:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b6b0:	f1a5 0608 	subcc.w	r6, r5, #8
 800b6b4:	3b0b      	subs	r3, #11
 800b6b6:	d012      	beq.n	800b6de <__b2d+0x86>
 800b6b8:	f1c3 0520 	rsb	r5, r3, #32
 800b6bc:	fa22 f105 	lsr.w	r1, r2, r5
 800b6c0:	409c      	lsls	r4, r3
 800b6c2:	430c      	orrs	r4, r1
 800b6c4:	42be      	cmp	r6, r7
 800b6c6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b6ca:	bf94      	ite	ls
 800b6cc:	2400      	movls	r4, #0
 800b6ce:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b6d2:	409a      	lsls	r2, r3
 800b6d4:	40ec      	lsrs	r4, r5
 800b6d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b6da:	4322      	orrs	r2, r4
 800b6dc:	e7e1      	b.n	800b6a2 <__b2d+0x4a>
 800b6de:	ea44 010c 	orr.w	r1, r4, ip
 800b6e2:	e7de      	b.n	800b6a2 <__b2d+0x4a>
 800b6e4:	3ff00000 	.word	0x3ff00000

0800b6e8 <__d2b>:
 800b6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	4617      	mov	r7, r2
 800b6ee:	461c      	mov	r4, r3
 800b6f0:	9e08      	ldr	r6, [sp, #32]
 800b6f2:	f7ff fc25 	bl	800af40 <_Balloc>
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	b930      	cbnz	r0, 800b708 <__d2b+0x20>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	f240 310f 	movw	r1, #783	; 0x30f
 800b700:	4b22      	ldr	r3, [pc, #136]	; (800b78c <__d2b+0xa4>)
 800b702:	4823      	ldr	r0, [pc, #140]	; (800b790 <__d2b+0xa8>)
 800b704:	f001 f928 	bl	800c958 <__assert_func>
 800b708:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b70c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b710:	bb24      	cbnz	r4, 800b75c <__d2b+0x74>
 800b712:	2f00      	cmp	r7, #0
 800b714:	9301      	str	r3, [sp, #4]
 800b716:	d026      	beq.n	800b766 <__d2b+0x7e>
 800b718:	4668      	mov	r0, sp
 800b71a:	9700      	str	r7, [sp, #0]
 800b71c:	f7ff fd22 	bl	800b164 <__lo0bits>
 800b720:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b724:	b1e8      	cbz	r0, 800b762 <__d2b+0x7a>
 800b726:	f1c0 0320 	rsb	r3, r0, #32
 800b72a:	fa02 f303 	lsl.w	r3, r2, r3
 800b72e:	430b      	orrs	r3, r1
 800b730:	40c2      	lsrs	r2, r0
 800b732:	616b      	str	r3, [r5, #20]
 800b734:	9201      	str	r2, [sp, #4]
 800b736:	9b01      	ldr	r3, [sp, #4]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	bf14      	ite	ne
 800b73c:	2102      	movne	r1, #2
 800b73e:	2101      	moveq	r1, #1
 800b740:	61ab      	str	r3, [r5, #24]
 800b742:	6129      	str	r1, [r5, #16]
 800b744:	b1bc      	cbz	r4, 800b776 <__d2b+0x8e>
 800b746:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b74a:	4404      	add	r4, r0
 800b74c:	6034      	str	r4, [r6, #0]
 800b74e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b754:	6018      	str	r0, [r3, #0]
 800b756:	4628      	mov	r0, r5
 800b758:	b003      	add	sp, #12
 800b75a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b75c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b760:	e7d7      	b.n	800b712 <__d2b+0x2a>
 800b762:	6169      	str	r1, [r5, #20]
 800b764:	e7e7      	b.n	800b736 <__d2b+0x4e>
 800b766:	a801      	add	r0, sp, #4
 800b768:	f7ff fcfc 	bl	800b164 <__lo0bits>
 800b76c:	9b01      	ldr	r3, [sp, #4]
 800b76e:	2101      	movs	r1, #1
 800b770:	616b      	str	r3, [r5, #20]
 800b772:	3020      	adds	r0, #32
 800b774:	e7e5      	b.n	800b742 <__d2b+0x5a>
 800b776:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b77a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b77e:	6030      	str	r0, [r6, #0]
 800b780:	6918      	ldr	r0, [r3, #16]
 800b782:	f7ff fccf 	bl	800b124 <__hi0bits>
 800b786:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b78a:	e7e2      	b.n	800b752 <__d2b+0x6a>
 800b78c:	0800dc40 	.word	0x0800dc40
 800b790:	0800dc51 	.word	0x0800dc51

0800b794 <__ratio>:
 800b794:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	4688      	mov	r8, r1
 800b79a:	4669      	mov	r1, sp
 800b79c:	4681      	mov	r9, r0
 800b79e:	f7ff ff5b 	bl	800b658 <__b2d>
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	460d      	mov	r5, r1
 800b7a8:	4640      	mov	r0, r8
 800b7aa:	a901      	add	r1, sp, #4
 800b7ac:	f7ff ff54 	bl	800b658 <__b2d>
 800b7b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b7b8:	468b      	mov	fp, r1
 800b7ba:	eba3 0c02 	sub.w	ip, r3, r2
 800b7be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7c2:	1a9b      	subs	r3, r3, r2
 800b7c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	bfd5      	itete	le
 800b7cc:	460a      	movle	r2, r1
 800b7ce:	462a      	movgt	r2, r5
 800b7d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7d4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b7d8:	bfd8      	it	le
 800b7da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b7de:	465b      	mov	r3, fp
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7f4 ffa1 	bl	800072c <__aeabi_ddiv>
 800b7ea:	b003      	add	sp, #12
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b7f0 <__copybits>:
 800b7f0:	3901      	subs	r1, #1
 800b7f2:	b570      	push	{r4, r5, r6, lr}
 800b7f4:	1149      	asrs	r1, r1, #5
 800b7f6:	6914      	ldr	r4, [r2, #16]
 800b7f8:	3101      	adds	r1, #1
 800b7fa:	f102 0314 	add.w	r3, r2, #20
 800b7fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b806:	1f05      	subs	r5, r0, #4
 800b808:	42a3      	cmp	r3, r4
 800b80a:	d30c      	bcc.n	800b826 <__copybits+0x36>
 800b80c:	1aa3      	subs	r3, r4, r2
 800b80e:	3b11      	subs	r3, #17
 800b810:	f023 0303 	bic.w	r3, r3, #3
 800b814:	3211      	adds	r2, #17
 800b816:	42a2      	cmp	r2, r4
 800b818:	bf88      	it	hi
 800b81a:	2300      	movhi	r3, #0
 800b81c:	4418      	add	r0, r3
 800b81e:	2300      	movs	r3, #0
 800b820:	4288      	cmp	r0, r1
 800b822:	d305      	bcc.n	800b830 <__copybits+0x40>
 800b824:	bd70      	pop	{r4, r5, r6, pc}
 800b826:	f853 6b04 	ldr.w	r6, [r3], #4
 800b82a:	f845 6f04 	str.w	r6, [r5, #4]!
 800b82e:	e7eb      	b.n	800b808 <__copybits+0x18>
 800b830:	f840 3b04 	str.w	r3, [r0], #4
 800b834:	e7f4      	b.n	800b820 <__copybits+0x30>

0800b836 <__any_on>:
 800b836:	f100 0214 	add.w	r2, r0, #20
 800b83a:	6900      	ldr	r0, [r0, #16]
 800b83c:	114b      	asrs	r3, r1, #5
 800b83e:	4298      	cmp	r0, r3
 800b840:	b510      	push	{r4, lr}
 800b842:	db11      	blt.n	800b868 <__any_on+0x32>
 800b844:	dd0a      	ble.n	800b85c <__any_on+0x26>
 800b846:	f011 011f 	ands.w	r1, r1, #31
 800b84a:	d007      	beq.n	800b85c <__any_on+0x26>
 800b84c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b850:	fa24 f001 	lsr.w	r0, r4, r1
 800b854:	fa00 f101 	lsl.w	r1, r0, r1
 800b858:	428c      	cmp	r4, r1
 800b85a:	d10b      	bne.n	800b874 <__any_on+0x3e>
 800b85c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b860:	4293      	cmp	r3, r2
 800b862:	d803      	bhi.n	800b86c <__any_on+0x36>
 800b864:	2000      	movs	r0, #0
 800b866:	bd10      	pop	{r4, pc}
 800b868:	4603      	mov	r3, r0
 800b86a:	e7f7      	b.n	800b85c <__any_on+0x26>
 800b86c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b870:	2900      	cmp	r1, #0
 800b872:	d0f5      	beq.n	800b860 <__any_on+0x2a>
 800b874:	2001      	movs	r0, #1
 800b876:	e7f6      	b.n	800b866 <__any_on+0x30>

0800b878 <sulp>:
 800b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87c:	460f      	mov	r7, r1
 800b87e:	4690      	mov	r8, r2
 800b880:	f7ff feca 	bl	800b618 <__ulp>
 800b884:	4604      	mov	r4, r0
 800b886:	460d      	mov	r5, r1
 800b888:	f1b8 0f00 	cmp.w	r8, #0
 800b88c:	d011      	beq.n	800b8b2 <sulp+0x3a>
 800b88e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b896:	2b00      	cmp	r3, #0
 800b898:	dd0b      	ble.n	800b8b2 <sulp+0x3a>
 800b89a:	2400      	movs	r4, #0
 800b89c:	051b      	lsls	r3, r3, #20
 800b89e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b8a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	f7f4 fe15 	bl	80004d8 <__aeabi_dmul>
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8ba:	0000      	movs	r0, r0
 800b8bc:	0000      	movs	r0, r0
	...

0800b8c0 <_strtod_l>:
 800b8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c4:	b09f      	sub	sp, #124	; 0x7c
 800b8c6:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	921a      	str	r2, [sp, #104]	; 0x68
 800b8ce:	460d      	mov	r5, r1
 800b8d0:	f04f 0800 	mov.w	r8, #0
 800b8d4:	f04f 0900 	mov.w	r9, #0
 800b8d8:	460a      	mov	r2, r1
 800b8da:	9219      	str	r2, [sp, #100]	; 0x64
 800b8dc:	7811      	ldrb	r1, [r2, #0]
 800b8de:	292b      	cmp	r1, #43	; 0x2b
 800b8e0:	d04a      	beq.n	800b978 <_strtod_l+0xb8>
 800b8e2:	d838      	bhi.n	800b956 <_strtod_l+0x96>
 800b8e4:	290d      	cmp	r1, #13
 800b8e6:	d832      	bhi.n	800b94e <_strtod_l+0x8e>
 800b8e8:	2908      	cmp	r1, #8
 800b8ea:	d832      	bhi.n	800b952 <_strtod_l+0x92>
 800b8ec:	2900      	cmp	r1, #0
 800b8ee:	d03b      	beq.n	800b968 <_strtod_l+0xa8>
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	920e      	str	r2, [sp, #56]	; 0x38
 800b8f4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b8f6:	7832      	ldrb	r2, [r6, #0]
 800b8f8:	2a30      	cmp	r2, #48	; 0x30
 800b8fa:	f040 80b2 	bne.w	800ba62 <_strtod_l+0x1a2>
 800b8fe:	7872      	ldrb	r2, [r6, #1]
 800b900:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b904:	2a58      	cmp	r2, #88	; 0x58
 800b906:	d16e      	bne.n	800b9e6 <_strtod_l+0x126>
 800b908:	9302      	str	r3, [sp, #8]
 800b90a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b90c:	4620      	mov	r0, r4
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	ab1a      	add	r3, sp, #104	; 0x68
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	4a8c      	ldr	r2, [pc, #560]	; (800bb48 <_strtod_l+0x288>)
 800b916:	ab1b      	add	r3, sp, #108	; 0x6c
 800b918:	a919      	add	r1, sp, #100	; 0x64
 800b91a:	f001 f8b7 	bl	800ca8c <__gethex>
 800b91e:	f010 070f 	ands.w	r7, r0, #15
 800b922:	4605      	mov	r5, r0
 800b924:	d005      	beq.n	800b932 <_strtod_l+0x72>
 800b926:	2f06      	cmp	r7, #6
 800b928:	d128      	bne.n	800b97c <_strtod_l+0xbc>
 800b92a:	2300      	movs	r3, #0
 800b92c:	3601      	adds	r6, #1
 800b92e:	9619      	str	r6, [sp, #100]	; 0x64
 800b930:	930e      	str	r3, [sp, #56]	; 0x38
 800b932:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b934:	2b00      	cmp	r3, #0
 800b936:	f040 85a0 	bne.w	800c47a <_strtod_l+0xbba>
 800b93a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b93c:	b1cb      	cbz	r3, 800b972 <_strtod_l+0xb2>
 800b93e:	4642      	mov	r2, r8
 800b940:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b944:	4610      	mov	r0, r2
 800b946:	4619      	mov	r1, r3
 800b948:	b01f      	add	sp, #124	; 0x7c
 800b94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b94e:	2920      	cmp	r1, #32
 800b950:	d1ce      	bne.n	800b8f0 <_strtod_l+0x30>
 800b952:	3201      	adds	r2, #1
 800b954:	e7c1      	b.n	800b8da <_strtod_l+0x1a>
 800b956:	292d      	cmp	r1, #45	; 0x2d
 800b958:	d1ca      	bne.n	800b8f0 <_strtod_l+0x30>
 800b95a:	2101      	movs	r1, #1
 800b95c:	910e      	str	r1, [sp, #56]	; 0x38
 800b95e:	1c51      	adds	r1, r2, #1
 800b960:	9119      	str	r1, [sp, #100]	; 0x64
 800b962:	7852      	ldrb	r2, [r2, #1]
 800b964:	2a00      	cmp	r2, #0
 800b966:	d1c5      	bne.n	800b8f4 <_strtod_l+0x34>
 800b968:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b96a:	9519      	str	r5, [sp, #100]	; 0x64
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f040 8582 	bne.w	800c476 <_strtod_l+0xbb6>
 800b972:	4642      	mov	r2, r8
 800b974:	464b      	mov	r3, r9
 800b976:	e7e5      	b.n	800b944 <_strtod_l+0x84>
 800b978:	2100      	movs	r1, #0
 800b97a:	e7ef      	b.n	800b95c <_strtod_l+0x9c>
 800b97c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b97e:	b13a      	cbz	r2, 800b990 <_strtod_l+0xd0>
 800b980:	2135      	movs	r1, #53	; 0x35
 800b982:	a81c      	add	r0, sp, #112	; 0x70
 800b984:	f7ff ff34 	bl	800b7f0 <__copybits>
 800b988:	4620      	mov	r0, r4
 800b98a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b98c:	f7ff fb18 	bl	800afc0 <_Bfree>
 800b990:	3f01      	subs	r7, #1
 800b992:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b994:	2f04      	cmp	r7, #4
 800b996:	d806      	bhi.n	800b9a6 <_strtod_l+0xe6>
 800b998:	e8df f007 	tbb	[pc, r7]
 800b99c:	201d0314 	.word	0x201d0314
 800b9a0:	14          	.byte	0x14
 800b9a1:	00          	.byte	0x00
 800b9a2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b9a6:	05e9      	lsls	r1, r5, #23
 800b9a8:	bf48      	it	mi
 800b9aa:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b9ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9b2:	0d1b      	lsrs	r3, r3, #20
 800b9b4:	051b      	lsls	r3, r3, #20
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1bb      	bne.n	800b932 <_strtod_l+0x72>
 800b9ba:	f7fe fb15 	bl	8009fe8 <__errno>
 800b9be:	2322      	movs	r3, #34	; 0x22
 800b9c0:	6003      	str	r3, [r0, #0]
 800b9c2:	e7b6      	b.n	800b932 <_strtod_l+0x72>
 800b9c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b9c8:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b9cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b9d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b9d4:	e7e7      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9d6:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800bb4c <_strtod_l+0x28c>
 800b9da:	e7e4      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9dc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b9e0:	f04f 38ff 	mov.w	r8, #4294967295
 800b9e4:	e7df      	b.n	800b9a6 <_strtod_l+0xe6>
 800b9e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	9219      	str	r2, [sp, #100]	; 0x64
 800b9ec:	785b      	ldrb	r3, [r3, #1]
 800b9ee:	2b30      	cmp	r3, #48	; 0x30
 800b9f0:	d0f9      	beq.n	800b9e6 <_strtod_l+0x126>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d09d      	beq.n	800b932 <_strtod_l+0x72>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f04f 0a00 	mov.w	sl, #0
 800b9fc:	220a      	movs	r2, #10
 800b9fe:	46d3      	mov	fp, sl
 800ba00:	9305      	str	r3, [sp, #20]
 800ba02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800ba08:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba0a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800ba0c:	7806      	ldrb	r6, [r0, #0]
 800ba0e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ba12:	b2d9      	uxtb	r1, r3
 800ba14:	2909      	cmp	r1, #9
 800ba16:	d926      	bls.n	800ba66 <_strtod_l+0x1a6>
 800ba18:	2201      	movs	r2, #1
 800ba1a:	494d      	ldr	r1, [pc, #308]	; (800bb50 <_strtod_l+0x290>)
 800ba1c:	f000 ff66 	bl	800c8ec <strncmp>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d030      	beq.n	800ba86 <_strtod_l+0x1c6>
 800ba24:	2000      	movs	r0, #0
 800ba26:	4632      	mov	r2, r6
 800ba28:	4603      	mov	r3, r0
 800ba2a:	465e      	mov	r6, fp
 800ba2c:	9008      	str	r0, [sp, #32]
 800ba2e:	2a65      	cmp	r2, #101	; 0x65
 800ba30:	d001      	beq.n	800ba36 <_strtod_l+0x176>
 800ba32:	2a45      	cmp	r2, #69	; 0x45
 800ba34:	d113      	bne.n	800ba5e <_strtod_l+0x19e>
 800ba36:	b91e      	cbnz	r6, 800ba40 <_strtod_l+0x180>
 800ba38:	9a05      	ldr	r2, [sp, #20]
 800ba3a:	4302      	orrs	r2, r0
 800ba3c:	d094      	beq.n	800b968 <_strtod_l+0xa8>
 800ba3e:	2600      	movs	r6, #0
 800ba40:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800ba42:	1c6a      	adds	r2, r5, #1
 800ba44:	9219      	str	r2, [sp, #100]	; 0x64
 800ba46:	786a      	ldrb	r2, [r5, #1]
 800ba48:	2a2b      	cmp	r2, #43	; 0x2b
 800ba4a:	d074      	beq.n	800bb36 <_strtod_l+0x276>
 800ba4c:	2a2d      	cmp	r2, #45	; 0x2d
 800ba4e:	d078      	beq.n	800bb42 <_strtod_l+0x282>
 800ba50:	f04f 0c00 	mov.w	ip, #0
 800ba54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ba58:	2909      	cmp	r1, #9
 800ba5a:	d97f      	bls.n	800bb5c <_strtod_l+0x29c>
 800ba5c:	9519      	str	r5, [sp, #100]	; 0x64
 800ba5e:	2700      	movs	r7, #0
 800ba60:	e09e      	b.n	800bba0 <_strtod_l+0x2e0>
 800ba62:	2300      	movs	r3, #0
 800ba64:	e7c8      	b.n	800b9f8 <_strtod_l+0x138>
 800ba66:	f1bb 0f08 	cmp.w	fp, #8
 800ba6a:	bfd8      	it	le
 800ba6c:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ba6e:	f100 0001 	add.w	r0, r0, #1
 800ba72:	bfd6      	itet	le
 800ba74:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba78:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ba7c:	930a      	strle	r3, [sp, #40]	; 0x28
 800ba7e:	f10b 0b01 	add.w	fp, fp, #1
 800ba82:	9019      	str	r0, [sp, #100]	; 0x64
 800ba84:	e7c1      	b.n	800ba0a <_strtod_l+0x14a>
 800ba86:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	9219      	str	r2, [sp, #100]	; 0x64
 800ba8c:	785a      	ldrb	r2, [r3, #1]
 800ba8e:	f1bb 0f00 	cmp.w	fp, #0
 800ba92:	d037      	beq.n	800bb04 <_strtod_l+0x244>
 800ba94:	465e      	mov	r6, fp
 800ba96:	9008      	str	r0, [sp, #32]
 800ba98:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba9c:	2b09      	cmp	r3, #9
 800ba9e:	d912      	bls.n	800bac6 <_strtod_l+0x206>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e7c4      	b.n	800ba2e <_strtod_l+0x16e>
 800baa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800baa6:	3001      	adds	r0, #1
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	9219      	str	r2, [sp, #100]	; 0x64
 800baac:	785a      	ldrb	r2, [r3, #1]
 800baae:	2a30      	cmp	r2, #48	; 0x30
 800bab0:	d0f8      	beq.n	800baa4 <_strtod_l+0x1e4>
 800bab2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bab6:	2b08      	cmp	r3, #8
 800bab8:	f200 84e4 	bhi.w	800c484 <_strtod_l+0xbc4>
 800babc:	9008      	str	r0, [sp, #32]
 800babe:	2000      	movs	r0, #0
 800bac0:	4606      	mov	r6, r0
 800bac2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bac4:	930b      	str	r3, [sp, #44]	; 0x2c
 800bac6:	3a30      	subs	r2, #48	; 0x30
 800bac8:	f100 0301 	add.w	r3, r0, #1
 800bacc:	d014      	beq.n	800baf8 <_strtod_l+0x238>
 800bace:	9908      	ldr	r1, [sp, #32]
 800bad0:	eb00 0c06 	add.w	ip, r0, r6
 800bad4:	4419      	add	r1, r3
 800bad6:	9108      	str	r1, [sp, #32]
 800bad8:	4633      	mov	r3, r6
 800bada:	210a      	movs	r1, #10
 800badc:	4563      	cmp	r3, ip
 800bade:	d113      	bne.n	800bb08 <_strtod_l+0x248>
 800bae0:	1833      	adds	r3, r6, r0
 800bae2:	2b08      	cmp	r3, #8
 800bae4:	f106 0601 	add.w	r6, r6, #1
 800bae8:	4406      	add	r6, r0
 800baea:	dc1a      	bgt.n	800bb22 <_strtod_l+0x262>
 800baec:	230a      	movs	r3, #10
 800baee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800baf0:	fb03 2301 	mla	r3, r3, r1, r2
 800baf4:	930a      	str	r3, [sp, #40]	; 0x28
 800baf6:	2300      	movs	r3, #0
 800baf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bafa:	4618      	mov	r0, r3
 800bafc:	1c51      	adds	r1, r2, #1
 800bafe:	9119      	str	r1, [sp, #100]	; 0x64
 800bb00:	7852      	ldrb	r2, [r2, #1]
 800bb02:	e7c9      	b.n	800ba98 <_strtod_l+0x1d8>
 800bb04:	4658      	mov	r0, fp
 800bb06:	e7d2      	b.n	800baae <_strtod_l+0x1ee>
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	f103 0301 	add.w	r3, r3, #1
 800bb0e:	dc03      	bgt.n	800bb18 <_strtod_l+0x258>
 800bb10:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800bb12:	434f      	muls	r7, r1
 800bb14:	970a      	str	r7, [sp, #40]	; 0x28
 800bb16:	e7e1      	b.n	800badc <_strtod_l+0x21c>
 800bb18:	2b10      	cmp	r3, #16
 800bb1a:	bfd8      	it	le
 800bb1c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bb20:	e7dc      	b.n	800badc <_strtod_l+0x21c>
 800bb22:	2e10      	cmp	r6, #16
 800bb24:	bfdc      	itt	le
 800bb26:	230a      	movle	r3, #10
 800bb28:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bb2c:	e7e3      	b.n	800baf6 <_strtod_l+0x236>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	9308      	str	r3, [sp, #32]
 800bb32:	2301      	movs	r3, #1
 800bb34:	e780      	b.n	800ba38 <_strtod_l+0x178>
 800bb36:	f04f 0c00 	mov.w	ip, #0
 800bb3a:	1caa      	adds	r2, r5, #2
 800bb3c:	9219      	str	r2, [sp, #100]	; 0x64
 800bb3e:	78aa      	ldrb	r2, [r5, #2]
 800bb40:	e788      	b.n	800ba54 <_strtod_l+0x194>
 800bb42:	f04f 0c01 	mov.w	ip, #1
 800bb46:	e7f8      	b.n	800bb3a <_strtod_l+0x27a>
 800bb48:	0800ddb0 	.word	0x0800ddb0
 800bb4c:	7ff00000 	.word	0x7ff00000
 800bb50:	0800ddac 	.word	0x0800ddac
 800bb54:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb56:	1c51      	adds	r1, r2, #1
 800bb58:	9119      	str	r1, [sp, #100]	; 0x64
 800bb5a:	7852      	ldrb	r2, [r2, #1]
 800bb5c:	2a30      	cmp	r2, #48	; 0x30
 800bb5e:	d0f9      	beq.n	800bb54 <_strtod_l+0x294>
 800bb60:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bb64:	2908      	cmp	r1, #8
 800bb66:	f63f af7a 	bhi.w	800ba5e <_strtod_l+0x19e>
 800bb6a:	3a30      	subs	r2, #48	; 0x30
 800bb6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb6e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb70:	920c      	str	r2, [sp, #48]	; 0x30
 800bb72:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb74:	1c57      	adds	r7, r2, #1
 800bb76:	9719      	str	r7, [sp, #100]	; 0x64
 800bb78:	7852      	ldrb	r2, [r2, #1]
 800bb7a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bb7e:	f1be 0f09 	cmp.w	lr, #9
 800bb82:	d938      	bls.n	800bbf6 <_strtod_l+0x336>
 800bb84:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb86:	1a7f      	subs	r7, r7, r1
 800bb88:	2f08      	cmp	r7, #8
 800bb8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bb8e:	dc03      	bgt.n	800bb98 <_strtod_l+0x2d8>
 800bb90:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb92:	428f      	cmp	r7, r1
 800bb94:	bfa8      	it	ge
 800bb96:	460f      	movge	r7, r1
 800bb98:	f1bc 0f00 	cmp.w	ip, #0
 800bb9c:	d000      	beq.n	800bba0 <_strtod_l+0x2e0>
 800bb9e:	427f      	negs	r7, r7
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	d14f      	bne.n	800bc44 <_strtod_l+0x384>
 800bba4:	9905      	ldr	r1, [sp, #20]
 800bba6:	4301      	orrs	r1, r0
 800bba8:	f47f aec3 	bne.w	800b932 <_strtod_l+0x72>
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f47f aedb 	bne.w	800b968 <_strtod_l+0xa8>
 800bbb2:	2a69      	cmp	r2, #105	; 0x69
 800bbb4:	d029      	beq.n	800bc0a <_strtod_l+0x34a>
 800bbb6:	dc26      	bgt.n	800bc06 <_strtod_l+0x346>
 800bbb8:	2a49      	cmp	r2, #73	; 0x49
 800bbba:	d026      	beq.n	800bc0a <_strtod_l+0x34a>
 800bbbc:	2a4e      	cmp	r2, #78	; 0x4e
 800bbbe:	f47f aed3 	bne.w	800b968 <_strtod_l+0xa8>
 800bbc2:	499a      	ldr	r1, [pc, #616]	; (800be2c <_strtod_l+0x56c>)
 800bbc4:	a819      	add	r0, sp, #100	; 0x64
 800bbc6:	f001 f9a3 	bl	800cf10 <__match>
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	f43f aecc 	beq.w	800b968 <_strtod_l+0xa8>
 800bbd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b28      	cmp	r3, #40	; 0x28
 800bbd6:	d12f      	bne.n	800bc38 <_strtod_l+0x378>
 800bbd8:	4995      	ldr	r1, [pc, #596]	; (800be30 <_strtod_l+0x570>)
 800bbda:	aa1c      	add	r2, sp, #112	; 0x70
 800bbdc:	a819      	add	r0, sp, #100	; 0x64
 800bbde:	f001 f9ab 	bl	800cf38 <__hexnan>
 800bbe2:	2805      	cmp	r0, #5
 800bbe4:	d128      	bne.n	800bc38 <_strtod_l+0x378>
 800bbe6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bbe8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800bbec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bbf0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bbf4:	e69d      	b.n	800b932 <_strtod_l+0x72>
 800bbf6:	210a      	movs	r1, #10
 800bbf8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bbfa:	fb01 2107 	mla	r1, r1, r7, r2
 800bbfe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bc02:	9209      	str	r2, [sp, #36]	; 0x24
 800bc04:	e7b5      	b.n	800bb72 <_strtod_l+0x2b2>
 800bc06:	2a6e      	cmp	r2, #110	; 0x6e
 800bc08:	e7d9      	b.n	800bbbe <_strtod_l+0x2fe>
 800bc0a:	498a      	ldr	r1, [pc, #552]	; (800be34 <_strtod_l+0x574>)
 800bc0c:	a819      	add	r0, sp, #100	; 0x64
 800bc0e:	f001 f97f 	bl	800cf10 <__match>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f43f aea8 	beq.w	800b968 <_strtod_l+0xa8>
 800bc18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc1a:	4987      	ldr	r1, [pc, #540]	; (800be38 <_strtod_l+0x578>)
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	a819      	add	r0, sp, #100	; 0x64
 800bc20:	9319      	str	r3, [sp, #100]	; 0x64
 800bc22:	f001 f975 	bl	800cf10 <__match>
 800bc26:	b910      	cbnz	r0, 800bc2e <_strtod_l+0x36e>
 800bc28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	9319      	str	r3, [sp, #100]	; 0x64
 800bc2e:	f04f 0800 	mov.w	r8, #0
 800bc32:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800be3c <_strtod_l+0x57c>
 800bc36:	e67c      	b.n	800b932 <_strtod_l+0x72>
 800bc38:	4881      	ldr	r0, [pc, #516]	; (800be40 <_strtod_l+0x580>)
 800bc3a:	f000 fe87 	bl	800c94c <nan>
 800bc3e:	4680      	mov	r8, r0
 800bc40:	4689      	mov	r9, r1
 800bc42:	e676      	b.n	800b932 <_strtod_l+0x72>
 800bc44:	9b08      	ldr	r3, [sp, #32]
 800bc46:	f1bb 0f00 	cmp.w	fp, #0
 800bc4a:	bf08      	it	eq
 800bc4c:	46b3      	moveq	fp, r6
 800bc4e:	1afb      	subs	r3, r7, r3
 800bc50:	2e10      	cmp	r6, #16
 800bc52:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bc54:	4635      	mov	r5, r6
 800bc56:	9309      	str	r3, [sp, #36]	; 0x24
 800bc58:	bfa8      	it	ge
 800bc5a:	2510      	movge	r5, #16
 800bc5c:	f7f4 fbc2 	bl	80003e4 <__aeabi_ui2d>
 800bc60:	2e09      	cmp	r6, #9
 800bc62:	4680      	mov	r8, r0
 800bc64:	4689      	mov	r9, r1
 800bc66:	dd13      	ble.n	800bc90 <_strtod_l+0x3d0>
 800bc68:	4b76      	ldr	r3, [pc, #472]	; (800be44 <_strtod_l+0x584>)
 800bc6a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc6e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bc72:	f7f4 fc31 	bl	80004d8 <__aeabi_dmul>
 800bc76:	4680      	mov	r8, r0
 800bc78:	4650      	mov	r0, sl
 800bc7a:	4689      	mov	r9, r1
 800bc7c:	f7f4 fbb2 	bl	80003e4 <__aeabi_ui2d>
 800bc80:	4602      	mov	r2, r0
 800bc82:	460b      	mov	r3, r1
 800bc84:	4640      	mov	r0, r8
 800bc86:	4649      	mov	r1, r9
 800bc88:	f7f4 fa70 	bl	800016c <__adddf3>
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	4689      	mov	r9, r1
 800bc90:	2e0f      	cmp	r6, #15
 800bc92:	dc36      	bgt.n	800bd02 <_strtod_l+0x442>
 800bc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f43f ae4b 	beq.w	800b932 <_strtod_l+0x72>
 800bc9c:	dd22      	ble.n	800bce4 <_strtod_l+0x424>
 800bc9e:	2b16      	cmp	r3, #22
 800bca0:	dc09      	bgt.n	800bcb6 <_strtod_l+0x3f6>
 800bca2:	4968      	ldr	r1, [pc, #416]	; (800be44 <_strtod_l+0x584>)
 800bca4:	4642      	mov	r2, r8
 800bca6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcaa:	464b      	mov	r3, r9
 800bcac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb0:	f7f4 fc12 	bl	80004d8 <__aeabi_dmul>
 800bcb4:	e7c3      	b.n	800bc3e <_strtod_l+0x37e>
 800bcb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcb8:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	db20      	blt.n	800bd02 <_strtod_l+0x442>
 800bcc0:	4c60      	ldr	r4, [pc, #384]	; (800be44 <_strtod_l+0x584>)
 800bcc2:	f1c6 060f 	rsb	r6, r6, #15
 800bcc6:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bcca:	4642      	mov	r2, r8
 800bccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcd0:	464b      	mov	r3, r9
 800bcd2:	f7f4 fc01 	bl	80004d8 <__aeabi_dmul>
 800bcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd8:	1b9e      	subs	r6, r3, r6
 800bcda:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bcde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bce2:	e7e5      	b.n	800bcb0 <_strtod_l+0x3f0>
 800bce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bce6:	3316      	adds	r3, #22
 800bce8:	db0b      	blt.n	800bd02 <_strtod_l+0x442>
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	4640      	mov	r0, r8
 800bcee:	1bdf      	subs	r7, r3, r7
 800bcf0:	4b54      	ldr	r3, [pc, #336]	; (800be44 <_strtod_l+0x584>)
 800bcf2:	4649      	mov	r1, r9
 800bcf4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bcf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcfc:	f7f4 fd16 	bl	800072c <__aeabi_ddiv>
 800bd00:	e79d      	b.n	800bc3e <_strtod_l+0x37e>
 800bd02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd04:	1b75      	subs	r5, r6, r5
 800bd06:	441d      	add	r5, r3
 800bd08:	2d00      	cmp	r5, #0
 800bd0a:	dd70      	ble.n	800bdee <_strtod_l+0x52e>
 800bd0c:	f015 030f 	ands.w	r3, r5, #15
 800bd10:	d00a      	beq.n	800bd28 <_strtod_l+0x468>
 800bd12:	494c      	ldr	r1, [pc, #304]	; (800be44 <_strtod_l+0x584>)
 800bd14:	4642      	mov	r2, r8
 800bd16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bd1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd1e:	464b      	mov	r3, r9
 800bd20:	f7f4 fbda 	bl	80004d8 <__aeabi_dmul>
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	f035 050f 	bics.w	r5, r5, #15
 800bd2c:	d04d      	beq.n	800bdca <_strtod_l+0x50a>
 800bd2e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bd32:	dd22      	ble.n	800bd7a <_strtod_l+0x4ba>
 800bd34:	2600      	movs	r6, #0
 800bd36:	46b3      	mov	fp, r6
 800bd38:	960b      	str	r6, [sp, #44]	; 0x2c
 800bd3a:	9608      	str	r6, [sp, #32]
 800bd3c:	2322      	movs	r3, #34	; 0x22
 800bd3e:	f04f 0800 	mov.w	r8, #0
 800bd42:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800be3c <_strtod_l+0x57c>
 800bd46:	6023      	str	r3, [r4, #0]
 800bd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f43f adf1 	beq.w	800b932 <_strtod_l+0x72>
 800bd50:	4620      	mov	r0, r4
 800bd52:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bd54:	f7ff f934 	bl	800afc0 <_Bfree>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	9908      	ldr	r1, [sp, #32]
 800bd5c:	f7ff f930 	bl	800afc0 <_Bfree>
 800bd60:	4659      	mov	r1, fp
 800bd62:	4620      	mov	r0, r4
 800bd64:	f7ff f92c 	bl	800afc0 <_Bfree>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd6c:	f7ff f928 	bl	800afc0 <_Bfree>
 800bd70:	4631      	mov	r1, r6
 800bd72:	4620      	mov	r0, r4
 800bd74:	f7ff f924 	bl	800afc0 <_Bfree>
 800bd78:	e5db      	b.n	800b932 <_strtod_l+0x72>
 800bd7a:	4b33      	ldr	r3, [pc, #204]	; (800be48 <_strtod_l+0x588>)
 800bd7c:	4640      	mov	r0, r8
 800bd7e:	9305      	str	r3, [sp, #20]
 800bd80:	2300      	movs	r3, #0
 800bd82:	4649      	mov	r1, r9
 800bd84:	469a      	mov	sl, r3
 800bd86:	112d      	asrs	r5, r5, #4
 800bd88:	2d01      	cmp	r5, #1
 800bd8a:	dc21      	bgt.n	800bdd0 <_strtod_l+0x510>
 800bd8c:	b10b      	cbz	r3, 800bd92 <_strtod_l+0x4d2>
 800bd8e:	4680      	mov	r8, r0
 800bd90:	4689      	mov	r9, r1
 800bd92:	492d      	ldr	r1, [pc, #180]	; (800be48 <_strtod_l+0x588>)
 800bd94:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bd98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bd9c:	4642      	mov	r2, r8
 800bd9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda2:	464b      	mov	r3, r9
 800bda4:	f7f4 fb98 	bl	80004d8 <__aeabi_dmul>
 800bda8:	4b24      	ldr	r3, [pc, #144]	; (800be3c <_strtod_l+0x57c>)
 800bdaa:	460a      	mov	r2, r1
 800bdac:	400b      	ands	r3, r1
 800bdae:	4927      	ldr	r1, [pc, #156]	; (800be4c <_strtod_l+0x58c>)
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	428b      	cmp	r3, r1
 800bdb4:	d8be      	bhi.n	800bd34 <_strtod_l+0x474>
 800bdb6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bdba:	428b      	cmp	r3, r1
 800bdbc:	bf86      	itte	hi
 800bdbe:	f04f 38ff 	movhi.w	r8, #4294967295
 800bdc2:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800be50 <_strtod_l+0x590>
 800bdc6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bdca:	2300      	movs	r3, #0
 800bdcc:	9305      	str	r3, [sp, #20]
 800bdce:	e07b      	b.n	800bec8 <_strtod_l+0x608>
 800bdd0:	07ea      	lsls	r2, r5, #31
 800bdd2:	d505      	bpl.n	800bde0 <_strtod_l+0x520>
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	f7f4 fb7d 	bl	80004d8 <__aeabi_dmul>
 800bdde:	2301      	movs	r3, #1
 800bde0:	9a05      	ldr	r2, [sp, #20]
 800bde2:	f10a 0a01 	add.w	sl, sl, #1
 800bde6:	3208      	adds	r2, #8
 800bde8:	106d      	asrs	r5, r5, #1
 800bdea:	9205      	str	r2, [sp, #20]
 800bdec:	e7cc      	b.n	800bd88 <_strtod_l+0x4c8>
 800bdee:	d0ec      	beq.n	800bdca <_strtod_l+0x50a>
 800bdf0:	426d      	negs	r5, r5
 800bdf2:	f015 020f 	ands.w	r2, r5, #15
 800bdf6:	d00a      	beq.n	800be0e <_strtod_l+0x54e>
 800bdf8:	4b12      	ldr	r3, [pc, #72]	; (800be44 <_strtod_l+0x584>)
 800bdfa:	4640      	mov	r0, r8
 800bdfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be00:	4649      	mov	r1, r9
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 fc91 	bl	800072c <__aeabi_ddiv>
 800be0a:	4680      	mov	r8, r0
 800be0c:	4689      	mov	r9, r1
 800be0e:	112d      	asrs	r5, r5, #4
 800be10:	d0db      	beq.n	800bdca <_strtod_l+0x50a>
 800be12:	2d1f      	cmp	r5, #31
 800be14:	dd1e      	ble.n	800be54 <_strtod_l+0x594>
 800be16:	2600      	movs	r6, #0
 800be18:	46b3      	mov	fp, r6
 800be1a:	960b      	str	r6, [sp, #44]	; 0x2c
 800be1c:	9608      	str	r6, [sp, #32]
 800be1e:	2322      	movs	r3, #34	; 0x22
 800be20:	f04f 0800 	mov.w	r8, #0
 800be24:	f04f 0900 	mov.w	r9, #0
 800be28:	6023      	str	r3, [r4, #0]
 800be2a:	e78d      	b.n	800bd48 <_strtod_l+0x488>
 800be2c:	0800db98 	.word	0x0800db98
 800be30:	0800ddc4 	.word	0x0800ddc4
 800be34:	0800db90 	.word	0x0800db90
 800be38:	0800dbc7 	.word	0x0800dbc7
 800be3c:	7ff00000 	.word	0x7ff00000
 800be40:	0800de54 	.word	0x0800de54
 800be44:	0800dcd8 	.word	0x0800dcd8
 800be48:	0800dcb0 	.word	0x0800dcb0
 800be4c:	7ca00000 	.word	0x7ca00000
 800be50:	7fefffff 	.word	0x7fefffff
 800be54:	f015 0310 	ands.w	r3, r5, #16
 800be58:	bf18      	it	ne
 800be5a:	236a      	movne	r3, #106	; 0x6a
 800be5c:	4640      	mov	r0, r8
 800be5e:	9305      	str	r3, [sp, #20]
 800be60:	4649      	mov	r1, r9
 800be62:	2300      	movs	r3, #0
 800be64:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800c130 <_strtod_l+0x870>
 800be68:	07ea      	lsls	r2, r5, #31
 800be6a:	d504      	bpl.n	800be76 <_strtod_l+0x5b6>
 800be6c:	e9da 2300 	ldrd	r2, r3, [sl]
 800be70:	f7f4 fb32 	bl	80004d8 <__aeabi_dmul>
 800be74:	2301      	movs	r3, #1
 800be76:	106d      	asrs	r5, r5, #1
 800be78:	f10a 0a08 	add.w	sl, sl, #8
 800be7c:	d1f4      	bne.n	800be68 <_strtod_l+0x5a8>
 800be7e:	b10b      	cbz	r3, 800be84 <_strtod_l+0x5c4>
 800be80:	4680      	mov	r8, r0
 800be82:	4689      	mov	r9, r1
 800be84:	9b05      	ldr	r3, [sp, #20]
 800be86:	b1bb      	cbz	r3, 800beb8 <_strtod_l+0x5f8>
 800be88:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800be8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be90:	2b00      	cmp	r3, #0
 800be92:	4649      	mov	r1, r9
 800be94:	dd10      	ble.n	800beb8 <_strtod_l+0x5f8>
 800be96:	2b1f      	cmp	r3, #31
 800be98:	f340 8128 	ble.w	800c0ec <_strtod_l+0x82c>
 800be9c:	2b34      	cmp	r3, #52	; 0x34
 800be9e:	bfd8      	it	le
 800bea0:	f04f 33ff 	movle.w	r3, #4294967295
 800bea4:	f04f 0800 	mov.w	r8, #0
 800bea8:	bfcf      	iteee	gt
 800beaa:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800beae:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800beb2:	4093      	lslle	r3, r2
 800beb4:	ea03 0901 	andle.w	r9, r3, r1
 800beb8:	2200      	movs	r2, #0
 800beba:	2300      	movs	r3, #0
 800bebc:	4640      	mov	r0, r8
 800bebe:	4649      	mov	r1, r9
 800bec0:	f7f4 fd72 	bl	80009a8 <__aeabi_dcmpeq>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	d1a6      	bne.n	800be16 <_strtod_l+0x556>
 800bec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beca:	465a      	mov	r2, fp
 800becc:	9300      	str	r3, [sp, #0]
 800bece:	4620      	mov	r0, r4
 800bed0:	4633      	mov	r3, r6
 800bed2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bed4:	f7ff f8dc 	bl	800b090 <__s2b>
 800bed8:	900b      	str	r0, [sp, #44]	; 0x2c
 800beda:	2800      	cmp	r0, #0
 800bedc:	f43f af2a 	beq.w	800bd34 <_strtod_l+0x474>
 800bee0:	2600      	movs	r6, #0
 800bee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bee4:	9b08      	ldr	r3, [sp, #32]
 800bee6:	2a00      	cmp	r2, #0
 800bee8:	eba3 0307 	sub.w	r3, r3, r7
 800beec:	bfa8      	it	ge
 800beee:	2300      	movge	r3, #0
 800bef0:	46b3      	mov	fp, r6
 800bef2:	9312      	str	r3, [sp, #72]	; 0x48
 800bef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bef8:	9316      	str	r3, [sp, #88]	; 0x58
 800befa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800befc:	4620      	mov	r0, r4
 800befe:	6859      	ldr	r1, [r3, #4]
 800bf00:	f7ff f81e 	bl	800af40 <_Balloc>
 800bf04:	9008      	str	r0, [sp, #32]
 800bf06:	2800      	cmp	r0, #0
 800bf08:	f43f af18 	beq.w	800bd3c <_strtod_l+0x47c>
 800bf0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf0e:	300c      	adds	r0, #12
 800bf10:	691a      	ldr	r2, [r3, #16]
 800bf12:	f103 010c 	add.w	r1, r3, #12
 800bf16:	3202      	adds	r2, #2
 800bf18:	0092      	lsls	r2, r2, #2
 800bf1a:	f000 fd09 	bl	800c930 <memcpy>
 800bf1e:	ab1c      	add	r3, sp, #112	; 0x70
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	ab1b      	add	r3, sp, #108	; 0x6c
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	4642      	mov	r2, r8
 800bf28:	464b      	mov	r3, r9
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bf30:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800bf34:	f7ff fbd8 	bl	800b6e8 <__d2b>
 800bf38:	901a      	str	r0, [sp, #104]	; 0x68
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	f43f aefe 	beq.w	800bd3c <_strtod_l+0x47c>
 800bf40:	2101      	movs	r1, #1
 800bf42:	4620      	mov	r0, r4
 800bf44:	f7ff f93c 	bl	800b1c0 <__i2b>
 800bf48:	4683      	mov	fp, r0
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	f43f aef6 	beq.w	800bd3c <_strtod_l+0x47c>
 800bf50:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bf52:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	bfab      	itete	ge
 800bf58:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800bf5a:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bf5c:	eb07 0a03 	addge.w	sl, r7, r3
 800bf60:	1bdd      	sublt	r5, r3, r7
 800bf62:	9b05      	ldr	r3, [sp, #20]
 800bf64:	bfa8      	it	ge
 800bf66:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bf68:	eba7 0703 	sub.w	r7, r7, r3
 800bf6c:	4417      	add	r7, r2
 800bf6e:	4b71      	ldr	r3, [pc, #452]	; (800c134 <_strtod_l+0x874>)
 800bf70:	f107 37ff 	add.w	r7, r7, #4294967295
 800bf74:	bfb8      	it	lt
 800bf76:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800bf7a:	429f      	cmp	r7, r3
 800bf7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf80:	f280 80c7 	bge.w	800c112 <_strtod_l+0x852>
 800bf84:	1bdb      	subs	r3, r3, r7
 800bf86:	2b1f      	cmp	r3, #31
 800bf88:	f04f 0101 	mov.w	r1, #1
 800bf8c:	eba2 0203 	sub.w	r2, r2, r3
 800bf90:	f300 80b3 	bgt.w	800c0fa <_strtod_l+0x83a>
 800bf94:	fa01 f303 	lsl.w	r3, r1, r3
 800bf98:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9310      	str	r3, [sp, #64]	; 0x40
 800bf9e:	eb0a 0702 	add.w	r7, sl, r2
 800bfa2:	9b05      	ldr	r3, [sp, #20]
 800bfa4:	45ba      	cmp	sl, r7
 800bfa6:	4415      	add	r5, r2
 800bfa8:	441d      	add	r5, r3
 800bfaa:	4653      	mov	r3, sl
 800bfac:	bfa8      	it	ge
 800bfae:	463b      	movge	r3, r7
 800bfb0:	42ab      	cmp	r3, r5
 800bfb2:	bfa8      	it	ge
 800bfb4:	462b      	movge	r3, r5
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	bfc2      	ittt	gt
 800bfba:	1aff      	subgt	r7, r7, r3
 800bfbc:	1aed      	subgt	r5, r5, r3
 800bfbe:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bfc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dd17      	ble.n	800bff8 <_strtod_l+0x738>
 800bfc8:	4659      	mov	r1, fp
 800bfca:	461a      	mov	r2, r3
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7ff f9b5 	bl	800b33c <__pow5mult>
 800bfd2:	4683      	mov	fp, r0
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f43f aeb1 	beq.w	800bd3c <_strtod_l+0x47c>
 800bfda:	4601      	mov	r1, r0
 800bfdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bfde:	4620      	mov	r0, r4
 800bfe0:	f7ff f904 	bl	800b1ec <__multiply>
 800bfe4:	900a      	str	r0, [sp, #40]	; 0x28
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f43f aea8 	beq.w	800bd3c <_strtod_l+0x47c>
 800bfec:	4620      	mov	r0, r4
 800bfee:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bff0:	f7fe ffe6 	bl	800afc0 <_Bfree>
 800bff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bff6:	931a      	str	r3, [sp, #104]	; 0x68
 800bff8:	2f00      	cmp	r7, #0
 800bffa:	f300 808f 	bgt.w	800c11c <_strtod_l+0x85c>
 800bffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	dd08      	ble.n	800c016 <_strtod_l+0x756>
 800c004:	4620      	mov	r0, r4
 800c006:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c008:	9908      	ldr	r1, [sp, #32]
 800c00a:	f7ff f997 	bl	800b33c <__pow5mult>
 800c00e:	9008      	str	r0, [sp, #32]
 800c010:	2800      	cmp	r0, #0
 800c012:	f43f ae93 	beq.w	800bd3c <_strtod_l+0x47c>
 800c016:	2d00      	cmp	r5, #0
 800c018:	dd08      	ble.n	800c02c <_strtod_l+0x76c>
 800c01a:	462a      	mov	r2, r5
 800c01c:	4620      	mov	r0, r4
 800c01e:	9908      	ldr	r1, [sp, #32]
 800c020:	f7ff f9e6 	bl	800b3f0 <__lshift>
 800c024:	9008      	str	r0, [sp, #32]
 800c026:	2800      	cmp	r0, #0
 800c028:	f43f ae88 	beq.w	800bd3c <_strtod_l+0x47c>
 800c02c:	f1ba 0f00 	cmp.w	sl, #0
 800c030:	dd08      	ble.n	800c044 <_strtod_l+0x784>
 800c032:	4659      	mov	r1, fp
 800c034:	4652      	mov	r2, sl
 800c036:	4620      	mov	r0, r4
 800c038:	f7ff f9da 	bl	800b3f0 <__lshift>
 800c03c:	4683      	mov	fp, r0
 800c03e:	2800      	cmp	r0, #0
 800c040:	f43f ae7c 	beq.w	800bd3c <_strtod_l+0x47c>
 800c044:	4620      	mov	r0, r4
 800c046:	9a08      	ldr	r2, [sp, #32]
 800c048:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c04a:	f7ff fa59 	bl	800b500 <__mdiff>
 800c04e:	4606      	mov	r6, r0
 800c050:	2800      	cmp	r0, #0
 800c052:	f43f ae73 	beq.w	800bd3c <_strtod_l+0x47c>
 800c056:	2500      	movs	r5, #0
 800c058:	68c3      	ldr	r3, [r0, #12]
 800c05a:	4659      	mov	r1, fp
 800c05c:	60c5      	str	r5, [r0, #12]
 800c05e:	930a      	str	r3, [sp, #40]	; 0x28
 800c060:	f7ff fa32 	bl	800b4c8 <__mcmp>
 800c064:	42a8      	cmp	r0, r5
 800c066:	da6b      	bge.n	800c140 <_strtod_l+0x880>
 800c068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c06a:	ea53 0308 	orrs.w	r3, r3, r8
 800c06e:	f040 808f 	bne.w	800c190 <_strtod_l+0x8d0>
 800c072:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c076:	2b00      	cmp	r3, #0
 800c078:	f040 808a 	bne.w	800c190 <_strtod_l+0x8d0>
 800c07c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c080:	0d1b      	lsrs	r3, r3, #20
 800c082:	051b      	lsls	r3, r3, #20
 800c084:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c088:	f240 8082 	bls.w	800c190 <_strtod_l+0x8d0>
 800c08c:	6973      	ldr	r3, [r6, #20]
 800c08e:	b913      	cbnz	r3, 800c096 <_strtod_l+0x7d6>
 800c090:	6933      	ldr	r3, [r6, #16]
 800c092:	2b01      	cmp	r3, #1
 800c094:	dd7c      	ble.n	800c190 <_strtod_l+0x8d0>
 800c096:	4631      	mov	r1, r6
 800c098:	2201      	movs	r2, #1
 800c09a:	4620      	mov	r0, r4
 800c09c:	f7ff f9a8 	bl	800b3f0 <__lshift>
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	f7ff fa10 	bl	800b4c8 <__mcmp>
 800c0a8:	2800      	cmp	r0, #0
 800c0aa:	dd71      	ble.n	800c190 <_strtod_l+0x8d0>
 800c0ac:	9905      	ldr	r1, [sp, #20]
 800c0ae:	464b      	mov	r3, r9
 800c0b0:	4a21      	ldr	r2, [pc, #132]	; (800c138 <_strtod_l+0x878>)
 800c0b2:	2900      	cmp	r1, #0
 800c0b4:	f000 808d 	beq.w	800c1d2 <_strtod_l+0x912>
 800c0b8:	ea02 0109 	and.w	r1, r2, r9
 800c0bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c0c0:	f300 8087 	bgt.w	800c1d2 <_strtod_l+0x912>
 800c0c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c0c8:	f77f aea9 	ble.w	800be1e <_strtod_l+0x55e>
 800c0cc:	4640      	mov	r0, r8
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4b1a      	ldr	r3, [pc, #104]	; (800c13c <_strtod_l+0x87c>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f7f4 fa00 	bl	80004d8 <__aeabi_dmul>
 800c0d8:	4b17      	ldr	r3, [pc, #92]	; (800c138 <_strtod_l+0x878>)
 800c0da:	4680      	mov	r8, r0
 800c0dc:	400b      	ands	r3, r1
 800c0de:	4689      	mov	r9, r1
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f47f ae35 	bne.w	800bd50 <_strtod_l+0x490>
 800c0e6:	2322      	movs	r3, #34	; 0x22
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	e631      	b.n	800bd50 <_strtod_l+0x490>
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c0f4:	ea03 0808 	and.w	r8, r3, r8
 800c0f8:	e6de      	b.n	800beb8 <_strtod_l+0x5f8>
 800c0fa:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800c0fe:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800c102:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800c106:	37e2      	adds	r7, #226	; 0xe2
 800c108:	fa01 f307 	lsl.w	r3, r1, r7
 800c10c:	9310      	str	r3, [sp, #64]	; 0x40
 800c10e:	9113      	str	r1, [sp, #76]	; 0x4c
 800c110:	e745      	b.n	800bf9e <_strtod_l+0x6de>
 800c112:	2300      	movs	r3, #0
 800c114:	9310      	str	r3, [sp, #64]	; 0x40
 800c116:	2301      	movs	r3, #1
 800c118:	9313      	str	r3, [sp, #76]	; 0x4c
 800c11a:	e740      	b.n	800bf9e <_strtod_l+0x6de>
 800c11c:	463a      	mov	r2, r7
 800c11e:	4620      	mov	r0, r4
 800c120:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c122:	f7ff f965 	bl	800b3f0 <__lshift>
 800c126:	901a      	str	r0, [sp, #104]	; 0x68
 800c128:	2800      	cmp	r0, #0
 800c12a:	f47f af68 	bne.w	800bffe <_strtod_l+0x73e>
 800c12e:	e605      	b.n	800bd3c <_strtod_l+0x47c>
 800c130:	0800ddd8 	.word	0x0800ddd8
 800c134:	fffffc02 	.word	0xfffffc02
 800c138:	7ff00000 	.word	0x7ff00000
 800c13c:	39500000 	.word	0x39500000
 800c140:	46ca      	mov	sl, r9
 800c142:	d165      	bne.n	800c210 <_strtod_l+0x950>
 800c144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c146:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c14a:	b352      	cbz	r2, 800c1a2 <_strtod_l+0x8e2>
 800c14c:	4a9e      	ldr	r2, [pc, #632]	; (800c3c8 <_strtod_l+0xb08>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d12a      	bne.n	800c1a8 <_strtod_l+0x8e8>
 800c152:	9b05      	ldr	r3, [sp, #20]
 800c154:	4641      	mov	r1, r8
 800c156:	b1fb      	cbz	r3, 800c198 <_strtod_l+0x8d8>
 800c158:	4b9c      	ldr	r3, [pc, #624]	; (800c3cc <_strtod_l+0xb0c>)
 800c15a:	f04f 32ff 	mov.w	r2, #4294967295
 800c15e:	ea09 0303 	and.w	r3, r9, r3
 800c162:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c166:	d81a      	bhi.n	800c19e <_strtod_l+0x8de>
 800c168:	0d1b      	lsrs	r3, r3, #20
 800c16a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c16e:	fa02 f303 	lsl.w	r3, r2, r3
 800c172:	4299      	cmp	r1, r3
 800c174:	d118      	bne.n	800c1a8 <_strtod_l+0x8e8>
 800c176:	4b96      	ldr	r3, [pc, #600]	; (800c3d0 <_strtod_l+0xb10>)
 800c178:	459a      	cmp	sl, r3
 800c17a:	d102      	bne.n	800c182 <_strtod_l+0x8c2>
 800c17c:	3101      	adds	r1, #1
 800c17e:	f43f addd 	beq.w	800bd3c <_strtod_l+0x47c>
 800c182:	f04f 0800 	mov.w	r8, #0
 800c186:	4b91      	ldr	r3, [pc, #580]	; (800c3cc <_strtod_l+0xb0c>)
 800c188:	ea0a 0303 	and.w	r3, sl, r3
 800c18c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c190:	9b05      	ldr	r3, [sp, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d19a      	bne.n	800c0cc <_strtod_l+0x80c>
 800c196:	e5db      	b.n	800bd50 <_strtod_l+0x490>
 800c198:	f04f 33ff 	mov.w	r3, #4294967295
 800c19c:	e7e9      	b.n	800c172 <_strtod_l+0x8b2>
 800c19e:	4613      	mov	r3, r2
 800c1a0:	e7e7      	b.n	800c172 <_strtod_l+0x8b2>
 800c1a2:	ea53 0308 	orrs.w	r3, r3, r8
 800c1a6:	d081      	beq.n	800c0ac <_strtod_l+0x7ec>
 800c1a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c1aa:	b1e3      	cbz	r3, 800c1e6 <_strtod_l+0x926>
 800c1ac:	ea13 0f0a 	tst.w	r3, sl
 800c1b0:	d0ee      	beq.n	800c190 <_strtod_l+0x8d0>
 800c1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1b4:	4640      	mov	r0, r8
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	9a05      	ldr	r2, [sp, #20]
 800c1ba:	b1c3      	cbz	r3, 800c1ee <_strtod_l+0x92e>
 800c1bc:	f7ff fb5c 	bl	800b878 <sulp>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c1c8:	f7f3 ffd0 	bl	800016c <__adddf3>
 800c1cc:	4680      	mov	r8, r0
 800c1ce:	4689      	mov	r9, r1
 800c1d0:	e7de      	b.n	800c190 <_strtod_l+0x8d0>
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c1d8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c1dc:	f04f 38ff 	mov.w	r8, #4294967295
 800c1e0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c1e4:	e7d4      	b.n	800c190 <_strtod_l+0x8d0>
 800c1e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c1e8:	ea13 0f08 	tst.w	r3, r8
 800c1ec:	e7e0      	b.n	800c1b0 <_strtod_l+0x8f0>
 800c1ee:	f7ff fb43 	bl	800b878 <sulp>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c1f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c1fa:	f7f3 ffb5 	bl	8000168 <__aeabi_dsub>
 800c1fe:	2200      	movs	r2, #0
 800c200:	2300      	movs	r3, #0
 800c202:	4680      	mov	r8, r0
 800c204:	4689      	mov	r9, r1
 800c206:	f7f4 fbcf 	bl	80009a8 <__aeabi_dcmpeq>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	d0c0      	beq.n	800c190 <_strtod_l+0x8d0>
 800c20e:	e606      	b.n	800be1e <_strtod_l+0x55e>
 800c210:	4659      	mov	r1, fp
 800c212:	4630      	mov	r0, r6
 800c214:	f7ff fabe 	bl	800b794 <__ratio>
 800c218:	4602      	mov	r2, r0
 800c21a:	460b      	mov	r3, r1
 800c21c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c220:	2200      	movs	r2, #0
 800c222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c226:	f7f4 fbd3 	bl	80009d0 <__aeabi_dcmple>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d06f      	beq.n	800c30e <_strtod_l+0xa4e>
 800c22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c230:	2b00      	cmp	r3, #0
 800c232:	d17c      	bne.n	800c32e <_strtod_l+0xa6e>
 800c234:	f1b8 0f00 	cmp.w	r8, #0
 800c238:	d159      	bne.n	800c2ee <_strtod_l+0xa2e>
 800c23a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d17b      	bne.n	800c33a <_strtod_l+0xa7a>
 800c242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c246:	2200      	movs	r2, #0
 800c248:	4b62      	ldr	r3, [pc, #392]	; (800c3d4 <_strtod_l+0xb14>)
 800c24a:	f7f4 fbb7 	bl	80009bc <__aeabi_dcmplt>
 800c24e:	2800      	cmp	r0, #0
 800c250:	d15a      	bne.n	800c308 <_strtod_l+0xa48>
 800c252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c256:	2200      	movs	r2, #0
 800c258:	4b5f      	ldr	r3, [pc, #380]	; (800c3d8 <_strtod_l+0xb18>)
 800c25a:	f7f4 f93d 	bl	80004d8 <__aeabi_dmul>
 800c25e:	4605      	mov	r5, r0
 800c260:	460f      	mov	r7, r1
 800c262:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c266:	9506      	str	r5, [sp, #24]
 800c268:	9307      	str	r3, [sp, #28]
 800c26a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c26e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c272:	4b56      	ldr	r3, [pc, #344]	; (800c3cc <_strtod_l+0xb0c>)
 800c274:	4a55      	ldr	r2, [pc, #340]	; (800c3cc <_strtod_l+0xb0c>)
 800c276:	ea0a 0303 	and.w	r3, sl, r3
 800c27a:	9313      	str	r3, [sp, #76]	; 0x4c
 800c27c:	4b57      	ldr	r3, [pc, #348]	; (800c3dc <_strtod_l+0xb1c>)
 800c27e:	ea0a 0202 	and.w	r2, sl, r2
 800c282:	429a      	cmp	r2, r3
 800c284:	f040 80b0 	bne.w	800c3e8 <_strtod_l+0xb28>
 800c288:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c28c:	4640      	mov	r0, r8
 800c28e:	4649      	mov	r1, r9
 800c290:	f7ff f9c2 	bl	800b618 <__ulp>
 800c294:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c298:	f7f4 f91e 	bl	80004d8 <__aeabi_dmul>
 800c29c:	4642      	mov	r2, r8
 800c29e:	464b      	mov	r3, r9
 800c2a0:	f7f3 ff64 	bl	800016c <__adddf3>
 800c2a4:	f8df a124 	ldr.w	sl, [pc, #292]	; 800c3cc <_strtod_l+0xb0c>
 800c2a8:	4a4d      	ldr	r2, [pc, #308]	; (800c3e0 <_strtod_l+0xb20>)
 800c2aa:	ea01 0a0a 	and.w	sl, r1, sl
 800c2ae:	4592      	cmp	sl, r2
 800c2b0:	4680      	mov	r8, r0
 800c2b2:	d948      	bls.n	800c346 <_strtod_l+0xa86>
 800c2b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c2b6:	4b46      	ldr	r3, [pc, #280]	; (800c3d0 <_strtod_l+0xb10>)
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d103      	bne.n	800c2c4 <_strtod_l+0xa04>
 800c2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2be:	3301      	adds	r3, #1
 800c2c0:	f43f ad3c 	beq.w	800bd3c <_strtod_l+0x47c>
 800c2c4:	f04f 38ff 	mov.w	r8, #4294967295
 800c2c8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c3d0 <_strtod_l+0xb10>
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c2d0:	f7fe fe76 	bl	800afc0 <_Bfree>
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	9908      	ldr	r1, [sp, #32]
 800c2d8:	f7fe fe72 	bl	800afc0 <_Bfree>
 800c2dc:	4659      	mov	r1, fp
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7fe fe6e 	bl	800afc0 <_Bfree>
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	f7fe fe6a 	bl	800afc0 <_Bfree>
 800c2ec:	e605      	b.n	800befa <_strtod_l+0x63a>
 800c2ee:	f1b8 0f01 	cmp.w	r8, #1
 800c2f2:	d103      	bne.n	800c2fc <_strtod_l+0xa3c>
 800c2f4:	f1b9 0f00 	cmp.w	r9, #0
 800c2f8:	f43f ad91 	beq.w	800be1e <_strtod_l+0x55e>
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	4b39      	ldr	r3, [pc, #228]	; (800c3e4 <_strtod_l+0xb24>)
 800c300:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c302:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c306:	e016      	b.n	800c336 <_strtod_l+0xa76>
 800c308:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c30a:	4f33      	ldr	r7, [pc, #204]	; (800c3d8 <_strtod_l+0xb18>)
 800c30c:	e7a9      	b.n	800c262 <_strtod_l+0x9a2>
 800c30e:	4b32      	ldr	r3, [pc, #200]	; (800c3d8 <_strtod_l+0xb18>)
 800c310:	2200      	movs	r2, #0
 800c312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c316:	f7f4 f8df 	bl	80004d8 <__aeabi_dmul>
 800c31a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c31c:	4605      	mov	r5, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d09e      	beq.n	800c262 <_strtod_l+0x9a2>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c32c:	e79d      	b.n	800c26a <_strtod_l+0x9aa>
 800c32e:	2200      	movs	r2, #0
 800c330:	4b28      	ldr	r3, [pc, #160]	; (800c3d4 <_strtod_l+0xb14>)
 800c332:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c336:	4f27      	ldr	r7, [pc, #156]	; (800c3d4 <_strtod_l+0xb14>)
 800c338:	e797      	b.n	800c26a <_strtod_l+0x9aa>
 800c33a:	2200      	movs	r2, #0
 800c33c:	4b29      	ldr	r3, [pc, #164]	; (800c3e4 <_strtod_l+0xb24>)
 800c33e:	4645      	mov	r5, r8
 800c340:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c344:	e7f7      	b.n	800c336 <_strtod_l+0xa76>
 800c346:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800c34a:	9b05      	ldr	r3, [sp, #20]
 800c34c:	46ca      	mov	sl, r9
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1bc      	bne.n	800c2cc <_strtod_l+0xa0c>
 800c352:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c356:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c358:	0d1b      	lsrs	r3, r3, #20
 800c35a:	051b      	lsls	r3, r3, #20
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d1b5      	bne.n	800c2cc <_strtod_l+0xa0c>
 800c360:	4628      	mov	r0, r5
 800c362:	4639      	mov	r1, r7
 800c364:	f7f4 ff32 	bl	80011cc <__aeabi_d2lz>
 800c368:	f7f4 f888 	bl	800047c <__aeabi_l2d>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	4628      	mov	r0, r5
 800c372:	4639      	mov	r1, r7
 800c374:	f7f3 fef8 	bl	8000168 <__aeabi_dsub>
 800c378:	460b      	mov	r3, r1
 800c37a:	4602      	mov	r2, r0
 800c37c:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800c380:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c386:	ea4a 0a08 	orr.w	sl, sl, r8
 800c38a:	ea5a 0a03 	orrs.w	sl, sl, r3
 800c38e:	d06c      	beq.n	800c46a <_strtod_l+0xbaa>
 800c390:	a309      	add	r3, pc, #36	; (adr r3, 800c3b8 <_strtod_l+0xaf8>)
 800c392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c396:	f7f4 fb11 	bl	80009bc <__aeabi_dcmplt>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f47f acd8 	bne.w	800bd50 <_strtod_l+0x490>
 800c3a0:	a307      	add	r3, pc, #28	; (adr r3, 800c3c0 <_strtod_l+0xb00>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3aa:	f7f4 fb25 	bl	80009f8 <__aeabi_dcmpgt>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	d08c      	beq.n	800c2cc <_strtod_l+0xa0c>
 800c3b2:	e4cd      	b.n	800bd50 <_strtod_l+0x490>
 800c3b4:	f3af 8000 	nop.w
 800c3b8:	94a03595 	.word	0x94a03595
 800c3bc:	3fdfffff 	.word	0x3fdfffff
 800c3c0:	35afe535 	.word	0x35afe535
 800c3c4:	3fe00000 	.word	0x3fe00000
 800c3c8:	000fffff 	.word	0x000fffff
 800c3cc:	7ff00000 	.word	0x7ff00000
 800c3d0:	7fefffff 	.word	0x7fefffff
 800c3d4:	3ff00000 	.word	0x3ff00000
 800c3d8:	3fe00000 	.word	0x3fe00000
 800c3dc:	7fe00000 	.word	0x7fe00000
 800c3e0:	7c9fffff 	.word	0x7c9fffff
 800c3e4:	bff00000 	.word	0xbff00000
 800c3e8:	9b05      	ldr	r3, [sp, #20]
 800c3ea:	b333      	cbz	r3, 800c43a <_strtod_l+0xb7a>
 800c3ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c3f2:	d822      	bhi.n	800c43a <_strtod_l+0xb7a>
 800c3f4:	a328      	add	r3, pc, #160	; (adr r3, 800c498 <_strtod_l+0xbd8>)
 800c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	f7f4 fae7 	bl	80009d0 <__aeabi_dcmple>
 800c402:	b1a0      	cbz	r0, 800c42e <_strtod_l+0xb6e>
 800c404:	4639      	mov	r1, r7
 800c406:	4628      	mov	r0, r5
 800c408:	f7f4 fb3e 	bl	8000a88 <__aeabi_d2uiz>
 800c40c:	2801      	cmp	r0, #1
 800c40e:	bf38      	it	cc
 800c410:	2001      	movcc	r0, #1
 800c412:	f7f3 ffe7 	bl	80003e4 <__aeabi_ui2d>
 800c416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c418:	4605      	mov	r5, r0
 800c41a:	460f      	mov	r7, r1
 800c41c:	bb03      	cbnz	r3, 800c460 <_strtod_l+0xba0>
 800c41e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c422:	9014      	str	r0, [sp, #80]	; 0x50
 800c424:	9315      	str	r3, [sp, #84]	; 0x54
 800c426:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c42a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c42e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c430:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c432:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c436:	1a9b      	subs	r3, r3, r2
 800c438:	9311      	str	r3, [sp, #68]	; 0x44
 800c43a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c43c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c43e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800c442:	f7ff f8e9 	bl	800b618 <__ulp>
 800c446:	4602      	mov	r2, r0
 800c448:	460b      	mov	r3, r1
 800c44a:	4640      	mov	r0, r8
 800c44c:	4649      	mov	r1, r9
 800c44e:	f7f4 f843 	bl	80004d8 <__aeabi_dmul>
 800c452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c456:	f7f3 fe89 	bl	800016c <__adddf3>
 800c45a:	4680      	mov	r8, r0
 800c45c:	4689      	mov	r9, r1
 800c45e:	e774      	b.n	800c34a <_strtod_l+0xa8a>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c468:	e7dd      	b.n	800c426 <_strtod_l+0xb66>
 800c46a:	a30d      	add	r3, pc, #52	; (adr r3, 800c4a0 <_strtod_l+0xbe0>)
 800c46c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c470:	f7f4 faa4 	bl	80009bc <__aeabi_dcmplt>
 800c474:	e79b      	b.n	800c3ae <_strtod_l+0xaee>
 800c476:	2300      	movs	r3, #0
 800c478:	930e      	str	r3, [sp, #56]	; 0x38
 800c47a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c47c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	f7ff ba5b 	b.w	800b93a <_strtod_l+0x7a>
 800c484:	2a65      	cmp	r2, #101	; 0x65
 800c486:	f43f ab52 	beq.w	800bb2e <_strtod_l+0x26e>
 800c48a:	2a45      	cmp	r2, #69	; 0x45
 800c48c:	f43f ab4f 	beq.w	800bb2e <_strtod_l+0x26e>
 800c490:	2301      	movs	r3, #1
 800c492:	f7ff bb87 	b.w	800bba4 <_strtod_l+0x2e4>
 800c496:	bf00      	nop
 800c498:	ffc00000 	.word	0xffc00000
 800c49c:	41dfffff 	.word	0x41dfffff
 800c4a0:	94a03595 	.word	0x94a03595
 800c4a4:	3fcfffff 	.word	0x3fcfffff

0800c4a8 <_strtod_r>:
 800c4a8:	4b01      	ldr	r3, [pc, #4]	; (800c4b0 <_strtod_r+0x8>)
 800c4aa:	f7ff ba09 	b.w	800b8c0 <_strtod_l>
 800c4ae:	bf00      	nop
 800c4b0:	2000006c 	.word	0x2000006c

0800c4b4 <__ssputs_r>:
 800c4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b8:	461f      	mov	r7, r3
 800c4ba:	688e      	ldr	r6, [r1, #8]
 800c4bc:	4682      	mov	sl, r0
 800c4be:	42be      	cmp	r6, r7
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4690      	mov	r8, r2
 800c4c4:	680b      	ldr	r3, [r1, #0]
 800c4c6:	d82c      	bhi.n	800c522 <__ssputs_r+0x6e>
 800c4c8:	898a      	ldrh	r2, [r1, #12]
 800c4ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4ce:	d026      	beq.n	800c51e <__ssputs_r+0x6a>
 800c4d0:	6965      	ldr	r5, [r4, #20]
 800c4d2:	6909      	ldr	r1, [r1, #16]
 800c4d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4d8:	eba3 0901 	sub.w	r9, r3, r1
 800c4dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4e0:	1c7b      	adds	r3, r7, #1
 800c4e2:	444b      	add	r3, r9
 800c4e4:	106d      	asrs	r5, r5, #1
 800c4e6:	429d      	cmp	r5, r3
 800c4e8:	bf38      	it	cc
 800c4ea:	461d      	movcc	r5, r3
 800c4ec:	0553      	lsls	r3, r2, #21
 800c4ee:	d527      	bpl.n	800c540 <__ssputs_r+0x8c>
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	f7fe fc99 	bl	800ae28 <_malloc_r>
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	b360      	cbz	r0, 800c554 <__ssputs_r+0xa0>
 800c4fa:	464a      	mov	r2, r9
 800c4fc:	6921      	ldr	r1, [r4, #16]
 800c4fe:	f000 fa17 	bl	800c930 <memcpy>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	6126      	str	r6, [r4, #16]
 800c510:	444e      	add	r6, r9
 800c512:	6026      	str	r6, [r4, #0]
 800c514:	463e      	mov	r6, r7
 800c516:	6165      	str	r5, [r4, #20]
 800c518:	eba5 0509 	sub.w	r5, r5, r9
 800c51c:	60a5      	str	r5, [r4, #8]
 800c51e:	42be      	cmp	r6, r7
 800c520:	d900      	bls.n	800c524 <__ssputs_r+0x70>
 800c522:	463e      	mov	r6, r7
 800c524:	4632      	mov	r2, r6
 800c526:	4641      	mov	r1, r8
 800c528:	6820      	ldr	r0, [r4, #0]
 800c52a:	f000 f9c5 	bl	800c8b8 <memmove>
 800c52e:	2000      	movs	r0, #0
 800c530:	68a3      	ldr	r3, [r4, #8]
 800c532:	1b9b      	subs	r3, r3, r6
 800c534:	60a3      	str	r3, [r4, #8]
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	4433      	add	r3, r6
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	462a      	mov	r2, r5
 800c542:	f000 fda6 	bl	800d092 <_realloc_r>
 800c546:	4606      	mov	r6, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d1e0      	bne.n	800c50e <__ssputs_r+0x5a>
 800c54c:	4650      	mov	r0, sl
 800c54e:	6921      	ldr	r1, [r4, #16]
 800c550:	f7fe fbfa 	bl	800ad48 <_free_r>
 800c554:	230c      	movs	r3, #12
 800c556:	f8ca 3000 	str.w	r3, [sl]
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c564:	81a3      	strh	r3, [r4, #12]
 800c566:	e7e9      	b.n	800c53c <__ssputs_r+0x88>

0800c568 <_svfiprintf_r>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	4698      	mov	r8, r3
 800c56e:	898b      	ldrh	r3, [r1, #12]
 800c570:	4607      	mov	r7, r0
 800c572:	061b      	lsls	r3, r3, #24
 800c574:	460d      	mov	r5, r1
 800c576:	4614      	mov	r4, r2
 800c578:	b09d      	sub	sp, #116	; 0x74
 800c57a:	d50e      	bpl.n	800c59a <_svfiprintf_r+0x32>
 800c57c:	690b      	ldr	r3, [r1, #16]
 800c57e:	b963      	cbnz	r3, 800c59a <_svfiprintf_r+0x32>
 800c580:	2140      	movs	r1, #64	; 0x40
 800c582:	f7fe fc51 	bl	800ae28 <_malloc_r>
 800c586:	6028      	str	r0, [r5, #0]
 800c588:	6128      	str	r0, [r5, #16]
 800c58a:	b920      	cbnz	r0, 800c596 <_svfiprintf_r+0x2e>
 800c58c:	230c      	movs	r3, #12
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	f04f 30ff 	mov.w	r0, #4294967295
 800c594:	e0d0      	b.n	800c738 <_svfiprintf_r+0x1d0>
 800c596:	2340      	movs	r3, #64	; 0x40
 800c598:	616b      	str	r3, [r5, #20]
 800c59a:	2300      	movs	r3, #0
 800c59c:	9309      	str	r3, [sp, #36]	; 0x24
 800c59e:	2320      	movs	r3, #32
 800c5a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5a4:	2330      	movs	r3, #48	; 0x30
 800c5a6:	f04f 0901 	mov.w	r9, #1
 800c5aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c750 <_svfiprintf_r+0x1e8>
 800c5b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5b6:	4623      	mov	r3, r4
 800c5b8:	469a      	mov	sl, r3
 800c5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5be:	b10a      	cbz	r2, 800c5c4 <_svfiprintf_r+0x5c>
 800c5c0:	2a25      	cmp	r2, #37	; 0x25
 800c5c2:	d1f9      	bne.n	800c5b8 <_svfiprintf_r+0x50>
 800c5c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5c8:	d00b      	beq.n	800c5e2 <_svfiprintf_r+0x7a>
 800c5ca:	465b      	mov	r3, fp
 800c5cc:	4622      	mov	r2, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff ff6f 	bl	800c4b4 <__ssputs_r>
 800c5d6:	3001      	adds	r0, #1
 800c5d8:	f000 80a9 	beq.w	800c72e <_svfiprintf_r+0x1c6>
 800c5dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5de:	445a      	add	r2, fp
 800c5e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80a1 	beq.w	800c72e <_svfiprintf_r+0x1c6>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c5f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5f6:	f10a 0a01 	add.w	sl, sl, #1
 800c5fa:	9304      	str	r3, [sp, #16]
 800c5fc:	9307      	str	r3, [sp, #28]
 800c5fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c602:	931a      	str	r3, [sp, #104]	; 0x68
 800c604:	4654      	mov	r4, sl
 800c606:	2205      	movs	r2, #5
 800c608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c60c:	4850      	ldr	r0, [pc, #320]	; (800c750 <_svfiprintf_r+0x1e8>)
 800c60e:	f7fd fd18 	bl	800a042 <memchr>
 800c612:	9a04      	ldr	r2, [sp, #16]
 800c614:	b9d8      	cbnz	r0, 800c64e <_svfiprintf_r+0xe6>
 800c616:	06d0      	lsls	r0, r2, #27
 800c618:	bf44      	itt	mi
 800c61a:	2320      	movmi	r3, #32
 800c61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c620:	0711      	lsls	r1, r2, #28
 800c622:	bf44      	itt	mi
 800c624:	232b      	movmi	r3, #43	; 0x2b
 800c626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c62a:	f89a 3000 	ldrb.w	r3, [sl]
 800c62e:	2b2a      	cmp	r3, #42	; 0x2a
 800c630:	d015      	beq.n	800c65e <_svfiprintf_r+0xf6>
 800c632:	4654      	mov	r4, sl
 800c634:	2000      	movs	r0, #0
 800c636:	f04f 0c0a 	mov.w	ip, #10
 800c63a:	9a07      	ldr	r2, [sp, #28]
 800c63c:	4621      	mov	r1, r4
 800c63e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c642:	3b30      	subs	r3, #48	; 0x30
 800c644:	2b09      	cmp	r3, #9
 800c646:	d94d      	bls.n	800c6e4 <_svfiprintf_r+0x17c>
 800c648:	b1b0      	cbz	r0, 800c678 <_svfiprintf_r+0x110>
 800c64a:	9207      	str	r2, [sp, #28]
 800c64c:	e014      	b.n	800c678 <_svfiprintf_r+0x110>
 800c64e:	eba0 0308 	sub.w	r3, r0, r8
 800c652:	fa09 f303 	lsl.w	r3, r9, r3
 800c656:	4313      	orrs	r3, r2
 800c658:	46a2      	mov	sl, r4
 800c65a:	9304      	str	r3, [sp, #16]
 800c65c:	e7d2      	b.n	800c604 <_svfiprintf_r+0x9c>
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	1d19      	adds	r1, r3, #4
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	9103      	str	r1, [sp, #12]
 800c666:	2b00      	cmp	r3, #0
 800c668:	bfbb      	ittet	lt
 800c66a:	425b      	neglt	r3, r3
 800c66c:	f042 0202 	orrlt.w	r2, r2, #2
 800c670:	9307      	strge	r3, [sp, #28]
 800c672:	9307      	strlt	r3, [sp, #28]
 800c674:	bfb8      	it	lt
 800c676:	9204      	strlt	r2, [sp, #16]
 800c678:	7823      	ldrb	r3, [r4, #0]
 800c67a:	2b2e      	cmp	r3, #46	; 0x2e
 800c67c:	d10c      	bne.n	800c698 <_svfiprintf_r+0x130>
 800c67e:	7863      	ldrb	r3, [r4, #1]
 800c680:	2b2a      	cmp	r3, #42	; 0x2a
 800c682:	d134      	bne.n	800c6ee <_svfiprintf_r+0x186>
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	3402      	adds	r4, #2
 800c688:	1d1a      	adds	r2, r3, #4
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	9203      	str	r2, [sp, #12]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	bfb8      	it	lt
 800c692:	f04f 33ff 	movlt.w	r3, #4294967295
 800c696:	9305      	str	r3, [sp, #20]
 800c698:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c754 <_svfiprintf_r+0x1ec>
 800c69c:	2203      	movs	r2, #3
 800c69e:	4650      	mov	r0, sl
 800c6a0:	7821      	ldrb	r1, [r4, #0]
 800c6a2:	f7fd fcce 	bl	800a042 <memchr>
 800c6a6:	b138      	cbz	r0, 800c6b8 <_svfiprintf_r+0x150>
 800c6a8:	2240      	movs	r2, #64	; 0x40
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	eba0 000a 	sub.w	r0, r0, sl
 800c6b0:	4082      	lsls	r2, r0
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	3401      	adds	r4, #1
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6bc:	2206      	movs	r2, #6
 800c6be:	4826      	ldr	r0, [pc, #152]	; (800c758 <_svfiprintf_r+0x1f0>)
 800c6c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6c4:	f7fd fcbd 	bl	800a042 <memchr>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d038      	beq.n	800c73e <_svfiprintf_r+0x1d6>
 800c6cc:	4b23      	ldr	r3, [pc, #140]	; (800c75c <_svfiprintf_r+0x1f4>)
 800c6ce:	bb1b      	cbnz	r3, 800c718 <_svfiprintf_r+0x1b0>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	3307      	adds	r3, #7
 800c6d4:	f023 0307 	bic.w	r3, r3, #7
 800c6d8:	3308      	adds	r3, #8
 800c6da:	9303      	str	r3, [sp, #12]
 800c6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6de:	4433      	add	r3, r6
 800c6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e2:	e768      	b.n	800c5b6 <_svfiprintf_r+0x4e>
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6ec:	e7a6      	b.n	800c63c <_svfiprintf_r+0xd4>
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f04f 0c0a 	mov.w	ip, #10
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	3401      	adds	r4, #1
 800c6f8:	9305      	str	r3, [sp, #20]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c700:	3a30      	subs	r2, #48	; 0x30
 800c702:	2a09      	cmp	r2, #9
 800c704:	d903      	bls.n	800c70e <_svfiprintf_r+0x1a6>
 800c706:	2b00      	cmp	r3, #0
 800c708:	d0c6      	beq.n	800c698 <_svfiprintf_r+0x130>
 800c70a:	9105      	str	r1, [sp, #20]
 800c70c:	e7c4      	b.n	800c698 <_svfiprintf_r+0x130>
 800c70e:	4604      	mov	r4, r0
 800c710:	2301      	movs	r3, #1
 800c712:	fb0c 2101 	mla	r1, ip, r1, r2
 800c716:	e7f0      	b.n	800c6fa <_svfiprintf_r+0x192>
 800c718:	ab03      	add	r3, sp, #12
 800c71a:	9300      	str	r3, [sp, #0]
 800c71c:	462a      	mov	r2, r5
 800c71e:	4638      	mov	r0, r7
 800c720:	4b0f      	ldr	r3, [pc, #60]	; (800c760 <_svfiprintf_r+0x1f8>)
 800c722:	a904      	add	r1, sp, #16
 800c724:	f7fc fcf4 	bl	8009110 <_printf_float>
 800c728:	1c42      	adds	r2, r0, #1
 800c72a:	4606      	mov	r6, r0
 800c72c:	d1d6      	bne.n	800c6dc <_svfiprintf_r+0x174>
 800c72e:	89ab      	ldrh	r3, [r5, #12]
 800c730:	065b      	lsls	r3, r3, #25
 800c732:	f53f af2d 	bmi.w	800c590 <_svfiprintf_r+0x28>
 800c736:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c738:	b01d      	add	sp, #116	; 0x74
 800c73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c73e:	ab03      	add	r3, sp, #12
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	462a      	mov	r2, r5
 800c744:	4638      	mov	r0, r7
 800c746:	4b06      	ldr	r3, [pc, #24]	; (800c760 <_svfiprintf_r+0x1f8>)
 800c748:	a904      	add	r1, sp, #16
 800c74a:	f7fc ff81 	bl	8009650 <_printf_i>
 800c74e:	e7eb      	b.n	800c728 <_svfiprintf_r+0x1c0>
 800c750:	0800de00 	.word	0x0800de00
 800c754:	0800de06 	.word	0x0800de06
 800c758:	0800de0a 	.word	0x0800de0a
 800c75c:	08009111 	.word	0x08009111
 800c760:	0800c4b5 	.word	0x0800c4b5

0800c764 <__sflush_r>:
 800c764:	898a      	ldrh	r2, [r1, #12]
 800c766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c768:	4605      	mov	r5, r0
 800c76a:	0710      	lsls	r0, r2, #28
 800c76c:	460c      	mov	r4, r1
 800c76e:	d457      	bmi.n	800c820 <__sflush_r+0xbc>
 800c770:	684b      	ldr	r3, [r1, #4]
 800c772:	2b00      	cmp	r3, #0
 800c774:	dc04      	bgt.n	800c780 <__sflush_r+0x1c>
 800c776:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c778:	2b00      	cmp	r3, #0
 800c77a:	dc01      	bgt.n	800c780 <__sflush_r+0x1c>
 800c77c:	2000      	movs	r0, #0
 800c77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c782:	2e00      	cmp	r6, #0
 800c784:	d0fa      	beq.n	800c77c <__sflush_r+0x18>
 800c786:	2300      	movs	r3, #0
 800c788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c78c:	682f      	ldr	r7, [r5, #0]
 800c78e:	6a21      	ldr	r1, [r4, #32]
 800c790:	602b      	str	r3, [r5, #0]
 800c792:	d032      	beq.n	800c7fa <__sflush_r+0x96>
 800c794:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c796:	89a3      	ldrh	r3, [r4, #12]
 800c798:	075a      	lsls	r2, r3, #29
 800c79a:	d505      	bpl.n	800c7a8 <__sflush_r+0x44>
 800c79c:	6863      	ldr	r3, [r4, #4]
 800c79e:	1ac0      	subs	r0, r0, r3
 800c7a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7a2:	b10b      	cbz	r3, 800c7a8 <__sflush_r+0x44>
 800c7a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7a6:	1ac0      	subs	r0, r0, r3
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7ae:	4628      	mov	r0, r5
 800c7b0:	6a21      	ldr	r1, [r4, #32]
 800c7b2:	47b0      	blx	r6
 800c7b4:	1c43      	adds	r3, r0, #1
 800c7b6:	89a3      	ldrh	r3, [r4, #12]
 800c7b8:	d106      	bne.n	800c7c8 <__sflush_r+0x64>
 800c7ba:	6829      	ldr	r1, [r5, #0]
 800c7bc:	291d      	cmp	r1, #29
 800c7be:	d82b      	bhi.n	800c818 <__sflush_r+0xb4>
 800c7c0:	4a28      	ldr	r2, [pc, #160]	; (800c864 <__sflush_r+0x100>)
 800c7c2:	410a      	asrs	r2, r1
 800c7c4:	07d6      	lsls	r6, r2, #31
 800c7c6:	d427      	bmi.n	800c818 <__sflush_r+0xb4>
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	6062      	str	r2, [r4, #4]
 800c7cc:	6922      	ldr	r2, [r4, #16]
 800c7ce:	04d9      	lsls	r1, r3, #19
 800c7d0:	6022      	str	r2, [r4, #0]
 800c7d2:	d504      	bpl.n	800c7de <__sflush_r+0x7a>
 800c7d4:	1c42      	adds	r2, r0, #1
 800c7d6:	d101      	bne.n	800c7dc <__sflush_r+0x78>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	b903      	cbnz	r3, 800c7de <__sflush_r+0x7a>
 800c7dc:	6560      	str	r0, [r4, #84]	; 0x54
 800c7de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7e0:	602f      	str	r7, [r5, #0]
 800c7e2:	2900      	cmp	r1, #0
 800c7e4:	d0ca      	beq.n	800c77c <__sflush_r+0x18>
 800c7e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7ea:	4299      	cmp	r1, r3
 800c7ec:	d002      	beq.n	800c7f4 <__sflush_r+0x90>
 800c7ee:	4628      	mov	r0, r5
 800c7f0:	f7fe faaa 	bl	800ad48 <_free_r>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f8:	e7c1      	b.n	800c77e <__sflush_r+0x1a>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	4628      	mov	r0, r5
 800c7fe:	47b0      	blx	r6
 800c800:	1c41      	adds	r1, r0, #1
 800c802:	d1c8      	bne.n	800c796 <__sflush_r+0x32>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d0c5      	beq.n	800c796 <__sflush_r+0x32>
 800c80a:	2b1d      	cmp	r3, #29
 800c80c:	d001      	beq.n	800c812 <__sflush_r+0xae>
 800c80e:	2b16      	cmp	r3, #22
 800c810:	d101      	bne.n	800c816 <__sflush_r+0xb2>
 800c812:	602f      	str	r7, [r5, #0]
 800c814:	e7b2      	b.n	800c77c <__sflush_r+0x18>
 800c816:	89a3      	ldrh	r3, [r4, #12]
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	81a3      	strh	r3, [r4, #12]
 800c81e:	e7ae      	b.n	800c77e <__sflush_r+0x1a>
 800c820:	690f      	ldr	r7, [r1, #16]
 800c822:	2f00      	cmp	r7, #0
 800c824:	d0aa      	beq.n	800c77c <__sflush_r+0x18>
 800c826:	0793      	lsls	r3, r2, #30
 800c828:	bf18      	it	ne
 800c82a:	2300      	movne	r3, #0
 800c82c:	680e      	ldr	r6, [r1, #0]
 800c82e:	bf08      	it	eq
 800c830:	694b      	ldreq	r3, [r1, #20]
 800c832:	1bf6      	subs	r6, r6, r7
 800c834:	600f      	str	r7, [r1, #0]
 800c836:	608b      	str	r3, [r1, #8]
 800c838:	2e00      	cmp	r6, #0
 800c83a:	dd9f      	ble.n	800c77c <__sflush_r+0x18>
 800c83c:	4633      	mov	r3, r6
 800c83e:	463a      	mov	r2, r7
 800c840:	4628      	mov	r0, r5
 800c842:	6a21      	ldr	r1, [r4, #32]
 800c844:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c848:	47e0      	blx	ip
 800c84a:	2800      	cmp	r0, #0
 800c84c:	dc06      	bgt.n	800c85c <__sflush_r+0xf8>
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c858:	81a3      	strh	r3, [r4, #12]
 800c85a:	e790      	b.n	800c77e <__sflush_r+0x1a>
 800c85c:	4407      	add	r7, r0
 800c85e:	1a36      	subs	r6, r6, r0
 800c860:	e7ea      	b.n	800c838 <__sflush_r+0xd4>
 800c862:	bf00      	nop
 800c864:	dfbffffe 	.word	0xdfbffffe

0800c868 <_fflush_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	690b      	ldr	r3, [r1, #16]
 800c86c:	4605      	mov	r5, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b913      	cbnz	r3, 800c878 <_fflush_r+0x10>
 800c872:	2500      	movs	r5, #0
 800c874:	4628      	mov	r0, r5
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	b118      	cbz	r0, 800c882 <_fflush_r+0x1a>
 800c87a:	6a03      	ldr	r3, [r0, #32]
 800c87c:	b90b      	cbnz	r3, 800c882 <_fflush_r+0x1a>
 800c87e:	f7fd faa3 	bl	8009dc8 <__sinit>
 800c882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0f3      	beq.n	800c872 <_fflush_r+0xa>
 800c88a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c88c:	07d0      	lsls	r0, r2, #31
 800c88e:	d404      	bmi.n	800c89a <_fflush_r+0x32>
 800c890:	0599      	lsls	r1, r3, #22
 800c892:	d402      	bmi.n	800c89a <_fflush_r+0x32>
 800c894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c896:	f7fd fbd2 	bl	800a03e <__retarget_lock_acquire_recursive>
 800c89a:	4628      	mov	r0, r5
 800c89c:	4621      	mov	r1, r4
 800c89e:	f7ff ff61 	bl	800c764 <__sflush_r>
 800c8a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	07da      	lsls	r2, r3, #31
 800c8a8:	d4e4      	bmi.n	800c874 <_fflush_r+0xc>
 800c8aa:	89a3      	ldrh	r3, [r4, #12]
 800c8ac:	059b      	lsls	r3, r3, #22
 800c8ae:	d4e1      	bmi.n	800c874 <_fflush_r+0xc>
 800c8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8b2:	f7fd fbc5 	bl	800a040 <__retarget_lock_release_recursive>
 800c8b6:	e7dd      	b.n	800c874 <_fflush_r+0xc>

0800c8b8 <memmove>:
 800c8b8:	4288      	cmp	r0, r1
 800c8ba:	b510      	push	{r4, lr}
 800c8bc:	eb01 0402 	add.w	r4, r1, r2
 800c8c0:	d902      	bls.n	800c8c8 <memmove+0x10>
 800c8c2:	4284      	cmp	r4, r0
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	d807      	bhi.n	800c8d8 <memmove+0x20>
 800c8c8:	1e43      	subs	r3, r0, #1
 800c8ca:	42a1      	cmp	r1, r4
 800c8cc:	d008      	beq.n	800c8e0 <memmove+0x28>
 800c8ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8d6:	e7f8      	b.n	800c8ca <memmove+0x12>
 800c8d8:	4601      	mov	r1, r0
 800c8da:	4402      	add	r2, r0
 800c8dc:	428a      	cmp	r2, r1
 800c8de:	d100      	bne.n	800c8e2 <memmove+0x2a>
 800c8e0:	bd10      	pop	{r4, pc}
 800c8e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ea:	e7f7      	b.n	800c8dc <memmove+0x24>

0800c8ec <strncmp>:
 800c8ec:	b510      	push	{r4, lr}
 800c8ee:	b16a      	cbz	r2, 800c90c <strncmp+0x20>
 800c8f0:	3901      	subs	r1, #1
 800c8f2:	1884      	adds	r4, r0, r2
 800c8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d103      	bne.n	800c908 <strncmp+0x1c>
 800c900:	42a0      	cmp	r0, r4
 800c902:	d001      	beq.n	800c908 <strncmp+0x1c>
 800c904:	2a00      	cmp	r2, #0
 800c906:	d1f5      	bne.n	800c8f4 <strncmp+0x8>
 800c908:	1ad0      	subs	r0, r2, r3
 800c90a:	bd10      	pop	{r4, pc}
 800c90c:	4610      	mov	r0, r2
 800c90e:	e7fc      	b.n	800c90a <strncmp+0x1e>

0800c910 <_sbrk_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	2300      	movs	r3, #0
 800c914:	4d05      	ldr	r5, [pc, #20]	; (800c92c <_sbrk_r+0x1c>)
 800c916:	4604      	mov	r4, r0
 800c918:	4608      	mov	r0, r1
 800c91a:	602b      	str	r3, [r5, #0]
 800c91c:	f7f8 f9c8 	bl	8004cb0 <_sbrk>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_sbrk_r+0x1a>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_sbrk_r+0x1a>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	2000068c 	.word	0x2000068c

0800c930 <memcpy>:
 800c930:	440a      	add	r2, r1
 800c932:	4291      	cmp	r1, r2
 800c934:	f100 33ff 	add.w	r3, r0, #4294967295
 800c938:	d100      	bne.n	800c93c <memcpy+0xc>
 800c93a:	4770      	bx	lr
 800c93c:	b510      	push	{r4, lr}
 800c93e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c942:	4291      	cmp	r1, r2
 800c944:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c948:	d1f9      	bne.n	800c93e <memcpy+0xe>
 800c94a:	bd10      	pop	{r4, pc}

0800c94c <nan>:
 800c94c:	2000      	movs	r0, #0
 800c94e:	4901      	ldr	r1, [pc, #4]	; (800c954 <nan+0x8>)
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	7ff80000 	.word	0x7ff80000

0800c958 <__assert_func>:
 800c958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c95a:	4614      	mov	r4, r2
 800c95c:	461a      	mov	r2, r3
 800c95e:	4b09      	ldr	r3, [pc, #36]	; (800c984 <__assert_func+0x2c>)
 800c960:	4605      	mov	r5, r0
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	68d8      	ldr	r0, [r3, #12]
 800c966:	b14c      	cbz	r4, 800c97c <__assert_func+0x24>
 800c968:	4b07      	ldr	r3, [pc, #28]	; (800c988 <__assert_func+0x30>)
 800c96a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c96e:	9100      	str	r1, [sp, #0]
 800c970:	462b      	mov	r3, r5
 800c972:	4906      	ldr	r1, [pc, #24]	; (800c98c <__assert_func+0x34>)
 800c974:	f000 fbca 	bl	800d10c <fiprintf>
 800c978:	f000 fbda 	bl	800d130 <abort>
 800c97c:	4b04      	ldr	r3, [pc, #16]	; (800c990 <__assert_func+0x38>)
 800c97e:	461c      	mov	r4, r3
 800c980:	e7f3      	b.n	800c96a <__assert_func+0x12>
 800c982:	bf00      	nop
 800c984:	20000068 	.word	0x20000068
 800c988:	0800de19 	.word	0x0800de19
 800c98c:	0800de26 	.word	0x0800de26
 800c990:	0800de54 	.word	0x0800de54

0800c994 <_calloc_r>:
 800c994:	b570      	push	{r4, r5, r6, lr}
 800c996:	fba1 5402 	umull	r5, r4, r1, r2
 800c99a:	b934      	cbnz	r4, 800c9aa <_calloc_r+0x16>
 800c99c:	4629      	mov	r1, r5
 800c99e:	f7fe fa43 	bl	800ae28 <_malloc_r>
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	b928      	cbnz	r0, 800c9b2 <_calloc_r+0x1e>
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	bd70      	pop	{r4, r5, r6, pc}
 800c9aa:	220c      	movs	r2, #12
 800c9ac:	2600      	movs	r6, #0
 800c9ae:	6002      	str	r2, [r0, #0]
 800c9b0:	e7f9      	b.n	800c9a6 <_calloc_r+0x12>
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	f7fd faa0 	bl	8009efa <memset>
 800c9ba:	e7f4      	b.n	800c9a6 <_calloc_r+0x12>

0800c9bc <rshift>:
 800c9bc:	6903      	ldr	r3, [r0, #16]
 800c9be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9c6:	f100 0414 	add.w	r4, r0, #20
 800c9ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9ce:	dd46      	ble.n	800ca5e <rshift+0xa2>
 800c9d0:	f011 011f 	ands.w	r1, r1, #31
 800c9d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c9dc:	d10c      	bne.n	800c9f8 <rshift+0x3c>
 800c9de:	4629      	mov	r1, r5
 800c9e0:	f100 0710 	add.w	r7, r0, #16
 800c9e4:	42b1      	cmp	r1, r6
 800c9e6:	d335      	bcc.n	800ca54 <rshift+0x98>
 800c9e8:	1a9b      	subs	r3, r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	1eea      	subs	r2, r5, #3
 800c9ee:	4296      	cmp	r6, r2
 800c9f0:	bf38      	it	cc
 800c9f2:	2300      	movcc	r3, #0
 800c9f4:	4423      	add	r3, r4
 800c9f6:	e015      	b.n	800ca24 <rshift+0x68>
 800c9f8:	46a1      	mov	r9, r4
 800c9fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c9fe:	f1c1 0820 	rsb	r8, r1, #32
 800ca02:	40cf      	lsrs	r7, r1
 800ca04:	f105 0e04 	add.w	lr, r5, #4
 800ca08:	4576      	cmp	r6, lr
 800ca0a:	46f4      	mov	ip, lr
 800ca0c:	d816      	bhi.n	800ca3c <rshift+0x80>
 800ca0e:	1a9a      	subs	r2, r3, r2
 800ca10:	0092      	lsls	r2, r2, #2
 800ca12:	3a04      	subs	r2, #4
 800ca14:	3501      	adds	r5, #1
 800ca16:	42ae      	cmp	r6, r5
 800ca18:	bf38      	it	cc
 800ca1a:	2200      	movcc	r2, #0
 800ca1c:	18a3      	adds	r3, r4, r2
 800ca1e:	50a7      	str	r7, [r4, r2]
 800ca20:	b107      	cbz	r7, 800ca24 <rshift+0x68>
 800ca22:	3304      	adds	r3, #4
 800ca24:	42a3      	cmp	r3, r4
 800ca26:	eba3 0204 	sub.w	r2, r3, r4
 800ca2a:	bf08      	it	eq
 800ca2c:	2300      	moveq	r3, #0
 800ca2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca32:	6102      	str	r2, [r0, #16]
 800ca34:	bf08      	it	eq
 800ca36:	6143      	streq	r3, [r0, #20]
 800ca38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	f8dc c000 	ldr.w	ip, [ip]
 800ca40:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca44:	ea4c 0707 	orr.w	r7, ip, r7
 800ca48:	f849 7b04 	str.w	r7, [r9], #4
 800ca4c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca50:	40cf      	lsrs	r7, r1
 800ca52:	e7d9      	b.n	800ca08 <rshift+0x4c>
 800ca54:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca58:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca5c:	e7c2      	b.n	800c9e4 <rshift+0x28>
 800ca5e:	4623      	mov	r3, r4
 800ca60:	e7e0      	b.n	800ca24 <rshift+0x68>

0800ca62 <__hexdig_fun>:
 800ca62:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca66:	2b09      	cmp	r3, #9
 800ca68:	d802      	bhi.n	800ca70 <__hexdig_fun+0xe>
 800ca6a:	3820      	subs	r0, #32
 800ca6c:	b2c0      	uxtb	r0, r0
 800ca6e:	4770      	bx	lr
 800ca70:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca74:	2b05      	cmp	r3, #5
 800ca76:	d801      	bhi.n	800ca7c <__hexdig_fun+0x1a>
 800ca78:	3847      	subs	r0, #71	; 0x47
 800ca7a:	e7f7      	b.n	800ca6c <__hexdig_fun+0xa>
 800ca7c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ca80:	2b05      	cmp	r3, #5
 800ca82:	d801      	bhi.n	800ca88 <__hexdig_fun+0x26>
 800ca84:	3827      	subs	r0, #39	; 0x27
 800ca86:	e7f1      	b.n	800ca6c <__hexdig_fun+0xa>
 800ca88:	2000      	movs	r0, #0
 800ca8a:	4770      	bx	lr

0800ca8c <__gethex>:
 800ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca90:	4681      	mov	r9, r0
 800ca92:	468a      	mov	sl, r1
 800ca94:	4617      	mov	r7, r2
 800ca96:	680a      	ldr	r2, [r1, #0]
 800ca98:	b085      	sub	sp, #20
 800ca9a:	f102 0b02 	add.w	fp, r2, #2
 800ca9e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800caa2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800caa6:	9302      	str	r3, [sp, #8]
 800caa8:	32fe      	adds	r2, #254	; 0xfe
 800caaa:	eb02 030b 	add.w	r3, r2, fp
 800caae:	46d8      	mov	r8, fp
 800cab0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	2830      	cmp	r0, #48	; 0x30
 800cab8:	d0f7      	beq.n	800caaa <__gethex+0x1e>
 800caba:	f7ff ffd2 	bl	800ca62 <__hexdig_fun>
 800cabe:	4604      	mov	r4, r0
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d138      	bne.n	800cb36 <__gethex+0xaa>
 800cac4:	2201      	movs	r2, #1
 800cac6:	4640      	mov	r0, r8
 800cac8:	49a7      	ldr	r1, [pc, #668]	; (800cd68 <__gethex+0x2dc>)
 800caca:	f7ff ff0f 	bl	800c8ec <strncmp>
 800cace:	4606      	mov	r6, r0
 800cad0:	2800      	cmp	r0, #0
 800cad2:	d169      	bne.n	800cba8 <__gethex+0x11c>
 800cad4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cad8:	465d      	mov	r5, fp
 800cada:	f7ff ffc2 	bl	800ca62 <__hexdig_fun>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d064      	beq.n	800cbac <__gethex+0x120>
 800cae2:	465a      	mov	r2, fp
 800cae4:	7810      	ldrb	r0, [r2, #0]
 800cae6:	4690      	mov	r8, r2
 800cae8:	2830      	cmp	r0, #48	; 0x30
 800caea:	f102 0201 	add.w	r2, r2, #1
 800caee:	d0f9      	beq.n	800cae4 <__gethex+0x58>
 800caf0:	f7ff ffb7 	bl	800ca62 <__hexdig_fun>
 800caf4:	2301      	movs	r3, #1
 800caf6:	fab0 f480 	clz	r4, r0
 800cafa:	465e      	mov	r6, fp
 800cafc:	0964      	lsrs	r4, r4, #5
 800cafe:	9301      	str	r3, [sp, #4]
 800cb00:	4642      	mov	r2, r8
 800cb02:	4615      	mov	r5, r2
 800cb04:	7828      	ldrb	r0, [r5, #0]
 800cb06:	3201      	adds	r2, #1
 800cb08:	f7ff ffab 	bl	800ca62 <__hexdig_fun>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d1f8      	bne.n	800cb02 <__gethex+0x76>
 800cb10:	2201      	movs	r2, #1
 800cb12:	4628      	mov	r0, r5
 800cb14:	4994      	ldr	r1, [pc, #592]	; (800cd68 <__gethex+0x2dc>)
 800cb16:	f7ff fee9 	bl	800c8ec <strncmp>
 800cb1a:	b978      	cbnz	r0, 800cb3c <__gethex+0xb0>
 800cb1c:	b946      	cbnz	r6, 800cb30 <__gethex+0xa4>
 800cb1e:	1c6e      	adds	r6, r5, #1
 800cb20:	4632      	mov	r2, r6
 800cb22:	4615      	mov	r5, r2
 800cb24:	7828      	ldrb	r0, [r5, #0]
 800cb26:	3201      	adds	r2, #1
 800cb28:	f7ff ff9b 	bl	800ca62 <__hexdig_fun>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d1f8      	bne.n	800cb22 <__gethex+0x96>
 800cb30:	1b73      	subs	r3, r6, r5
 800cb32:	009e      	lsls	r6, r3, #2
 800cb34:	e004      	b.n	800cb40 <__gethex+0xb4>
 800cb36:	2400      	movs	r4, #0
 800cb38:	4626      	mov	r6, r4
 800cb3a:	e7e1      	b.n	800cb00 <__gethex+0x74>
 800cb3c:	2e00      	cmp	r6, #0
 800cb3e:	d1f7      	bne.n	800cb30 <__gethex+0xa4>
 800cb40:	782b      	ldrb	r3, [r5, #0]
 800cb42:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb46:	2b50      	cmp	r3, #80	; 0x50
 800cb48:	d13d      	bne.n	800cbc6 <__gethex+0x13a>
 800cb4a:	786b      	ldrb	r3, [r5, #1]
 800cb4c:	2b2b      	cmp	r3, #43	; 0x2b
 800cb4e:	d02f      	beq.n	800cbb0 <__gethex+0x124>
 800cb50:	2b2d      	cmp	r3, #45	; 0x2d
 800cb52:	d031      	beq.n	800cbb8 <__gethex+0x12c>
 800cb54:	f04f 0b00 	mov.w	fp, #0
 800cb58:	1c69      	adds	r1, r5, #1
 800cb5a:	7808      	ldrb	r0, [r1, #0]
 800cb5c:	f7ff ff81 	bl	800ca62 <__hexdig_fun>
 800cb60:	1e42      	subs	r2, r0, #1
 800cb62:	b2d2      	uxtb	r2, r2
 800cb64:	2a18      	cmp	r2, #24
 800cb66:	d82e      	bhi.n	800cbc6 <__gethex+0x13a>
 800cb68:	f1a0 0210 	sub.w	r2, r0, #16
 800cb6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb70:	f7ff ff77 	bl	800ca62 <__hexdig_fun>
 800cb74:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb78:	fa5f fc8c 	uxtb.w	ip, ip
 800cb7c:	f1bc 0f18 	cmp.w	ip, #24
 800cb80:	d91d      	bls.n	800cbbe <__gethex+0x132>
 800cb82:	f1bb 0f00 	cmp.w	fp, #0
 800cb86:	d000      	beq.n	800cb8a <__gethex+0xfe>
 800cb88:	4252      	negs	r2, r2
 800cb8a:	4416      	add	r6, r2
 800cb8c:	f8ca 1000 	str.w	r1, [sl]
 800cb90:	b1dc      	cbz	r4, 800cbca <__gethex+0x13e>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	bf14      	ite	ne
 800cb98:	f04f 0800 	movne.w	r8, #0
 800cb9c:	f04f 0806 	moveq.w	r8, #6
 800cba0:	4640      	mov	r0, r8
 800cba2:	b005      	add	sp, #20
 800cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba8:	4645      	mov	r5, r8
 800cbaa:	4626      	mov	r6, r4
 800cbac:	2401      	movs	r4, #1
 800cbae:	e7c7      	b.n	800cb40 <__gethex+0xb4>
 800cbb0:	f04f 0b00 	mov.w	fp, #0
 800cbb4:	1ca9      	adds	r1, r5, #2
 800cbb6:	e7d0      	b.n	800cb5a <__gethex+0xce>
 800cbb8:	f04f 0b01 	mov.w	fp, #1
 800cbbc:	e7fa      	b.n	800cbb4 <__gethex+0x128>
 800cbbe:	230a      	movs	r3, #10
 800cbc0:	fb03 0002 	mla	r0, r3, r2, r0
 800cbc4:	e7d0      	b.n	800cb68 <__gethex+0xdc>
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	e7e0      	b.n	800cb8c <__gethex+0x100>
 800cbca:	4621      	mov	r1, r4
 800cbcc:	eba5 0308 	sub.w	r3, r5, r8
 800cbd0:	3b01      	subs	r3, #1
 800cbd2:	2b07      	cmp	r3, #7
 800cbd4:	dc0a      	bgt.n	800cbec <__gethex+0x160>
 800cbd6:	4648      	mov	r0, r9
 800cbd8:	f7fe f9b2 	bl	800af40 <_Balloc>
 800cbdc:	4604      	mov	r4, r0
 800cbde:	b940      	cbnz	r0, 800cbf2 <__gethex+0x166>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	21e4      	movs	r1, #228	; 0xe4
 800cbe4:	4b61      	ldr	r3, [pc, #388]	; (800cd6c <__gethex+0x2e0>)
 800cbe6:	4862      	ldr	r0, [pc, #392]	; (800cd70 <__gethex+0x2e4>)
 800cbe8:	f7ff feb6 	bl	800c958 <__assert_func>
 800cbec:	3101      	adds	r1, #1
 800cbee:	105b      	asrs	r3, r3, #1
 800cbf0:	e7ef      	b.n	800cbd2 <__gethex+0x146>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	469b      	mov	fp, r3
 800cbf6:	f100 0a14 	add.w	sl, r0, #20
 800cbfa:	f8cd a004 	str.w	sl, [sp, #4]
 800cbfe:	45a8      	cmp	r8, r5
 800cc00:	d344      	bcc.n	800cc8c <__gethex+0x200>
 800cc02:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cc06:	4658      	mov	r0, fp
 800cc08:	f848 bb04 	str.w	fp, [r8], #4
 800cc0c:	eba8 080a 	sub.w	r8, r8, sl
 800cc10:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800cc14:	6122      	str	r2, [r4, #16]
 800cc16:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800cc1a:	f7fe fa83 	bl	800b124 <__hi0bits>
 800cc1e:	683d      	ldr	r5, [r7, #0]
 800cc20:	eba8 0800 	sub.w	r8, r8, r0
 800cc24:	45a8      	cmp	r8, r5
 800cc26:	dd59      	ble.n	800ccdc <__gethex+0x250>
 800cc28:	eba8 0805 	sub.w	r8, r8, r5
 800cc2c:	4641      	mov	r1, r8
 800cc2e:	4620      	mov	r0, r4
 800cc30:	f7fe fe01 	bl	800b836 <__any_on>
 800cc34:	4683      	mov	fp, r0
 800cc36:	b1b8      	cbz	r0, 800cc68 <__gethex+0x1dc>
 800cc38:	f04f 0b01 	mov.w	fp, #1
 800cc3c:	f108 33ff 	add.w	r3, r8, #4294967295
 800cc40:	1159      	asrs	r1, r3, #5
 800cc42:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc46:	f003 021f 	and.w	r2, r3, #31
 800cc4a:	fa0b f202 	lsl.w	r2, fp, r2
 800cc4e:	420a      	tst	r2, r1
 800cc50:	d00a      	beq.n	800cc68 <__gethex+0x1dc>
 800cc52:	455b      	cmp	r3, fp
 800cc54:	dd06      	ble.n	800cc64 <__gethex+0x1d8>
 800cc56:	4620      	mov	r0, r4
 800cc58:	f1a8 0102 	sub.w	r1, r8, #2
 800cc5c:	f7fe fdeb 	bl	800b836 <__any_on>
 800cc60:	2800      	cmp	r0, #0
 800cc62:	d138      	bne.n	800ccd6 <__gethex+0x24a>
 800cc64:	f04f 0b02 	mov.w	fp, #2
 800cc68:	4641      	mov	r1, r8
 800cc6a:	4620      	mov	r0, r4
 800cc6c:	f7ff fea6 	bl	800c9bc <rshift>
 800cc70:	4446      	add	r6, r8
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	42b3      	cmp	r3, r6
 800cc76:	da41      	bge.n	800ccfc <__gethex+0x270>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4648      	mov	r0, r9
 800cc7c:	f7fe f9a0 	bl	800afc0 <_Bfree>
 800cc80:	2300      	movs	r3, #0
 800cc82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc84:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	e789      	b.n	800cba0 <__gethex+0x114>
 800cc8c:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cc90:	2a2e      	cmp	r2, #46	; 0x2e
 800cc92:	d014      	beq.n	800ccbe <__gethex+0x232>
 800cc94:	2b20      	cmp	r3, #32
 800cc96:	d106      	bne.n	800cca6 <__gethex+0x21a>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	f843 bb04 	str.w	fp, [r3], #4
 800cc9e:	f04f 0b00 	mov.w	fp, #0
 800cca2:	9301      	str	r3, [sp, #4]
 800cca4:	465b      	mov	r3, fp
 800cca6:	7828      	ldrb	r0, [r5, #0]
 800cca8:	9303      	str	r3, [sp, #12]
 800ccaa:	f7ff feda 	bl	800ca62 <__hexdig_fun>
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	f000 000f 	and.w	r0, r0, #15
 800ccb4:	4098      	lsls	r0, r3
 800ccb6:	ea4b 0b00 	orr.w	fp, fp, r0
 800ccba:	3304      	adds	r3, #4
 800ccbc:	e79f      	b.n	800cbfe <__gethex+0x172>
 800ccbe:	45a8      	cmp	r8, r5
 800ccc0:	d8e8      	bhi.n	800cc94 <__gethex+0x208>
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	4928      	ldr	r1, [pc, #160]	; (800cd68 <__gethex+0x2dc>)
 800ccc8:	9303      	str	r3, [sp, #12]
 800ccca:	f7ff fe0f 	bl	800c8ec <strncmp>
 800ccce:	9b03      	ldr	r3, [sp, #12]
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d1df      	bne.n	800cc94 <__gethex+0x208>
 800ccd4:	e793      	b.n	800cbfe <__gethex+0x172>
 800ccd6:	f04f 0b03 	mov.w	fp, #3
 800ccda:	e7c5      	b.n	800cc68 <__gethex+0x1dc>
 800ccdc:	da0b      	bge.n	800ccf6 <__gethex+0x26a>
 800ccde:	eba5 0808 	sub.w	r8, r5, r8
 800cce2:	4621      	mov	r1, r4
 800cce4:	4642      	mov	r2, r8
 800cce6:	4648      	mov	r0, r9
 800cce8:	f7fe fb82 	bl	800b3f0 <__lshift>
 800ccec:	4604      	mov	r4, r0
 800ccee:	eba6 0608 	sub.w	r6, r6, r8
 800ccf2:	f100 0a14 	add.w	sl, r0, #20
 800ccf6:	f04f 0b00 	mov.w	fp, #0
 800ccfa:	e7ba      	b.n	800cc72 <__gethex+0x1e6>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	42b3      	cmp	r3, r6
 800cd00:	dd74      	ble.n	800cdec <__gethex+0x360>
 800cd02:	1b9e      	subs	r6, r3, r6
 800cd04:	42b5      	cmp	r5, r6
 800cd06:	dc35      	bgt.n	800cd74 <__gethex+0x2e8>
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2b02      	cmp	r3, #2
 800cd0c:	d023      	beq.n	800cd56 <__gethex+0x2ca>
 800cd0e:	2b03      	cmp	r3, #3
 800cd10:	d025      	beq.n	800cd5e <__gethex+0x2d2>
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d115      	bne.n	800cd42 <__gethex+0x2b6>
 800cd16:	42b5      	cmp	r5, r6
 800cd18:	d113      	bne.n	800cd42 <__gethex+0x2b6>
 800cd1a:	2d01      	cmp	r5, #1
 800cd1c:	d10b      	bne.n	800cd36 <__gethex+0x2aa>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	9a02      	ldr	r2, [sp, #8]
 800cd22:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	2301      	movs	r3, #1
 800cd2a:	6123      	str	r3, [r4, #16]
 800cd2c:	f8ca 3000 	str.w	r3, [sl]
 800cd30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd32:	601c      	str	r4, [r3, #0]
 800cd34:	e734      	b.n	800cba0 <__gethex+0x114>
 800cd36:	4620      	mov	r0, r4
 800cd38:	1e69      	subs	r1, r5, #1
 800cd3a:	f7fe fd7c 	bl	800b836 <__any_on>
 800cd3e:	2800      	cmp	r0, #0
 800cd40:	d1ed      	bne.n	800cd1e <__gethex+0x292>
 800cd42:	4621      	mov	r1, r4
 800cd44:	4648      	mov	r0, r9
 800cd46:	f7fe f93b 	bl	800afc0 <_Bfree>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd4e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cd52:	6013      	str	r3, [r2, #0]
 800cd54:	e724      	b.n	800cba0 <__gethex+0x114>
 800cd56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1f2      	bne.n	800cd42 <__gethex+0x2b6>
 800cd5c:	e7df      	b.n	800cd1e <__gethex+0x292>
 800cd5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1dc      	bne.n	800cd1e <__gethex+0x292>
 800cd64:	e7ed      	b.n	800cd42 <__gethex+0x2b6>
 800cd66:	bf00      	nop
 800cd68:	0800ddac 	.word	0x0800ddac
 800cd6c:	0800dc40 	.word	0x0800dc40
 800cd70:	0800de55 	.word	0x0800de55
 800cd74:	f106 38ff 	add.w	r8, r6, #4294967295
 800cd78:	f1bb 0f00 	cmp.w	fp, #0
 800cd7c:	d133      	bne.n	800cde6 <__gethex+0x35a>
 800cd7e:	f1b8 0f00 	cmp.w	r8, #0
 800cd82:	d004      	beq.n	800cd8e <__gethex+0x302>
 800cd84:	4641      	mov	r1, r8
 800cd86:	4620      	mov	r0, r4
 800cd88:	f7fe fd55 	bl	800b836 <__any_on>
 800cd8c:	4683      	mov	fp, r0
 800cd8e:	2301      	movs	r3, #1
 800cd90:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cd94:	f008 081f 	and.w	r8, r8, #31
 800cd98:	fa03 f308 	lsl.w	r3, r3, r8
 800cd9c:	f04f 0802 	mov.w	r8, #2
 800cda0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cda4:	4631      	mov	r1, r6
 800cda6:	4213      	tst	r3, r2
 800cda8:	4620      	mov	r0, r4
 800cdaa:	bf18      	it	ne
 800cdac:	f04b 0b02 	orrne.w	fp, fp, #2
 800cdb0:	1bad      	subs	r5, r5, r6
 800cdb2:	f7ff fe03 	bl	800c9bc <rshift>
 800cdb6:	687e      	ldr	r6, [r7, #4]
 800cdb8:	f1bb 0f00 	cmp.w	fp, #0
 800cdbc:	d04a      	beq.n	800ce54 <__gethex+0x3c8>
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d016      	beq.n	800cdf2 <__gethex+0x366>
 800cdc4:	2b03      	cmp	r3, #3
 800cdc6:	d018      	beq.n	800cdfa <__gethex+0x36e>
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d109      	bne.n	800cde0 <__gethex+0x354>
 800cdcc:	f01b 0f02 	tst.w	fp, #2
 800cdd0:	d006      	beq.n	800cde0 <__gethex+0x354>
 800cdd2:	f8da 3000 	ldr.w	r3, [sl]
 800cdd6:	ea4b 0b03 	orr.w	fp, fp, r3
 800cdda:	f01b 0f01 	tst.w	fp, #1
 800cdde:	d10f      	bne.n	800ce00 <__gethex+0x374>
 800cde0:	f048 0810 	orr.w	r8, r8, #16
 800cde4:	e036      	b.n	800ce54 <__gethex+0x3c8>
 800cde6:	f04f 0b01 	mov.w	fp, #1
 800cdea:	e7d0      	b.n	800cd8e <__gethex+0x302>
 800cdec:	f04f 0801 	mov.w	r8, #1
 800cdf0:	e7e2      	b.n	800cdb8 <__gethex+0x32c>
 800cdf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdf4:	f1c3 0301 	rsb	r3, r3, #1
 800cdf8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d0ef      	beq.n	800cde0 <__gethex+0x354>
 800ce00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce04:	f104 0214 	add.w	r2, r4, #20
 800ce08:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ce0c:	9301      	str	r3, [sp, #4]
 800ce0e:	2300      	movs	r3, #0
 800ce10:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ce14:	4694      	mov	ip, r2
 800ce16:	f852 1b04 	ldr.w	r1, [r2], #4
 800ce1a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ce1e:	d01e      	beq.n	800ce5e <__gethex+0x3d2>
 800ce20:	3101      	adds	r1, #1
 800ce22:	f8cc 1000 	str.w	r1, [ip]
 800ce26:	f1b8 0f02 	cmp.w	r8, #2
 800ce2a:	f104 0214 	add.w	r2, r4, #20
 800ce2e:	d13d      	bne.n	800ceac <__gethex+0x420>
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	3b01      	subs	r3, #1
 800ce34:	42ab      	cmp	r3, r5
 800ce36:	d10b      	bne.n	800ce50 <__gethex+0x3c4>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	1169      	asrs	r1, r5, #5
 800ce3c:	f005 051f 	and.w	r5, r5, #31
 800ce40:	fa03 f505 	lsl.w	r5, r3, r5
 800ce44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce48:	421d      	tst	r5, r3
 800ce4a:	bf18      	it	ne
 800ce4c:	f04f 0801 	movne.w	r8, #1
 800ce50:	f048 0820 	orr.w	r8, r8, #32
 800ce54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce56:	601c      	str	r4, [r3, #0]
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	601e      	str	r6, [r3, #0]
 800ce5c:	e6a0      	b.n	800cba0 <__gethex+0x114>
 800ce5e:	4290      	cmp	r0, r2
 800ce60:	f842 3c04 	str.w	r3, [r2, #-4]
 800ce64:	d8d6      	bhi.n	800ce14 <__gethex+0x388>
 800ce66:	68a2      	ldr	r2, [r4, #8]
 800ce68:	4593      	cmp	fp, r2
 800ce6a:	db17      	blt.n	800ce9c <__gethex+0x410>
 800ce6c:	6861      	ldr	r1, [r4, #4]
 800ce6e:	4648      	mov	r0, r9
 800ce70:	3101      	adds	r1, #1
 800ce72:	f7fe f865 	bl	800af40 <_Balloc>
 800ce76:	4682      	mov	sl, r0
 800ce78:	b918      	cbnz	r0, 800ce82 <__gethex+0x3f6>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	2184      	movs	r1, #132	; 0x84
 800ce7e:	4b1a      	ldr	r3, [pc, #104]	; (800cee8 <__gethex+0x45c>)
 800ce80:	e6b1      	b.n	800cbe6 <__gethex+0x15a>
 800ce82:	6922      	ldr	r2, [r4, #16]
 800ce84:	f104 010c 	add.w	r1, r4, #12
 800ce88:	3202      	adds	r2, #2
 800ce8a:	0092      	lsls	r2, r2, #2
 800ce8c:	300c      	adds	r0, #12
 800ce8e:	f7ff fd4f 	bl	800c930 <memcpy>
 800ce92:	4621      	mov	r1, r4
 800ce94:	4648      	mov	r0, r9
 800ce96:	f7fe f893 	bl	800afc0 <_Bfree>
 800ce9a:	4654      	mov	r4, sl
 800ce9c:	6922      	ldr	r2, [r4, #16]
 800ce9e:	1c51      	adds	r1, r2, #1
 800cea0:	6121      	str	r1, [r4, #16]
 800cea2:	2101      	movs	r1, #1
 800cea4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cea8:	6151      	str	r1, [r2, #20]
 800ceaa:	e7bc      	b.n	800ce26 <__gethex+0x39a>
 800ceac:	6921      	ldr	r1, [r4, #16]
 800ceae:	4559      	cmp	r1, fp
 800ceb0:	dd0b      	ble.n	800ceca <__gethex+0x43e>
 800ceb2:	2101      	movs	r1, #1
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7ff fd81 	bl	800c9bc <rshift>
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	3601      	adds	r6, #1
 800cebe:	42b3      	cmp	r3, r6
 800cec0:	f6ff aeda 	blt.w	800cc78 <__gethex+0x1ec>
 800cec4:	f04f 0801 	mov.w	r8, #1
 800cec8:	e7c2      	b.n	800ce50 <__gethex+0x3c4>
 800ceca:	f015 051f 	ands.w	r5, r5, #31
 800cece:	d0f9      	beq.n	800cec4 <__gethex+0x438>
 800ced0:	9b01      	ldr	r3, [sp, #4]
 800ced2:	f1c5 0520 	rsb	r5, r5, #32
 800ced6:	441a      	add	r2, r3
 800ced8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cedc:	f7fe f922 	bl	800b124 <__hi0bits>
 800cee0:	42a8      	cmp	r0, r5
 800cee2:	dbe6      	blt.n	800ceb2 <__gethex+0x426>
 800cee4:	e7ee      	b.n	800cec4 <__gethex+0x438>
 800cee6:	bf00      	nop
 800cee8:	0800dc40 	.word	0x0800dc40

0800ceec <L_shift>:
 800ceec:	f1c2 0208 	rsb	r2, r2, #8
 800cef0:	0092      	lsls	r2, r2, #2
 800cef2:	b570      	push	{r4, r5, r6, lr}
 800cef4:	f1c2 0620 	rsb	r6, r2, #32
 800cef8:	6843      	ldr	r3, [r0, #4]
 800cefa:	6804      	ldr	r4, [r0, #0]
 800cefc:	fa03 f506 	lsl.w	r5, r3, r6
 800cf00:	432c      	orrs	r4, r5
 800cf02:	40d3      	lsrs	r3, r2
 800cf04:	6004      	str	r4, [r0, #0]
 800cf06:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf0a:	4288      	cmp	r0, r1
 800cf0c:	d3f4      	bcc.n	800cef8 <L_shift+0xc>
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}

0800cf10 <__match>:
 800cf10:	b530      	push	{r4, r5, lr}
 800cf12:	6803      	ldr	r3, [r0, #0]
 800cf14:	3301      	adds	r3, #1
 800cf16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf1a:	b914      	cbnz	r4, 800cf22 <__match+0x12>
 800cf1c:	6003      	str	r3, [r0, #0]
 800cf1e:	2001      	movs	r0, #1
 800cf20:	bd30      	pop	{r4, r5, pc}
 800cf22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf2a:	2d19      	cmp	r5, #25
 800cf2c:	bf98      	it	ls
 800cf2e:	3220      	addls	r2, #32
 800cf30:	42a2      	cmp	r2, r4
 800cf32:	d0f0      	beq.n	800cf16 <__match+0x6>
 800cf34:	2000      	movs	r0, #0
 800cf36:	e7f3      	b.n	800cf20 <__match+0x10>

0800cf38 <__hexnan>:
 800cf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	2500      	movs	r5, #0
 800cf3e:	680b      	ldr	r3, [r1, #0]
 800cf40:	4682      	mov	sl, r0
 800cf42:	115e      	asrs	r6, r3, #5
 800cf44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf48:	f013 031f 	ands.w	r3, r3, #31
 800cf4c:	bf18      	it	ne
 800cf4e:	3604      	addne	r6, #4
 800cf50:	1f37      	subs	r7, r6, #4
 800cf52:	4690      	mov	r8, r2
 800cf54:	46b9      	mov	r9, r7
 800cf56:	463c      	mov	r4, r7
 800cf58:	46ab      	mov	fp, r5
 800cf5a:	b087      	sub	sp, #28
 800cf5c:	6801      	ldr	r1, [r0, #0]
 800cf5e:	9301      	str	r3, [sp, #4]
 800cf60:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf64:	9502      	str	r5, [sp, #8]
 800cf66:	784a      	ldrb	r2, [r1, #1]
 800cf68:	1c4b      	adds	r3, r1, #1
 800cf6a:	9303      	str	r3, [sp, #12]
 800cf6c:	b342      	cbz	r2, 800cfc0 <__hexnan+0x88>
 800cf6e:	4610      	mov	r0, r2
 800cf70:	9105      	str	r1, [sp, #20]
 800cf72:	9204      	str	r2, [sp, #16]
 800cf74:	f7ff fd75 	bl	800ca62 <__hexdig_fun>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d14f      	bne.n	800d01c <__hexnan+0xe4>
 800cf7c:	9a04      	ldr	r2, [sp, #16]
 800cf7e:	9905      	ldr	r1, [sp, #20]
 800cf80:	2a20      	cmp	r2, #32
 800cf82:	d818      	bhi.n	800cfb6 <__hexnan+0x7e>
 800cf84:	9b02      	ldr	r3, [sp, #8]
 800cf86:	459b      	cmp	fp, r3
 800cf88:	dd13      	ble.n	800cfb2 <__hexnan+0x7a>
 800cf8a:	454c      	cmp	r4, r9
 800cf8c:	d206      	bcs.n	800cf9c <__hexnan+0x64>
 800cf8e:	2d07      	cmp	r5, #7
 800cf90:	dc04      	bgt.n	800cf9c <__hexnan+0x64>
 800cf92:	462a      	mov	r2, r5
 800cf94:	4649      	mov	r1, r9
 800cf96:	4620      	mov	r0, r4
 800cf98:	f7ff ffa8 	bl	800ceec <L_shift>
 800cf9c:	4544      	cmp	r4, r8
 800cf9e:	d950      	bls.n	800d042 <__hexnan+0x10a>
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	f1a4 0904 	sub.w	r9, r4, #4
 800cfa6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfaa:	461d      	mov	r5, r3
 800cfac:	464c      	mov	r4, r9
 800cfae:	f8cd b008 	str.w	fp, [sp, #8]
 800cfb2:	9903      	ldr	r1, [sp, #12]
 800cfb4:	e7d7      	b.n	800cf66 <__hexnan+0x2e>
 800cfb6:	2a29      	cmp	r2, #41	; 0x29
 800cfb8:	d155      	bne.n	800d066 <__hexnan+0x12e>
 800cfba:	3102      	adds	r1, #2
 800cfbc:	f8ca 1000 	str.w	r1, [sl]
 800cfc0:	f1bb 0f00 	cmp.w	fp, #0
 800cfc4:	d04f      	beq.n	800d066 <__hexnan+0x12e>
 800cfc6:	454c      	cmp	r4, r9
 800cfc8:	d206      	bcs.n	800cfd8 <__hexnan+0xa0>
 800cfca:	2d07      	cmp	r5, #7
 800cfcc:	dc04      	bgt.n	800cfd8 <__hexnan+0xa0>
 800cfce:	462a      	mov	r2, r5
 800cfd0:	4649      	mov	r1, r9
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f7ff ff8a 	bl	800ceec <L_shift>
 800cfd8:	4544      	cmp	r4, r8
 800cfda:	d934      	bls.n	800d046 <__hexnan+0x10e>
 800cfdc:	4623      	mov	r3, r4
 800cfde:	f1a8 0204 	sub.w	r2, r8, #4
 800cfe2:	f853 1b04 	ldr.w	r1, [r3], #4
 800cfe6:	429f      	cmp	r7, r3
 800cfe8:	f842 1f04 	str.w	r1, [r2, #4]!
 800cfec:	d2f9      	bcs.n	800cfe2 <__hexnan+0xaa>
 800cfee:	1b3b      	subs	r3, r7, r4
 800cff0:	f023 0303 	bic.w	r3, r3, #3
 800cff4:	3304      	adds	r3, #4
 800cff6:	3e03      	subs	r6, #3
 800cff8:	3401      	adds	r4, #1
 800cffa:	42a6      	cmp	r6, r4
 800cffc:	bf38      	it	cc
 800cffe:	2304      	movcc	r3, #4
 800d000:	2200      	movs	r2, #0
 800d002:	4443      	add	r3, r8
 800d004:	f843 2b04 	str.w	r2, [r3], #4
 800d008:	429f      	cmp	r7, r3
 800d00a:	d2fb      	bcs.n	800d004 <__hexnan+0xcc>
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	b91b      	cbnz	r3, 800d018 <__hexnan+0xe0>
 800d010:	4547      	cmp	r7, r8
 800d012:	d126      	bne.n	800d062 <__hexnan+0x12a>
 800d014:	2301      	movs	r3, #1
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	2005      	movs	r0, #5
 800d01a:	e025      	b.n	800d068 <__hexnan+0x130>
 800d01c:	3501      	adds	r5, #1
 800d01e:	2d08      	cmp	r5, #8
 800d020:	f10b 0b01 	add.w	fp, fp, #1
 800d024:	dd06      	ble.n	800d034 <__hexnan+0xfc>
 800d026:	4544      	cmp	r4, r8
 800d028:	d9c3      	bls.n	800cfb2 <__hexnan+0x7a>
 800d02a:	2300      	movs	r3, #0
 800d02c:	2501      	movs	r5, #1
 800d02e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d032:	3c04      	subs	r4, #4
 800d034:	6822      	ldr	r2, [r4, #0]
 800d036:	f000 000f 	and.w	r0, r0, #15
 800d03a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d03e:	6020      	str	r0, [r4, #0]
 800d040:	e7b7      	b.n	800cfb2 <__hexnan+0x7a>
 800d042:	2508      	movs	r5, #8
 800d044:	e7b5      	b.n	800cfb2 <__hexnan+0x7a>
 800d046:	9b01      	ldr	r3, [sp, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d0df      	beq.n	800d00c <__hexnan+0xd4>
 800d04c:	f04f 32ff 	mov.w	r2, #4294967295
 800d050:	f1c3 0320 	rsb	r3, r3, #32
 800d054:	40da      	lsrs	r2, r3
 800d056:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d05a:	4013      	ands	r3, r2
 800d05c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d060:	e7d4      	b.n	800d00c <__hexnan+0xd4>
 800d062:	3f04      	subs	r7, #4
 800d064:	e7d2      	b.n	800d00c <__hexnan+0xd4>
 800d066:	2004      	movs	r0, #4
 800d068:	b007      	add	sp, #28
 800d06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d06e <__ascii_mbtowc>:
 800d06e:	b082      	sub	sp, #8
 800d070:	b901      	cbnz	r1, 800d074 <__ascii_mbtowc+0x6>
 800d072:	a901      	add	r1, sp, #4
 800d074:	b142      	cbz	r2, 800d088 <__ascii_mbtowc+0x1a>
 800d076:	b14b      	cbz	r3, 800d08c <__ascii_mbtowc+0x1e>
 800d078:	7813      	ldrb	r3, [r2, #0]
 800d07a:	600b      	str	r3, [r1, #0]
 800d07c:	7812      	ldrb	r2, [r2, #0]
 800d07e:	1e10      	subs	r0, r2, #0
 800d080:	bf18      	it	ne
 800d082:	2001      	movne	r0, #1
 800d084:	b002      	add	sp, #8
 800d086:	4770      	bx	lr
 800d088:	4610      	mov	r0, r2
 800d08a:	e7fb      	b.n	800d084 <__ascii_mbtowc+0x16>
 800d08c:	f06f 0001 	mvn.w	r0, #1
 800d090:	e7f8      	b.n	800d084 <__ascii_mbtowc+0x16>

0800d092 <_realloc_r>:
 800d092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d096:	4680      	mov	r8, r0
 800d098:	4614      	mov	r4, r2
 800d09a:	460e      	mov	r6, r1
 800d09c:	b921      	cbnz	r1, 800d0a8 <_realloc_r+0x16>
 800d09e:	4611      	mov	r1, r2
 800d0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a4:	f7fd bec0 	b.w	800ae28 <_malloc_r>
 800d0a8:	b92a      	cbnz	r2, 800d0b6 <_realloc_r+0x24>
 800d0aa:	f7fd fe4d 	bl	800ad48 <_free_r>
 800d0ae:	4625      	mov	r5, r4
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b6:	f000 f842 	bl	800d13e <_malloc_usable_size_r>
 800d0ba:	4284      	cmp	r4, r0
 800d0bc:	4607      	mov	r7, r0
 800d0be:	d802      	bhi.n	800d0c6 <_realloc_r+0x34>
 800d0c0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0c4:	d812      	bhi.n	800d0ec <_realloc_r+0x5a>
 800d0c6:	4621      	mov	r1, r4
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	f7fd fead 	bl	800ae28 <_malloc_r>
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	d0ed      	beq.n	800d0b0 <_realloc_r+0x1e>
 800d0d4:	42bc      	cmp	r4, r7
 800d0d6:	4622      	mov	r2, r4
 800d0d8:	4631      	mov	r1, r6
 800d0da:	bf28      	it	cs
 800d0dc:	463a      	movcs	r2, r7
 800d0de:	f7ff fc27 	bl	800c930 <memcpy>
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	f7fd fe2f 	bl	800ad48 <_free_r>
 800d0ea:	e7e1      	b.n	800d0b0 <_realloc_r+0x1e>
 800d0ec:	4635      	mov	r5, r6
 800d0ee:	e7df      	b.n	800d0b0 <_realloc_r+0x1e>

0800d0f0 <__ascii_wctomb>:
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	4608      	mov	r0, r1
 800d0f4:	b141      	cbz	r1, 800d108 <__ascii_wctomb+0x18>
 800d0f6:	2aff      	cmp	r2, #255	; 0xff
 800d0f8:	d904      	bls.n	800d104 <__ascii_wctomb+0x14>
 800d0fa:	228a      	movs	r2, #138	; 0x8a
 800d0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	4770      	bx	lr
 800d104:	2001      	movs	r0, #1
 800d106:	700a      	strb	r2, [r1, #0]
 800d108:	4770      	bx	lr
	...

0800d10c <fiprintf>:
 800d10c:	b40e      	push	{r1, r2, r3}
 800d10e:	b503      	push	{r0, r1, lr}
 800d110:	4601      	mov	r1, r0
 800d112:	ab03      	add	r3, sp, #12
 800d114:	4805      	ldr	r0, [pc, #20]	; (800d12c <fiprintf+0x20>)
 800d116:	f853 2b04 	ldr.w	r2, [r3], #4
 800d11a:	6800      	ldr	r0, [r0, #0]
 800d11c:	9301      	str	r3, [sp, #4]
 800d11e:	f000 f83d 	bl	800d19c <_vfiprintf_r>
 800d122:	b002      	add	sp, #8
 800d124:	f85d eb04 	ldr.w	lr, [sp], #4
 800d128:	b003      	add	sp, #12
 800d12a:	4770      	bx	lr
 800d12c:	20000068 	.word	0x20000068

0800d130 <abort>:
 800d130:	2006      	movs	r0, #6
 800d132:	b508      	push	{r3, lr}
 800d134:	f000 fa0a 	bl	800d54c <raise>
 800d138:	2001      	movs	r0, #1
 800d13a:	f7f7 fd46 	bl	8004bca <_exit>

0800d13e <_malloc_usable_size_r>:
 800d13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d142:	1f18      	subs	r0, r3, #4
 800d144:	2b00      	cmp	r3, #0
 800d146:	bfbc      	itt	lt
 800d148:	580b      	ldrlt	r3, [r1, r0]
 800d14a:	18c0      	addlt	r0, r0, r3
 800d14c:	4770      	bx	lr

0800d14e <__sfputc_r>:
 800d14e:	6893      	ldr	r3, [r2, #8]
 800d150:	b410      	push	{r4}
 800d152:	3b01      	subs	r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	6093      	str	r3, [r2, #8]
 800d158:	da07      	bge.n	800d16a <__sfputc_r+0x1c>
 800d15a:	6994      	ldr	r4, [r2, #24]
 800d15c:	42a3      	cmp	r3, r4
 800d15e:	db01      	blt.n	800d164 <__sfputc_r+0x16>
 800d160:	290a      	cmp	r1, #10
 800d162:	d102      	bne.n	800d16a <__sfputc_r+0x1c>
 800d164:	bc10      	pop	{r4}
 800d166:	f000 b933 	b.w	800d3d0 <__swbuf_r>
 800d16a:	6813      	ldr	r3, [r2, #0]
 800d16c:	1c58      	adds	r0, r3, #1
 800d16e:	6010      	str	r0, [r2, #0]
 800d170:	7019      	strb	r1, [r3, #0]
 800d172:	4608      	mov	r0, r1
 800d174:	bc10      	pop	{r4}
 800d176:	4770      	bx	lr

0800d178 <__sfputs_r>:
 800d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	4614      	mov	r4, r2
 800d180:	18d5      	adds	r5, r2, r3
 800d182:	42ac      	cmp	r4, r5
 800d184:	d101      	bne.n	800d18a <__sfputs_r+0x12>
 800d186:	2000      	movs	r0, #0
 800d188:	e007      	b.n	800d19a <__sfputs_r+0x22>
 800d18a:	463a      	mov	r2, r7
 800d18c:	4630      	mov	r0, r6
 800d18e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d192:	f7ff ffdc 	bl	800d14e <__sfputc_r>
 800d196:	1c43      	adds	r3, r0, #1
 800d198:	d1f3      	bne.n	800d182 <__sfputs_r+0xa>
 800d19a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d19c <_vfiprintf_r>:
 800d19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1a0:	460d      	mov	r5, r1
 800d1a2:	4614      	mov	r4, r2
 800d1a4:	4698      	mov	r8, r3
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	b09d      	sub	sp, #116	; 0x74
 800d1aa:	b118      	cbz	r0, 800d1b4 <_vfiprintf_r+0x18>
 800d1ac:	6a03      	ldr	r3, [r0, #32]
 800d1ae:	b90b      	cbnz	r3, 800d1b4 <_vfiprintf_r+0x18>
 800d1b0:	f7fc fe0a 	bl	8009dc8 <__sinit>
 800d1b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b6:	07d9      	lsls	r1, r3, #31
 800d1b8:	d405      	bmi.n	800d1c6 <_vfiprintf_r+0x2a>
 800d1ba:	89ab      	ldrh	r3, [r5, #12]
 800d1bc:	059a      	lsls	r2, r3, #22
 800d1be:	d402      	bmi.n	800d1c6 <_vfiprintf_r+0x2a>
 800d1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1c2:	f7fc ff3c 	bl	800a03e <__retarget_lock_acquire_recursive>
 800d1c6:	89ab      	ldrh	r3, [r5, #12]
 800d1c8:	071b      	lsls	r3, r3, #28
 800d1ca:	d501      	bpl.n	800d1d0 <_vfiprintf_r+0x34>
 800d1cc:	692b      	ldr	r3, [r5, #16]
 800d1ce:	b99b      	cbnz	r3, 800d1f8 <_vfiprintf_r+0x5c>
 800d1d0:	4629      	mov	r1, r5
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f000 f93a 	bl	800d44c <__swsetup_r>
 800d1d8:	b170      	cbz	r0, 800d1f8 <_vfiprintf_r+0x5c>
 800d1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1dc:	07dc      	lsls	r4, r3, #31
 800d1de:	d504      	bpl.n	800d1ea <_vfiprintf_r+0x4e>
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	b01d      	add	sp, #116	; 0x74
 800d1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	0598      	lsls	r0, r3, #22
 800d1ee:	d4f7      	bmi.n	800d1e0 <_vfiprintf_r+0x44>
 800d1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1f2:	f7fc ff25 	bl	800a040 <__retarget_lock_release_recursive>
 800d1f6:	e7f3      	b.n	800d1e0 <_vfiprintf_r+0x44>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d202:	2330      	movs	r3, #48	; 0x30
 800d204:	f04f 0901 	mov.w	r9, #1
 800d208:	f8cd 800c 	str.w	r8, [sp, #12]
 800d20c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d3bc <_vfiprintf_r+0x220>
 800d210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d214:	4623      	mov	r3, r4
 800d216:	469a      	mov	sl, r3
 800d218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d21c:	b10a      	cbz	r2, 800d222 <_vfiprintf_r+0x86>
 800d21e:	2a25      	cmp	r2, #37	; 0x25
 800d220:	d1f9      	bne.n	800d216 <_vfiprintf_r+0x7a>
 800d222:	ebba 0b04 	subs.w	fp, sl, r4
 800d226:	d00b      	beq.n	800d240 <_vfiprintf_r+0xa4>
 800d228:	465b      	mov	r3, fp
 800d22a:	4622      	mov	r2, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	4630      	mov	r0, r6
 800d230:	f7ff ffa2 	bl	800d178 <__sfputs_r>
 800d234:	3001      	adds	r0, #1
 800d236:	f000 80a9 	beq.w	800d38c <_vfiprintf_r+0x1f0>
 800d23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d23c:	445a      	add	r2, fp
 800d23e:	9209      	str	r2, [sp, #36]	; 0x24
 800d240:	f89a 3000 	ldrb.w	r3, [sl]
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 80a1 	beq.w	800d38c <_vfiprintf_r+0x1f0>
 800d24a:	2300      	movs	r3, #0
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d254:	f10a 0a01 	add.w	sl, sl, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	9307      	str	r3, [sp, #28]
 800d25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d260:	931a      	str	r3, [sp, #104]	; 0x68
 800d262:	4654      	mov	r4, sl
 800d264:	2205      	movs	r2, #5
 800d266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26a:	4854      	ldr	r0, [pc, #336]	; (800d3bc <_vfiprintf_r+0x220>)
 800d26c:	f7fc fee9 	bl	800a042 <memchr>
 800d270:	9a04      	ldr	r2, [sp, #16]
 800d272:	b9d8      	cbnz	r0, 800d2ac <_vfiprintf_r+0x110>
 800d274:	06d1      	lsls	r1, r2, #27
 800d276:	bf44      	itt	mi
 800d278:	2320      	movmi	r3, #32
 800d27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d27e:	0713      	lsls	r3, r2, #28
 800d280:	bf44      	itt	mi
 800d282:	232b      	movmi	r3, #43	; 0x2b
 800d284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d288:	f89a 3000 	ldrb.w	r3, [sl]
 800d28c:	2b2a      	cmp	r3, #42	; 0x2a
 800d28e:	d015      	beq.n	800d2bc <_vfiprintf_r+0x120>
 800d290:	4654      	mov	r4, sl
 800d292:	2000      	movs	r0, #0
 800d294:	f04f 0c0a 	mov.w	ip, #10
 800d298:	9a07      	ldr	r2, [sp, #28]
 800d29a:	4621      	mov	r1, r4
 800d29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a0:	3b30      	subs	r3, #48	; 0x30
 800d2a2:	2b09      	cmp	r3, #9
 800d2a4:	d94d      	bls.n	800d342 <_vfiprintf_r+0x1a6>
 800d2a6:	b1b0      	cbz	r0, 800d2d6 <_vfiprintf_r+0x13a>
 800d2a8:	9207      	str	r2, [sp, #28]
 800d2aa:	e014      	b.n	800d2d6 <_vfiprintf_r+0x13a>
 800d2ac:	eba0 0308 	sub.w	r3, r0, r8
 800d2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	46a2      	mov	sl, r4
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	e7d2      	b.n	800d262 <_vfiprintf_r+0xc6>
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	1d19      	adds	r1, r3, #4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	9103      	str	r1, [sp, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfbb      	ittet	lt
 800d2c8:	425b      	neglt	r3, r3
 800d2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ce:	9307      	strge	r3, [sp, #28]
 800d2d0:	9307      	strlt	r3, [sp, #28]
 800d2d2:	bfb8      	it	lt
 800d2d4:	9204      	strlt	r2, [sp, #16]
 800d2d6:	7823      	ldrb	r3, [r4, #0]
 800d2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2da:	d10c      	bne.n	800d2f6 <_vfiprintf_r+0x15a>
 800d2dc:	7863      	ldrb	r3, [r4, #1]
 800d2de:	2b2a      	cmp	r3, #42	; 0x2a
 800d2e0:	d134      	bne.n	800d34c <_vfiprintf_r+0x1b0>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	3402      	adds	r4, #2
 800d2e6:	1d1a      	adds	r2, r3, #4
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	9203      	str	r2, [sp, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	bfb8      	it	lt
 800d2f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3c0 <_vfiprintf_r+0x224>
 800d2fa:	2203      	movs	r2, #3
 800d2fc:	4650      	mov	r0, sl
 800d2fe:	7821      	ldrb	r1, [r4, #0]
 800d300:	f7fc fe9f 	bl	800a042 <memchr>
 800d304:	b138      	cbz	r0, 800d316 <_vfiprintf_r+0x17a>
 800d306:	2240      	movs	r2, #64	; 0x40
 800d308:	9b04      	ldr	r3, [sp, #16]
 800d30a:	eba0 000a 	sub.w	r0, r0, sl
 800d30e:	4082      	lsls	r2, r0
 800d310:	4313      	orrs	r3, r2
 800d312:	3401      	adds	r4, #1
 800d314:	9304      	str	r3, [sp, #16]
 800d316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31a:	2206      	movs	r2, #6
 800d31c:	4829      	ldr	r0, [pc, #164]	; (800d3c4 <_vfiprintf_r+0x228>)
 800d31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d322:	f7fc fe8e 	bl	800a042 <memchr>
 800d326:	2800      	cmp	r0, #0
 800d328:	d03f      	beq.n	800d3aa <_vfiprintf_r+0x20e>
 800d32a:	4b27      	ldr	r3, [pc, #156]	; (800d3c8 <_vfiprintf_r+0x22c>)
 800d32c:	bb1b      	cbnz	r3, 800d376 <_vfiprintf_r+0x1da>
 800d32e:	9b03      	ldr	r3, [sp, #12]
 800d330:	3307      	adds	r3, #7
 800d332:	f023 0307 	bic.w	r3, r3, #7
 800d336:	3308      	adds	r3, #8
 800d338:	9303      	str	r3, [sp, #12]
 800d33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33c:	443b      	add	r3, r7
 800d33e:	9309      	str	r3, [sp, #36]	; 0x24
 800d340:	e768      	b.n	800d214 <_vfiprintf_r+0x78>
 800d342:	460c      	mov	r4, r1
 800d344:	2001      	movs	r0, #1
 800d346:	fb0c 3202 	mla	r2, ip, r2, r3
 800d34a:	e7a6      	b.n	800d29a <_vfiprintf_r+0xfe>
 800d34c:	2300      	movs	r3, #0
 800d34e:	f04f 0c0a 	mov.w	ip, #10
 800d352:	4619      	mov	r1, r3
 800d354:	3401      	adds	r4, #1
 800d356:	9305      	str	r3, [sp, #20]
 800d358:	4620      	mov	r0, r4
 800d35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d35e:	3a30      	subs	r2, #48	; 0x30
 800d360:	2a09      	cmp	r2, #9
 800d362:	d903      	bls.n	800d36c <_vfiprintf_r+0x1d0>
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0c6      	beq.n	800d2f6 <_vfiprintf_r+0x15a>
 800d368:	9105      	str	r1, [sp, #20]
 800d36a:	e7c4      	b.n	800d2f6 <_vfiprintf_r+0x15a>
 800d36c:	4604      	mov	r4, r0
 800d36e:	2301      	movs	r3, #1
 800d370:	fb0c 2101 	mla	r1, ip, r1, r2
 800d374:	e7f0      	b.n	800d358 <_vfiprintf_r+0x1bc>
 800d376:	ab03      	add	r3, sp, #12
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	462a      	mov	r2, r5
 800d37c:	4630      	mov	r0, r6
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <_vfiprintf_r+0x230>)
 800d380:	a904      	add	r1, sp, #16
 800d382:	f7fb fec5 	bl	8009110 <_printf_float>
 800d386:	4607      	mov	r7, r0
 800d388:	1c78      	adds	r0, r7, #1
 800d38a:	d1d6      	bne.n	800d33a <_vfiprintf_r+0x19e>
 800d38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d38e:	07d9      	lsls	r1, r3, #31
 800d390:	d405      	bmi.n	800d39e <_vfiprintf_r+0x202>
 800d392:	89ab      	ldrh	r3, [r5, #12]
 800d394:	059a      	lsls	r2, r3, #22
 800d396:	d402      	bmi.n	800d39e <_vfiprintf_r+0x202>
 800d398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d39a:	f7fc fe51 	bl	800a040 <__retarget_lock_release_recursive>
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	065b      	lsls	r3, r3, #25
 800d3a2:	f53f af1d 	bmi.w	800d1e0 <_vfiprintf_r+0x44>
 800d3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a8:	e71c      	b.n	800d1e4 <_vfiprintf_r+0x48>
 800d3aa:	ab03      	add	r3, sp, #12
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	462a      	mov	r2, r5
 800d3b0:	4630      	mov	r0, r6
 800d3b2:	4b06      	ldr	r3, [pc, #24]	; (800d3cc <_vfiprintf_r+0x230>)
 800d3b4:	a904      	add	r1, sp, #16
 800d3b6:	f7fc f94b 	bl	8009650 <_printf_i>
 800d3ba:	e7e4      	b.n	800d386 <_vfiprintf_r+0x1ea>
 800d3bc:	0800de00 	.word	0x0800de00
 800d3c0:	0800de06 	.word	0x0800de06
 800d3c4:	0800de0a 	.word	0x0800de0a
 800d3c8:	08009111 	.word	0x08009111
 800d3cc:	0800d179 	.word	0x0800d179

0800d3d0 <__swbuf_r>:
 800d3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3d2:	460e      	mov	r6, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b118      	cbz	r0, 800d3e2 <__swbuf_r+0x12>
 800d3da:	6a03      	ldr	r3, [r0, #32]
 800d3dc:	b90b      	cbnz	r3, 800d3e2 <__swbuf_r+0x12>
 800d3de:	f7fc fcf3 	bl	8009dc8 <__sinit>
 800d3e2:	69a3      	ldr	r3, [r4, #24]
 800d3e4:	60a3      	str	r3, [r4, #8]
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	071a      	lsls	r2, r3, #28
 800d3ea:	d525      	bpl.n	800d438 <__swbuf_r+0x68>
 800d3ec:	6923      	ldr	r3, [r4, #16]
 800d3ee:	b31b      	cbz	r3, 800d438 <__swbuf_r+0x68>
 800d3f0:	6823      	ldr	r3, [r4, #0]
 800d3f2:	6922      	ldr	r2, [r4, #16]
 800d3f4:	b2f6      	uxtb	r6, r6
 800d3f6:	1a98      	subs	r0, r3, r2
 800d3f8:	6963      	ldr	r3, [r4, #20]
 800d3fa:	4637      	mov	r7, r6
 800d3fc:	4283      	cmp	r3, r0
 800d3fe:	dc04      	bgt.n	800d40a <__swbuf_r+0x3a>
 800d400:	4621      	mov	r1, r4
 800d402:	4628      	mov	r0, r5
 800d404:	f7ff fa30 	bl	800c868 <_fflush_r>
 800d408:	b9e0      	cbnz	r0, 800d444 <__swbuf_r+0x74>
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	3b01      	subs	r3, #1
 800d40e:	60a3      	str	r3, [r4, #8]
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	1c5a      	adds	r2, r3, #1
 800d414:	6022      	str	r2, [r4, #0]
 800d416:	701e      	strb	r6, [r3, #0]
 800d418:	6962      	ldr	r2, [r4, #20]
 800d41a:	1c43      	adds	r3, r0, #1
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d004      	beq.n	800d42a <__swbuf_r+0x5a>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	07db      	lsls	r3, r3, #31
 800d424:	d506      	bpl.n	800d434 <__swbuf_r+0x64>
 800d426:	2e0a      	cmp	r6, #10
 800d428:	d104      	bne.n	800d434 <__swbuf_r+0x64>
 800d42a:	4621      	mov	r1, r4
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff fa1b 	bl	800c868 <_fflush_r>
 800d432:	b938      	cbnz	r0, 800d444 <__swbuf_r+0x74>
 800d434:	4638      	mov	r0, r7
 800d436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d438:	4621      	mov	r1, r4
 800d43a:	4628      	mov	r0, r5
 800d43c:	f000 f806 	bl	800d44c <__swsetup_r>
 800d440:	2800      	cmp	r0, #0
 800d442:	d0d5      	beq.n	800d3f0 <__swbuf_r+0x20>
 800d444:	f04f 37ff 	mov.w	r7, #4294967295
 800d448:	e7f4      	b.n	800d434 <__swbuf_r+0x64>
	...

0800d44c <__swsetup_r>:
 800d44c:	b538      	push	{r3, r4, r5, lr}
 800d44e:	4b2a      	ldr	r3, [pc, #168]	; (800d4f8 <__swsetup_r+0xac>)
 800d450:	4605      	mov	r5, r0
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	460c      	mov	r4, r1
 800d456:	b118      	cbz	r0, 800d460 <__swsetup_r+0x14>
 800d458:	6a03      	ldr	r3, [r0, #32]
 800d45a:	b90b      	cbnz	r3, 800d460 <__swsetup_r+0x14>
 800d45c:	f7fc fcb4 	bl	8009dc8 <__sinit>
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d466:	0718      	lsls	r0, r3, #28
 800d468:	d422      	bmi.n	800d4b0 <__swsetup_r+0x64>
 800d46a:	06d9      	lsls	r1, r3, #27
 800d46c:	d407      	bmi.n	800d47e <__swsetup_r+0x32>
 800d46e:	2309      	movs	r3, #9
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d476:	f04f 30ff 	mov.w	r0, #4294967295
 800d47a:	81a3      	strh	r3, [r4, #12]
 800d47c:	e034      	b.n	800d4e8 <__swsetup_r+0x9c>
 800d47e:	0758      	lsls	r0, r3, #29
 800d480:	d512      	bpl.n	800d4a8 <__swsetup_r+0x5c>
 800d482:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d484:	b141      	cbz	r1, 800d498 <__swsetup_r+0x4c>
 800d486:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d48a:	4299      	cmp	r1, r3
 800d48c:	d002      	beq.n	800d494 <__swsetup_r+0x48>
 800d48e:	4628      	mov	r0, r5
 800d490:	f7fd fc5a 	bl	800ad48 <_free_r>
 800d494:	2300      	movs	r3, #0
 800d496:	6363      	str	r3, [r4, #52]	; 0x34
 800d498:	89a3      	ldrh	r3, [r4, #12]
 800d49a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d49e:	81a3      	strh	r3, [r4, #12]
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	6063      	str	r3, [r4, #4]
 800d4a4:	6923      	ldr	r3, [r4, #16]
 800d4a6:	6023      	str	r3, [r4, #0]
 800d4a8:	89a3      	ldrh	r3, [r4, #12]
 800d4aa:	f043 0308 	orr.w	r3, r3, #8
 800d4ae:	81a3      	strh	r3, [r4, #12]
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	b94b      	cbnz	r3, 800d4c8 <__swsetup_r+0x7c>
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4be:	d003      	beq.n	800d4c8 <__swsetup_r+0x7c>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f000 f883 	bl	800d5ce <__smakebuf_r>
 800d4c8:	89a0      	ldrh	r0, [r4, #12]
 800d4ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4ce:	f010 0301 	ands.w	r3, r0, #1
 800d4d2:	d00a      	beq.n	800d4ea <__swsetup_r+0x9e>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	60a3      	str	r3, [r4, #8]
 800d4d8:	6963      	ldr	r3, [r4, #20]
 800d4da:	425b      	negs	r3, r3
 800d4dc:	61a3      	str	r3, [r4, #24]
 800d4de:	6923      	ldr	r3, [r4, #16]
 800d4e0:	b943      	cbnz	r3, 800d4f4 <__swsetup_r+0xa8>
 800d4e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4e6:	d1c4      	bne.n	800d472 <__swsetup_r+0x26>
 800d4e8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ea:	0781      	lsls	r1, r0, #30
 800d4ec:	bf58      	it	pl
 800d4ee:	6963      	ldrpl	r3, [r4, #20]
 800d4f0:	60a3      	str	r3, [r4, #8]
 800d4f2:	e7f4      	b.n	800d4de <__swsetup_r+0x92>
 800d4f4:	2000      	movs	r0, #0
 800d4f6:	e7f7      	b.n	800d4e8 <__swsetup_r+0x9c>
 800d4f8:	20000068 	.word	0x20000068

0800d4fc <_raise_r>:
 800d4fc:	291f      	cmp	r1, #31
 800d4fe:	b538      	push	{r3, r4, r5, lr}
 800d500:	4604      	mov	r4, r0
 800d502:	460d      	mov	r5, r1
 800d504:	d904      	bls.n	800d510 <_raise_r+0x14>
 800d506:	2316      	movs	r3, #22
 800d508:	6003      	str	r3, [r0, #0]
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	bd38      	pop	{r3, r4, r5, pc}
 800d510:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d512:	b112      	cbz	r2, 800d51a <_raise_r+0x1e>
 800d514:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d518:	b94b      	cbnz	r3, 800d52e <_raise_r+0x32>
 800d51a:	4620      	mov	r0, r4
 800d51c:	f000 f830 	bl	800d580 <_getpid_r>
 800d520:	462a      	mov	r2, r5
 800d522:	4601      	mov	r1, r0
 800d524:	4620      	mov	r0, r4
 800d526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d52a:	f000 b817 	b.w	800d55c <_kill_r>
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d00a      	beq.n	800d548 <_raise_r+0x4c>
 800d532:	1c59      	adds	r1, r3, #1
 800d534:	d103      	bne.n	800d53e <_raise_r+0x42>
 800d536:	2316      	movs	r3, #22
 800d538:	6003      	str	r3, [r0, #0]
 800d53a:	2001      	movs	r0, #1
 800d53c:	e7e7      	b.n	800d50e <_raise_r+0x12>
 800d53e:	2400      	movs	r4, #0
 800d540:	4628      	mov	r0, r5
 800d542:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d546:	4798      	blx	r3
 800d548:	2000      	movs	r0, #0
 800d54a:	e7e0      	b.n	800d50e <_raise_r+0x12>

0800d54c <raise>:
 800d54c:	4b02      	ldr	r3, [pc, #8]	; (800d558 <raise+0xc>)
 800d54e:	4601      	mov	r1, r0
 800d550:	6818      	ldr	r0, [r3, #0]
 800d552:	f7ff bfd3 	b.w	800d4fc <_raise_r>
 800d556:	bf00      	nop
 800d558:	20000068 	.word	0x20000068

0800d55c <_kill_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	2300      	movs	r3, #0
 800d560:	4d06      	ldr	r5, [pc, #24]	; (800d57c <_kill_r+0x20>)
 800d562:	4604      	mov	r4, r0
 800d564:	4608      	mov	r0, r1
 800d566:	4611      	mov	r1, r2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7f7 fb1e 	bl	8004baa <_kill>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d102      	bne.n	800d578 <_kill_r+0x1c>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	b103      	cbz	r3, 800d578 <_kill_r+0x1c>
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	bd38      	pop	{r3, r4, r5, pc}
 800d57a:	bf00      	nop
 800d57c:	2000068c 	.word	0x2000068c

0800d580 <_getpid_r>:
 800d580:	f7f7 bb0c 	b.w	8004b9c <_getpid>

0800d584 <__swhatbuf_r>:
 800d584:	b570      	push	{r4, r5, r6, lr}
 800d586:	460c      	mov	r4, r1
 800d588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58c:	4615      	mov	r5, r2
 800d58e:	2900      	cmp	r1, #0
 800d590:	461e      	mov	r6, r3
 800d592:	b096      	sub	sp, #88	; 0x58
 800d594:	da0c      	bge.n	800d5b0 <__swhatbuf_r+0x2c>
 800d596:	89a3      	ldrh	r3, [r4, #12]
 800d598:	2100      	movs	r1, #0
 800d59a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d59e:	bf0c      	ite	eq
 800d5a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d5a4:	2340      	movne	r3, #64	; 0x40
 800d5a6:	2000      	movs	r0, #0
 800d5a8:	6031      	str	r1, [r6, #0]
 800d5aa:	602b      	str	r3, [r5, #0]
 800d5ac:	b016      	add	sp, #88	; 0x58
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}
 800d5b0:	466a      	mov	r2, sp
 800d5b2:	f000 f849 	bl	800d648 <_fstat_r>
 800d5b6:	2800      	cmp	r0, #0
 800d5b8:	dbed      	blt.n	800d596 <__swhatbuf_r+0x12>
 800d5ba:	9901      	ldr	r1, [sp, #4]
 800d5bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5c4:	4259      	negs	r1, r3
 800d5c6:	4159      	adcs	r1, r3
 800d5c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5cc:	e7eb      	b.n	800d5a6 <__swhatbuf_r+0x22>

0800d5ce <__smakebuf_r>:
 800d5ce:	898b      	ldrh	r3, [r1, #12]
 800d5d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5d2:	079d      	lsls	r5, r3, #30
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	460c      	mov	r4, r1
 800d5d8:	d507      	bpl.n	800d5ea <__smakebuf_r+0x1c>
 800d5da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5de:	6023      	str	r3, [r4, #0]
 800d5e0:	6123      	str	r3, [r4, #16]
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	6163      	str	r3, [r4, #20]
 800d5e6:	b002      	add	sp, #8
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ea:	466a      	mov	r2, sp
 800d5ec:	ab01      	add	r3, sp, #4
 800d5ee:	f7ff ffc9 	bl	800d584 <__swhatbuf_r>
 800d5f2:	9900      	ldr	r1, [sp, #0]
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	4630      	mov	r0, r6
 800d5f8:	f7fd fc16 	bl	800ae28 <_malloc_r>
 800d5fc:	b948      	cbnz	r0, 800d612 <__smakebuf_r+0x44>
 800d5fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d602:	059a      	lsls	r2, r3, #22
 800d604:	d4ef      	bmi.n	800d5e6 <__smakebuf_r+0x18>
 800d606:	f023 0303 	bic.w	r3, r3, #3
 800d60a:	f043 0302 	orr.w	r3, r3, #2
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	e7e3      	b.n	800d5da <__smakebuf_r+0xc>
 800d612:	89a3      	ldrh	r3, [r4, #12]
 800d614:	6020      	str	r0, [r4, #0]
 800d616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	9b00      	ldr	r3, [sp, #0]
 800d61e:	6120      	str	r0, [r4, #16]
 800d620:	6163      	str	r3, [r4, #20]
 800d622:	9b01      	ldr	r3, [sp, #4]
 800d624:	b15b      	cbz	r3, 800d63e <__smakebuf_r+0x70>
 800d626:	4630      	mov	r0, r6
 800d628:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d62c:	f000 f81e 	bl	800d66c <_isatty_r>
 800d630:	b128      	cbz	r0, 800d63e <__smakebuf_r+0x70>
 800d632:	89a3      	ldrh	r3, [r4, #12]
 800d634:	f023 0303 	bic.w	r3, r3, #3
 800d638:	f043 0301 	orr.w	r3, r3, #1
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	431d      	orrs	r5, r3
 800d642:	81a5      	strh	r5, [r4, #12]
 800d644:	e7cf      	b.n	800d5e6 <__smakebuf_r+0x18>
	...

0800d648 <_fstat_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	2300      	movs	r3, #0
 800d64c:	4d06      	ldr	r5, [pc, #24]	; (800d668 <_fstat_r+0x20>)
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	4611      	mov	r1, r2
 800d654:	602b      	str	r3, [r5, #0]
 800d656:	f7f7 fb06 	bl	8004c66 <_fstat>
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	d102      	bne.n	800d664 <_fstat_r+0x1c>
 800d65e:	682b      	ldr	r3, [r5, #0]
 800d660:	b103      	cbz	r3, 800d664 <_fstat_r+0x1c>
 800d662:	6023      	str	r3, [r4, #0]
 800d664:	bd38      	pop	{r3, r4, r5, pc}
 800d666:	bf00      	nop
 800d668:	2000068c 	.word	0x2000068c

0800d66c <_isatty_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	2300      	movs	r3, #0
 800d670:	4d05      	ldr	r5, [pc, #20]	; (800d688 <_isatty_r+0x1c>)
 800d672:	4604      	mov	r4, r0
 800d674:	4608      	mov	r0, r1
 800d676:	602b      	str	r3, [r5, #0]
 800d678:	f7f7 fb04 	bl	8004c84 <_isatty>
 800d67c:	1c43      	adds	r3, r0, #1
 800d67e:	d102      	bne.n	800d686 <_isatty_r+0x1a>
 800d680:	682b      	ldr	r3, [r5, #0]
 800d682:	b103      	cbz	r3, 800d686 <_isatty_r+0x1a>
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	bd38      	pop	{r3, r4, r5, pc}
 800d688:	2000068c 	.word	0x2000068c

0800d68c <_init>:
 800d68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d68e:	bf00      	nop
 800d690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d692:	bc08      	pop	{r3}
 800d694:	469e      	mov	lr, r3
 800d696:	4770      	bx	lr

0800d698 <_fini>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	bf00      	nop
 800d69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d69e:	bc08      	pop	{r3}
 800d6a0:	469e      	mov	lr, r3
 800d6a2:	4770      	bx	lr
