
UART_7BIT_DEBUG_W_G070.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004130  08004130  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004130  08004130  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004130  08004130  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004130  08004130  00014130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  2000000c  08004144  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08004144  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b503  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d68  00000000  00000000  0002b57a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000068c  00000000  00000000  0002db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001458c  00000000  00000000  0002e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b881  00000000  00000000  00042778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080641  00000000  00000000  0004dff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001cf4  00000000  00000000  000ce63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d0330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004090 	.word	0x08004090

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08004090 	.word	0x08004090

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <uart_bi_direction_init>:
		source[i] = source[i+1] ;
	}
}

void uart_bi_direction_init(uint8_t *uartFlag)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
//		  uartRxBuffCount2 = 0;
//		  *uartFlag == 0;
//
//
//	}
	if(*uartFlag == 1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d153      	bne.n	80004a4 <uart_bi_direction_init+0xb8>
	{
		  HAL_Delay(100);
 80003fc:	2064      	movs	r0, #100	; 0x64
 80003fe:	f000 fc77 	bl	8000cf0 <HAL_Delay>
		  uint8_t addr = uartRXBuff1[0] ;
 8000402:	230e      	movs	r3, #14
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	4a29      	ldr	r2, [pc, #164]	; (80004ac <uart_bi_direction_init+0xc0>)
 8000408:	7812      	ldrb	r2, [r2, #0]
 800040a:	701a      	strb	r2, [r3, #0]
		  for(uint8_t i=0; i< uartRxBuffCount1; i++)
 800040c:	230f      	movs	r3, #15
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
 8000414:	e00e      	b.n	8000434 <uart_bi_direction_init+0x48>
		  {
			  uartRXBuff1[i] = uartRXBuff1[i+1] ;
 8000416:	200f      	movs	r0, #15
 8000418:	183b      	adds	r3, r7, r0
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	183b      	adds	r3, r7, r0
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4922      	ldr	r1, [pc, #136]	; (80004ac <uart_bi_direction_init+0xc0>)
 8000424:	5c89      	ldrb	r1, [r1, r2]
 8000426:	4a21      	ldr	r2, [pc, #132]	; (80004ac <uart_bi_direction_init+0xc0>)
 8000428:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i=0; i< uartRxBuffCount1; i++)
 800042a:	183b      	adds	r3, r7, r0
 800042c:	781a      	ldrb	r2, [r3, #0]
 800042e:	183b      	adds	r3, r7, r0
 8000430:	3201      	adds	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <uart_bi_direction_init+0xc4>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	220f      	movs	r2, #15
 800043a:	18ba      	adds	r2, r7, r2
 800043c:	7812      	ldrb	r2, [r2, #0]
 800043e:	429a      	cmp	r2, r3
 8000440:	d3e9      	bcc.n	8000416 <uart_bi_direction_init+0x2a>
		  }

		  if( (addr - '0') == 3)
 8000442:	230e      	movs	r3, #14
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b33      	cmp	r3, #51	; 0x33
 800044a:	d10e      	bne.n	800046a <uart_bi_direction_init+0x7e>
		  {
			  uartRxBuffCount1-- ;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <uart_bi_direction_init+0xc4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	b2da      	uxtb	r2, r3
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <uart_bi_direction_init+0xc4>)
 8000456:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart3,&uartRXBuff1,uartRxBuffCount1 , HAL_MAX_DELAY);
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <uart_bi_direction_init+0xc4>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b29a      	uxth	r2, r3
 800045e:	2301      	movs	r3, #1
 8000460:	425b      	negs	r3, r3
 8000462:	4912      	ldr	r1, [pc, #72]	; (80004ac <uart_bi_direction_init+0xc0>)
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <uart_bi_direction_init+0xc8>)
 8000466:	f001 fe05 	bl	8002074 <HAL_UART_Transmit>
		  }
		  if( (addr - '0') == 2)
 800046a:	230e      	movs	r3, #14
 800046c:	18fb      	adds	r3, r7, r3
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b32      	cmp	r3, #50	; 0x32
 8000472:	d10e      	bne.n	8000492 <uart_bi_direction_init+0xa6>
		  {
			  uartRxBuffCount1-- ;
 8000474:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <uart_bi_direction_init+0xc4>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <uart_bi_direction_init+0xc4>)
 800047e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,&uartRXBuff1, uartRxBuffCount1, HAL_MAX_DELAY);
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <uart_bi_direction_init+0xc4>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b29a      	uxth	r2, r3
 8000486:	2301      	movs	r3, #1
 8000488:	425b      	negs	r3, r3
 800048a:	4908      	ldr	r1, [pc, #32]	; (80004ac <uart_bi_direction_init+0xc0>)
 800048c:	480a      	ldr	r0, [pc, #40]	; (80004b8 <uart_bi_direction_init+0xcc>)
 800048e:	f001 fdf1 	bl	8002074 <HAL_UART_Transmit>
		  }
		  memset(uartRXBuff1, 0, sizeof(uartRXBuff1));
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <uart_bi_direction_init+0xc0>)
 8000494:	22ff      	movs	r2, #255	; 0xff
 8000496:	2100      	movs	r1, #0
 8000498:	0018      	movs	r0, r3
 800049a:	f003 fdcd 	bl	8004038 <memset>
		  uartRxBuffCount1 = 0;
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <uart_bi_direction_init+0xc4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]





 }
 80004a4:	46c0      	nop			; (mov r8, r8)
 80004a6:	46bd      	mov	sp, r7
 80004a8:	b004      	add	sp, #16
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	200001e8 	.word	0x200001e8
 80004b0:	200004e7 	.word	0x200004e7
 80004b4:	20000150 	.word	0x20000150
 80004b8:	200000bc 	.word	0x200000bc

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fb90 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f840 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f956 	bl	8000778 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004cc:	f000 f884 	bl	80005d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8d0 	bl	8000674 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80004d4:	f000 f91c 	bl	8000710 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2,&uartRXBuff2[uartRxBuffCount2],1);
 80004d8:	4b11      	ldr	r3, [pc, #68]	; (8000520 <main+0x64>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	001a      	movs	r2, r3
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <main+0x68>)
 80004e0:	18d1      	adds	r1, r2, r3
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <main+0x6c>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 fe68 	bl	80021bc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1,&uartRXBuff1[uartRxBuffCount1],1);
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <main+0x70>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	001a      	movs	r2, r3
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <main+0x74>)
 80004f4:	18d1      	adds	r1, r2, r3
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <main+0x78>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fe5e 	bl	80021bc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3,&uartRXBuff3[uartRxBuffCount3],1);
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <main+0x7c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	001a      	movs	r2, r3
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x80>)
 8000508:	18d1      	adds	r1, r2, r3
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <main+0x84>)
 800050c:	2201      	movs	r2, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f001 fe54 	bl	80021bc <HAL_UART_Receive_IT>
//		  uartRxBuffCount1 = 0;
//
//
//	  }

	  uart_bi_direction_init(&flag);
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <main+0x88>)
 8000516:	0018      	movs	r0, r3
 8000518:	f7ff ff68 	bl	80003ec <uart_bi_direction_init>
 800051c:	e7fa      	b.n	8000514 <main+0x58>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200004e8 	.word	0x200004e8
 8000524:	200002e8 	.word	0x200002e8
 8000528:	200000bc 	.word	0x200000bc
 800052c:	200004e7 	.word	0x200004e7
 8000530:	200001e8 	.word	0x200001e8
 8000534:	20000028 	.word	0x20000028
 8000538:	200004e9 	.word	0x200004e9
 800053c:	200003e8 	.word	0x200003e8
 8000540:	20000150 	.word	0x20000150
 8000544:	200001e4 	.word	0x200001e4

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b093      	sub	sp, #76	; 0x4c
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	2414      	movs	r4, #20
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2334      	movs	r3, #52	; 0x34
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f003 fd6d 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	0018      	movs	r0, r3
 8000562:	2310      	movs	r3, #16
 8000564:	001a      	movs	r2, r3
 8000566:	2100      	movs	r1, #0
 8000568:	f003 fd66 	bl	8004038 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	0018      	movs	r0, r3
 8000572:	f000 feef 	bl	8001354 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	193b      	adds	r3, r7, r4
 8000578:	2202      	movs	r2, #2
 800057a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	0052      	lsls	r2, r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058a:	193b      	adds	r3, r7, r4
 800058c:	2240      	movs	r2, #64	; 0x40
 800058e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	193b      	adds	r3, r7, r4
 8000598:	0018      	movs	r0, r3
 800059a:	f000 ff27 	bl	80013ec <HAL_RCC_OscConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005a2:	f000 f96b 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2207      	movs	r2, #7
 80005aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 fa22 	bl	8001a0c <HAL_RCC_ClockConfig>
 80005c8:	1e03      	subs	r3, r0, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005cc:	f000 f956 	bl	800087c <Error_Handler>
  }
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b013      	add	sp, #76	; 0x4c
 80005d6:	bd90      	pop	{r4, r7, pc}

080005d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005de:	4a24      	ldr	r2, [pc, #144]	; (8000670 <MX_USART1_UART_Init+0x98>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005e4:	2296      	movs	r2, #150	; 0x96
 80005e6:	0192      	lsls	r2, r2, #6
 80005e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_USART1_UART_Init+0x94>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_USART1_UART_Init+0x94>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 800060e:	4b17      	ldr	r3, [pc, #92]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	0112      	lsls	r2, r2, #4
 8000614:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000618:	2200      	movs	r2, #0
 800061a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <MX_USART1_UART_Init+0x94>)
 800061e:	2200      	movs	r2, #0
 8000620:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000624:	0018      	movs	r0, r3
 8000626:	f001 fccf 	bl	8001fc8 <HAL_UART_Init>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800062e:	f000 f925 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000634:	2100      	movs	r1, #0
 8000636:	0018      	movs	r0, r3
 8000638:	f003 fc1e 	bl	8003e78 <HAL_UARTEx_SetTxFifoThreshold>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000640:	f000 f91c 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000646:	2100      	movs	r1, #0
 8000648:	0018      	movs	r0, r3
 800064a:	f003 fc55 	bl	8003ef8 <HAL_UARTEx_SetRxFifoThreshold>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000652:	f000 f913 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <MX_USART1_UART_Init+0x94>)
 8000658:	0018      	movs	r0, r3
 800065a:	f003 fb95 	bl	8003d88 <HAL_UARTEx_EnableFifoMode>
 800065e:	1e03      	subs	r3, r0, #0
 8000660:	d001      	beq.n	8000666 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000662:	f000 f90b 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028
 8000670:	40013800 	.word	0x40013800

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <MX_USART2_UART_Init+0x94>)
 800067a:	4a24      	ldr	r2, [pc, #144]	; (800070c <MX_USART2_UART_Init+0x98>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_USART2_UART_Init+0x94>)
 8000680:	2296      	movs	r2, #150	; 0x96
 8000682:	0192      	lsls	r2, r2, #6
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <MX_USART2_UART_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <MX_USART2_UART_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b1d      	ldr	r3, [pc, #116]	; (8000708 <MX_USART2_UART_Init+0x94>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_USART2_UART_Init+0x94>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 fc81 	bl	8001fc8 <HAL_UART_Init>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80006ca:	f000 f8d7 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fbd0 	bl	8003e78 <HAL_UARTEx_SetTxFifoThreshold>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80006dc:	f000 f8ce 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006e2:	2100      	movs	r1, #0
 80006e4:	0018      	movs	r0, r3
 80006e6:	f003 fc07 	bl	8003ef8 <HAL_UARTEx_SetRxFifoThreshold>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80006ee:	f000 f8c5 	bl	800087c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x94>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f003 fb85 	bl	8003e04 <HAL_UARTEx_DisableFifoMode>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80006fe:	f000 f8bd 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000bc 	.word	0x200000bc
 800070c:	40004400 	.word	0x40004400

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000716:	4a17      	ldr	r2, [pc, #92]	; (8000774 <MX_USART3_UART_Init+0x64>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_USART3_UART_Init+0x60>)
 800071c:	2296      	movs	r2, #150	; 0x96
 800071e:	0192      	lsls	r2, r2, #6
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_USART3_UART_Init+0x60>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_USART3_UART_Init+0x60>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	0112      	lsls	r2, r2, #4
 800074c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_USART3_UART_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <MX_USART3_UART_Init+0x60>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fc33 	bl	8001fc8 <HAL_UART_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000766:	f000 f889 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000150 	.word	0x20000150
 8000774:	40004800 	.word	0x40004800

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_GPIO_Init+0x40>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <MX_GPIO_Init+0x40>)
 8000784:	2104      	movs	r1, #4
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_GPIO_Init+0x40>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800078e:	2204      	movs	r2, #4
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_GPIO_Init+0x40>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_GPIO_Init+0x40>)
 800079c:	2101      	movs	r1, #1
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_GPIO_Init+0x40>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007a6:	2201      	movs	r2, #1
 80007a8:	4013      	ands	r3, r2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]

  if(huart == &huart2)
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <HAL_UART_RxCpltCallback+0x9c>)
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d112      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x36>
  {
	  HAL_UART_Transmit(&huart1,&(huart->Instance->RDR), 1, 0);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3324      	adds	r3, #36	; 0x24
 80007d2:	0019      	movs	r1, r3
 80007d4:	4821      	ldr	r0, [pc, #132]	; (800085c <HAL_UART_RxCpltCallback+0xa0>)
 80007d6:	2300      	movs	r3, #0
 80007d8:	2201      	movs	r2, #1
 80007da:	f001 fc4b 	bl	8002074 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart2,&uartRXBuff2[uartRxBuffCount2],1);
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <HAL_UART_RxCpltCallback+0xa4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_UART_RxCpltCallback+0xa8>)
 80007e6:	18d1      	adds	r1, r2, r3
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <HAL_UART_RxCpltCallback+0x9c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fce5 	bl	80021bc <HAL_UART_Receive_IT>
  }
  if(huart == &huart3)
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <HAL_UART_RxCpltCallback+0xac>)
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d112      	bne.n	8000820 <HAL_UART_RxCpltCallback+0x64>
  {
	  HAL_UART_Transmit(&huart1,&(huart->Instance->RDR), 1, 0);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3324      	adds	r3, #36	; 0x24
 8000800:	0019      	movs	r1, r3
 8000802:	4816      	ldr	r0, [pc, #88]	; (800085c <HAL_UART_RxCpltCallback+0xa0>)
 8000804:	2300      	movs	r3, #0
 8000806:	2201      	movs	r2, #1
 8000808:	f001 fc34 	bl	8002074 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart3,&uartRXBuff3[uartRxBuffCount3],1);
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_UART_RxCpltCallback+0xb0>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	001a      	movs	r2, r3
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <HAL_UART_RxCpltCallback+0xb4>)
 8000814:	18d1      	adds	r1, r2, r3
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <HAL_UART_RxCpltCallback+0xac>)
 8000818:	2201      	movs	r2, #1
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fcce 	bl	80021bc <HAL_UART_Receive_IT>
  }
  if(huart == &huart1)
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_UART_RxCpltCallback+0xa0>)
 8000824:	429a      	cmp	r2, r3
 8000826:	d112      	bne.n	800084e <HAL_UART_RxCpltCallback+0x92>
  {
	  HAL_UART_Transmit(&huart2,&(huart->Instance->RDR), 1, 0);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3324      	adds	r3, #36	; 0x24
 800082e:	0019      	movs	r1, r3
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <HAL_UART_RxCpltCallback+0x9c>)
 8000832:	2300      	movs	r3, #0
 8000834:	2201      	movs	r2, #1
 8000836:	f001 fc1d 	bl	8002074 <HAL_UART_Transmit>
	  HAL_UART_Receive_IT(&huart1,&uartRXBuff1[uartRxBuffCount1],1);
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_RxCpltCallback+0xb8>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	001a      	movs	r2, r3
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <HAL_UART_RxCpltCallback+0xbc>)
 8000842:	18d1      	adds	r1, r2, r3
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_UART_RxCpltCallback+0xa0>)
 8000846:	2201      	movs	r2, #1
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fcb7 	bl	80021bc <HAL_UART_Receive_IT>
  }

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b002      	add	sp, #8
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	200000bc 	.word	0x200000bc
 800085c:	20000028 	.word	0x20000028
 8000860:	200004e8 	.word	0x200004e8
 8000864:	200002e8 	.word	0x200002e8
 8000868:	20000150 	.word	0x20000150
 800086c:	200004e9 	.word	0x200004e9
 8000870:	200003e8 	.word	0x200003e8
 8000874:	200004e7 	.word	0x200004e7
 8000878:	200001e8 	.word	0x200001e8

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	e7fe      	b.n	8000884 <Error_Handler+0x8>
	...

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x44>)
 8000890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <HAL_MspInit+0x44>)
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_MspInit+0x44>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	2201      	movs	r2, #1
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_MspInit+0x44>)
 80008a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_MspInit+0x44>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0549      	lsls	r1, r1, #21
 80008b0:	430a      	orrs	r2, r1
 80008b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_MspInit+0x44>)
 80008b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	055b      	lsls	r3, r3, #21
 80008bc:	4013      	ands	r3, r2
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b097      	sub	sp, #92	; 0x5c
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	2344      	movs	r3, #68	; 0x44
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	0018      	movs	r0, r3
 80008de:	2314      	movs	r3, #20
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f003 fba8 	bl	8004038 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008e8:	2428      	movs	r4, #40	; 0x28
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	231c      	movs	r3, #28
 80008f0:	001a      	movs	r2, r3
 80008f2:	2100      	movs	r1, #0
 80008f4:	f003 fba0 	bl	8004038 <memset>
  if(huart->Instance==USART1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a7e      	ldr	r2, [pc, #504]	; (8000af8 <HAL_UART_MspInit+0x228>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d146      	bne.n	8000990 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800090e:	193b      	adds	r3, r7, r4
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fa25 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 8000916:	1e03      	subs	r3, r0, #0
 8000918:	d001      	beq.n	800091e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800091a:	f7ff ffaf 	bl	800087c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800091e:	4b77      	ldr	r3, [pc, #476]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000922:	4b76      	ldr	r3, [pc, #472]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	01c9      	lsls	r1, r1, #7
 8000928:	430a      	orrs	r2, r1
 800092a:	641a      	str	r2, [r3, #64]	; 0x40
 800092c:	4b73      	ldr	r3, [pc, #460]	; (8000afc <HAL_UART_MspInit+0x22c>)
 800092e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	01db      	lsls	r3, r3, #7
 8000934:	4013      	ands	r3, r2
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	4b70      	ldr	r3, [pc, #448]	; (8000afc <HAL_UART_MspInit+0x22c>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000940:	2104      	movs	r1, #4
 8000942:	430a      	orrs	r2, r1
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
 8000946:	4b6d      	ldr	r3, [pc, #436]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094a:	2204      	movs	r2, #4
 800094c:	4013      	ands	r3, r2
 800094e:	623b      	str	r3, [r7, #32]
 8000950:	6a3b      	ldr	r3, [r7, #32]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000952:	2144      	movs	r1, #68	; 0x44
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2230      	movs	r2, #48	; 0x30
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	187b      	adds	r3, r7, r1
 8000974:	4a62      	ldr	r2, [pc, #392]	; (8000b00 <HAL_UART_MspInit+0x230>)
 8000976:	0019      	movs	r1, r3
 8000978:	0010      	movs	r0, r2
 800097a:	f000 fb87 	bl	800108c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	201b      	movs	r0, #27
 8000984:	f000 fa84 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000988:	201b      	movs	r0, #27
 800098a:	f000 fa96 	bl	8000eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800098e:	e0af      	b.n	8000af0 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a5b      	ldr	r2, [pc, #364]	; (8000b04 <HAL_UART_MspInit+0x234>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d148      	bne.n	8000a2c <HAL_UART_MspInit+0x15c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800099a:	2128      	movs	r1, #40	; 0x28
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2202      	movs	r2, #2
 80009a0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	0018      	movs	r0, r3
 80009ac:	f001 f9d8 	bl	8001d60 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	1e03      	subs	r3, r0, #0
 80009b2:	d001      	beq.n	80009b8 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 80009b4:	f7ff ff62 	bl	800087c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009b8:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009bc:	4b4f      	ldr	r3, [pc, #316]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	0289      	lsls	r1, r1, #10
 80009c2:	430a      	orrs	r2, r1
 80009c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ca:	2380      	movs	r3, #128	; 0x80
 80009cc:	029b      	lsls	r3, r3, #10
 80009ce:	4013      	ands	r3, r2
 80009d0:	61fb      	str	r3, [r7, #28]
 80009d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b49      	ldr	r3, [pc, #292]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d8:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009da:	2101      	movs	r1, #1
 80009dc:	430a      	orrs	r2, r1
 80009de:	635a      	str	r2, [r3, #52]	; 0x34
 80009e0:	4b46      	ldr	r3, [pc, #280]	; (8000afc <HAL_UART_MspInit+0x22c>)
 80009e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e4:	2201      	movs	r2, #1
 80009e6:	4013      	ands	r3, r2
 80009e8:	61bb      	str	r3, [r7, #24]
 80009ea:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ec:	2144      	movs	r1, #68	; 0x44
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	220c      	movs	r2, #12
 80009f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	187a      	adds	r2, r7, r1
 8000a0e:	23a0      	movs	r3, #160	; 0xa0
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fb39 	bl	800108c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 fa36 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a24:	201c      	movs	r0, #28
 8000a26:	f000 fa48 	bl	8000eba <HAL_NVIC_EnableIRQ>
}
 8000a2a:	e061      	b.n	8000af0 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a35      	ldr	r2, [pc, #212]	; (8000b08 <HAL_UART_MspInit+0x238>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d15c      	bne.n	8000af0 <HAL_UART_MspInit+0x220>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a36:	4b31      	ldr	r3, [pc, #196]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	02c9      	lsls	r1, r1, #11
 8000a40:	430a      	orrs	r2, r1
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	02db      	lsls	r3, r3, #11
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b29      	ldr	r3, [pc, #164]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a58:	2104      	movs	r1, #4
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2204      	movs	r2, #4
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a70:	2101      	movs	r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <HAL_UART_MspInit+0x22c>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a82:	2144      	movs	r1, #68	; 0x44
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	000c      	movs	r4, r1
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2202      	movs	r2, #2
 8000a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_UART_MspInit+0x230>)
 8000aaa:	0019      	movs	r1, r3
 8000aac:	0010      	movs	r0, r2
 8000aae:	f000 faed 	bl	800108c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ab2:	0021      	movs	r1, r4
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2220      	movs	r2, #32
 8000ab8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2204      	movs	r2, #4
 8000ad0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	187a      	adds	r2, r7, r1
 8000ad4:	23a0      	movs	r3, #160	; 0xa0
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 fad6 	bl	800108c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	201d      	movs	r0, #29
 8000ae6:	f000 f9d3 	bl	8000e90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000aea:	201d      	movs	r0, #29
 8000aec:	f000 f9e5 	bl	8000eba <HAL_NVIC_EnableIRQ>
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b017      	add	sp, #92	; 0x5c
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	40013800 	.word	0x40013800
 8000afc:	40021000 	.word	0x40021000
 8000b00:	50000800 	.word	0x50000800
 8000b04:	40004400 	.word	0x40004400
 8000b08:	40004800 	.word	0x40004800

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <NMI_Handler+0x4>

08000b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <HardFault_Handler+0x4>

08000b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 f8c2 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <USART1_IRQHandler+0x14>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f001 fb92 	bl	800226c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000028 	.word	0x20000028

08000b54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b58:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <USART2_IRQHandler+0x14>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f001 fb86 	bl	800226c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	200000bc 	.word	0x200000bc

08000b6c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <USART3_4_IRQHandler+0x14>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fb7a 	bl	800226c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	20000150 	.word	0x20000150

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b94:	f7ff fff6 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b9a:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	; (8000bd4 <LoopForever+0xe>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bb0:	4c0a      	ldr	r4, [pc, #40]	; (8000bdc <LoopForever+0x16>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bbe:	f003 fa43 	bl	8004048 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000bc2:	f7ff fc7b 	bl	80004bc <main>

08000bc6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bc6:	e7fe      	b.n	8000bc6 <LoopForever>
  ldr   r0, =_estack
 8000bc8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd4:	08004138 	.word	0x08004138
  ldr r2, =_sbss
 8000bd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bdc:	200004f0 	.word	0x200004f0

08000be0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x3c>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Init+0x3c>)
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	0049      	lsls	r1, r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f810 	bl	8000c24 <HAL_InitTick>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c08:	1dfb      	adds	r3, r7, #7
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e001      	b.n	8000c14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fe3a 	bl	8000888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <HAL_InitTick+0x88>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d02b      	beq.n	8000c94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <HAL_InitTick+0x8c>)
 8000c3e:	681c      	ldr	r4, [r3, #0]
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <HAL_InitTick+0x88>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	0019      	movs	r1, r3
 8000c46:	23fa      	movs	r3, #250	; 0xfa
 8000c48:	0098      	lsls	r0, r3, #2
 8000c4a:	f7ff fa59 	bl	8000100 <__udivsi3>
 8000c4e:	0003      	movs	r3, r0
 8000c50:	0019      	movs	r1, r3
 8000c52:	0020      	movs	r0, r4
 8000c54:	f7ff fa54 	bl	8000100 <__udivsi3>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 f93d 	bl	8000eda <HAL_SYSTICK_Config>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d112      	bne.n	8000c8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d80a      	bhi.n	8000c80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	425b      	negs	r3, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 f90c 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_InitTick+0x90>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e00d      	b.n	8000c9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2201      	movs	r2, #1
 8000c86:	701a      	strb	r2, [r3, #0]
 8000c88:	e008      	b.n	8000c9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
 8000c92:	e003      	b.n	8000c9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	781b      	ldrb	r3, [r3, #0]
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b005      	add	sp, #20
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <HAL_IncTick+0x1c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	001a      	movs	r2, r3
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	18d2      	adds	r2, r2, r3
 8000cc8:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	200004ec 	.word	0x200004ec

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b02      	ldr	r3, [pc, #8]	; (8000cec <HAL_GetTick+0x10>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	200004ec 	.word	0x200004ec

08000cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cf8:	f7ff fff0 	bl	8000cdc <HAL_GetTick>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3301      	adds	r3, #1
 8000d08:	d005      	beq.n	8000d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	; (8000d34 <HAL_Delay+0x44>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	001a      	movs	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	189b      	adds	r3, r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	f7ff ffe0 	bl	8000cdc <HAL_GetTick>
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d8f7      	bhi.n	8000d18 <HAL_Delay+0x28>
  {
  }
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b004      	add	sp, #16
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	20000008 	.word	0x20000008

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	0002      	movs	r2, r0
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	1dfb      	adds	r3, r7, #7
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4a:	d809      	bhi.n	8000d60 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4c:	1dfb      	adds	r3, r7, #7
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	001a      	movs	r2, r3
 8000d52:	231f      	movs	r3, #31
 8000d54:	401a      	ands	r2, r3
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_EnableIRQ+0x30>)
 8000d58:	2101      	movs	r1, #1
 8000d5a:	4091      	lsls	r1, r2
 8000d5c:	000a      	movs	r2, r1
 8000d5e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	0002      	movs	r2, r0
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b25b      	sxtb	r3, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f7ff ff33 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f7ff ffaf 	bl	8000e48 <SysTick_Config>
 8000eea:	0003      	movs	r3, r0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e050      	b.n	8000fa8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2225      	movs	r2, #37	; 0x25
 8000f0a:	5c9b      	ldrb	r3, [r3, r2]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d008      	beq.n	8000f24 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2204      	movs	r2, #4
 8000f16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2224      	movs	r2, #36	; 0x24
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e041      	b.n	8000fa8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	210e      	movs	r1, #14
 8000f30:	438a      	bics	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	491c      	ldr	r1, [pc, #112]	; (8000fb0 <HAL_DMA_Abort+0xbc>)
 8000f40:	400a      	ands	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2101      	movs	r1, #1
 8000f50:	438a      	bics	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_DMA_Abort+0xc0>)
 8000f56:	6859      	ldr	r1, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	221c      	movs	r2, #28
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2201      	movs	r2, #1
 8000f62:	409a      	lsls	r2, r3
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_DMA_Abort+0xc0>)
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f72:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00c      	beq.n	8000f96 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f86:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <HAL_DMA_Abort+0xbc>)
 8000f88:	400a      	ands	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f94:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2225      	movs	r2, #37	; 0x25
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2224      	movs	r2, #36	; 0x24
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	0018      	movs	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	b002      	add	sp, #8
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	fffffeff 	.word	0xfffffeff
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc0:	210f      	movs	r1, #15
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2225      	movs	r2, #37	; 0x25
 8000fcc:	5c9b      	ldrb	r3, [r3, r2]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d006      	beq.n	8000fe2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2201      	movs	r2, #1
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e049      	b.n	8001076 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	210e      	movs	r1, #14
 8000fee:	438a      	bics	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	438a      	bics	r2, r1
 8001000:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100c:	491d      	ldr	r1, [pc, #116]	; (8001084 <HAL_DMA_Abort_IT+0xcc>)
 800100e:	400a      	ands	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <HAL_DMA_Abort_IT+0xd0>)
 8001014:	6859      	ldr	r1, [r3, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	221c      	movs	r2, #28
 800101c:	4013      	ands	r3, r2
 800101e:	2201      	movs	r2, #1
 8001020:	409a      	lsls	r2, r3
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_DMA_Abort_IT+0xd0>)
 8001024:	430a      	orrs	r2, r1
 8001026:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001030:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001044:	490f      	ldr	r1, [pc, #60]	; (8001084 <HAL_DMA_Abort_IT+0xcc>)
 8001046:	400a      	ands	r2, r1
 8001048:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001052:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2225      	movs	r2, #37	; 0x25
 8001058:	2101      	movs	r1, #1
 800105a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	0010      	movs	r0, r2
 8001074:	4798      	blx	r3
    }
  }
  return status;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b004      	add	sp, #16
 8001082:	bd80      	pop	{r7, pc}
 8001084:	fffffeff 	.word	0xfffffeff
 8001088:	40020000 	.word	0x40020000

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	e147      	b.n	800132c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4091      	lsls	r1, r2
 80010a6:	000a      	movs	r2, r1
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <HAL_GPIO_Init+0x28>
 80010b2:	e138      	b.n	8001326 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d005      	beq.n	80010cc <HAL_GPIO_Init+0x40>
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2203      	movs	r2, #3
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d130      	bne.n	800112e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	43da      	mvns	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68da      	ldr	r2, [r3, #12]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	0013      	movs	r3, r2
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001102:	2201      	movs	r2, #1
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	2201      	movs	r2, #1
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2203      	movs	r2, #3
 8001134:	4013      	ands	r3, r2
 8001136:	2b03      	cmp	r3, #3
 8001138:	d017      	beq.n	800116a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	2203      	movs	r2, #3
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	0013      	movs	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2203      	movs	r2, #3
 8001170:	4013      	ands	r3, r2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	58d3      	ldr	r3, [r2, r3]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2207      	movs	r2, #7
 8001188:	4013      	ands	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	409a      	lsls	r2, r3
 8001190:	0013      	movs	r3, r2
 8001192:	43da      	mvns	r2, r3
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2107      	movs	r1, #7
 80011a2:	400b      	ands	r3, r1
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	0092      	lsls	r2, r2, #2
 80011ba:	6939      	ldr	r1, [r7, #16]
 80011bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2203      	movs	r2, #3
 80011dc:	401a      	ands	r2, r3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	23c0      	movs	r3, #192	; 0xc0
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d100      	bne.n	8001200 <HAL_GPIO_Init+0x174>
 80011fe:	e092      	b.n	8001326 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001200:	4a50      	ldr	r2, [pc, #320]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3318      	adds	r3, #24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	589b      	ldr	r3, [r3, r2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2203      	movs	r2, #3
 8001212:	4013      	ands	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	220f      	movs	r2, #15
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	43da      	mvns	r2, r3
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	05db      	lsls	r3, r3, #23
 800122a:	429a      	cmp	r2, r3
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1ca>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a45      	ldr	r2, [pc, #276]	; (8001348 <HAL_GPIO_Init+0x2bc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1c6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a44      	ldr	r2, [pc, #272]	; (800134c <HAL_GPIO_Init+0x2c0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1c2>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a43      	ldr	r2, [pc, #268]	; (8001350 <HAL_GPIO_Init+0x2c4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1be>
 8001246:	2303      	movs	r3, #3
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x1cc>
 800124a:	2305      	movs	r3, #5
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x1cc>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x1cc>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x1cc>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	2103      	movs	r1, #3
 800125c:	400a      	ands	r2, r1
 800125e:	00d2      	lsls	r2, r2, #3
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001268:	4936      	ldr	r1, [pc, #216]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3318      	adds	r3, #24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	2380      	movs	r3, #128	; 0x80
 800128c:	035b      	lsls	r3, r3, #13
 800128e:	4013      	ands	r3, r2
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	039b      	lsls	r3, r3, #14
 80012b8:	4013      	ands	r3, r2
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012ca:	4a1e      	ldr	r2, [pc, #120]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 80012cc:	2384      	movs	r3, #132	; 0x84
 80012ce:	58d3      	ldr	r3, [r2, r3]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43da      	mvns	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	029b      	lsls	r3, r3, #10
 80012e4:	4013      	ands	r3, r2
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f0:	4914      	ldr	r1, [pc, #80]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 80012f2:	2284      	movs	r2, #132	; 0x84
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	58d3      	ldr	r3, [r2, r3]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43da      	mvns	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	4013      	ands	r3, r2
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800131e:	4909      	ldr	r1, [pc, #36]	; (8001344 <HAL_GPIO_Init+0x2b8>)
 8001320:	2280      	movs	r2, #128	; 0x80
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	3301      	adds	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	40da      	lsrs	r2, r3
 8001334:	1e13      	subs	r3, r2, #0
 8001336:	d000      	beq.n	800133a <HAL_GPIO_Init+0x2ae>
 8001338:	e6b0      	b.n	800109c <HAL_GPIO_Init+0x10>
  }
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b006      	add	sp, #24
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021800 	.word	0x40021800
 8001348:	50000400 	.word	0x50000400
 800134c:	50000800 	.word	0x50000800
 8001350:	50000c00 	.word	0x50000c00

08001354 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001362:	4013      	ands	r3, r2
 8001364:	0019      	movs	r1, r3
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	430a      	orrs	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	429a      	cmp	r2, r3
 8001376:	d11f      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001378:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	0013      	movs	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	189b      	adds	r3, r3, r2
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4912      	ldr	r1, [pc, #72]	; (80013d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001386:	0018      	movs	r0, r3
 8001388:	f7fe feba 	bl	8000100 <__udivsi3>
 800138c:	0003      	movs	r3, r0
 800138e:	3301      	adds	r3, #1
 8001390:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001392:	e008      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	3b01      	subs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	e001      	b.n	80013a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e009      	b.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	401a      	ands	r2, r3
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d0ed      	beq.n	8001394 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b004      	add	sp, #16
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	40007000 	.word	0x40007000
 80013c8:	fffff9ff 	.word	0xfffff9ff
 80013cc:	20000000 	.word	0x20000000
 80013d0:	000f4240 	.word	0x000f4240

080013d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	23e0      	movs	r3, #224	; 0xe0
 80013de:	01db      	lsls	r3, r3, #7
 80013e0:	4013      	ands	r3, r2
}
 80013e2:	0018      	movs	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e2f3      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	d100      	bne.n	800140a <HAL_RCC_OscConfig+0x1e>
 8001408:	e07c      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800140a:	4bc3      	ldr	r3, [pc, #780]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2238      	movs	r2, #56	; 0x38
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001414:	4bc0      	ldr	r3, [pc, #768]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2203      	movs	r2, #3
 800141a:	4013      	ands	r3, r2
 800141c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d102      	bne.n	800142a <HAL_RCC_OscConfig+0x3e>
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2b03      	cmp	r3, #3
 8001428:	d002      	beq.n	8001430 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d10b      	bne.n	8001448 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d062      	beq.n	8001502 <HAL_RCC_OscConfig+0x116>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d15e      	bne.n	8001502 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e2ce      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x78>
 8001454:	4bb0      	ldr	r3, [pc, #704]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4baf      	ldr	r3, [pc, #700]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0249      	lsls	r1, r1, #9
 800145e:	430a      	orrs	r2, r1
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	e020      	b.n	80014a6 <HAL_RCC_OscConfig+0xba>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	23a0      	movs	r3, #160	; 0xa0
 800146a:	02db      	lsls	r3, r3, #11
 800146c:	429a      	cmp	r2, r3
 800146e:	d10e      	bne.n	800148e <HAL_RCC_OscConfig+0xa2>
 8001470:	4ba9      	ldr	r3, [pc, #676]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4ba8      	ldr	r3, [pc, #672]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	02c9      	lsls	r1, r1, #11
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	4ba6      	ldr	r3, [pc, #664]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4ba5      	ldr	r3, [pc, #660]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0249      	lsls	r1, r1, #9
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0xba>
 800148e:	4ba2      	ldr	r3, [pc, #648]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	4ba1      	ldr	r3, [pc, #644]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001494:	49a1      	ldr	r1, [pc, #644]	; (800171c <HAL_RCC_OscConfig+0x330>)
 8001496:	400a      	ands	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	4b9f      	ldr	r3, [pc, #636]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b9e      	ldr	r3, [pc, #632]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014a0:	499f      	ldr	r1, [pc, #636]	; (8001720 <HAL_RCC_OscConfig+0x334>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d014      	beq.n	80014d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fc15 	bl	8000cdc <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc10 	bl	8000cdc <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e28d      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	4b93      	ldr	r3, [pc, #588]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	029b      	lsls	r3, r3, #10
 80014d2:	4013      	ands	r3, r2
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xcc>
 80014d6:	e015      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fc00 	bl	8000cdc <HAL_GetTick>
 80014dc:	0003      	movs	r3, r0
 80014de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e2:	f7ff fbfb 	bl	8000cdc <HAL_GetTick>
 80014e6:	0002      	movs	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e278      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0xf6>
 8001500:	e000      	b.n	8001504 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001502:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2202      	movs	r2, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d100      	bne.n	8001510 <HAL_RCC_OscConfig+0x124>
 800150e:	e099      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001510:	4b81      	ldr	r3, [pc, #516]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2238      	movs	r2, #56	; 0x38
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b10      	cmp	r3, #16
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x144>
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d002      	beq.n	8001536 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d135      	bne.n	80015a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001536:	4b78      	ldr	r3, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4013      	ands	r3, r2
 8001540:	d005      	beq.n	800154e <HAL_RCC_OscConfig+0x162>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e24b      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154e:	4b72      	ldr	r3, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a74      	ldr	r2, [pc, #464]	; (8001724 <HAL_RCC_OscConfig+0x338>)
 8001554:	4013      	ands	r3, r2
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d112      	bne.n	8001590 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800156a:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x33c>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	4b67      	ldr	r3, [pc, #412]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800157e:	4b66      	ldr	r3, [pc, #408]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0adb      	lsrs	r3, r3, #11
 8001584:	2207      	movs	r2, #7
 8001586:	4013      	ands	r3, r2
 8001588:	4a68      	ldr	r2, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x340>)
 800158a:	40da      	lsrs	r2, r3
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x344>)
 800158e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001590:	4b68      	ldr	r3, [pc, #416]	; (8001734 <HAL_RCC_OscConfig+0x348>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fb45 	bl	8000c24 <HAL_InitTick>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d051      	beq.n	8001642 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e221      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d030      	beq.n	800160c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015aa:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x33c>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	0019      	movs	r1, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691a      	ldr	r2, [r3, #16]
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b55      	ldr	r3, [pc, #340]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fb86 	bl	8000cdc <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fb81 	bl	8000cdc <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1fe      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e8:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <HAL_RCC_OscConfig+0x338>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	021a      	lsls	r2, r3, #8
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001606:	430a      	orrs	r2, r1
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	e01b      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800160c:	4b42      	ldr	r3, [pc, #264]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001612:	4949      	ldr	r1, [pc, #292]	; (8001738 <HAL_RCC_OscConfig+0x34c>)
 8001614:	400a      	ands	r2, r1
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fb60 	bl	8000cdc <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fb5b 	bl	8000cdc <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e1d8      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4013      	ands	r3, r2
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x236>
 8001640:	e000      	b.n	8001644 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001642:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2208      	movs	r2, #8
 800164a:	4013      	ands	r3, r2
 800164c:	d047      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2238      	movs	r2, #56	; 0x38
 8001654:	4013      	ands	r3, r2
 8001656:	2b18      	cmp	r3, #24
 8001658:	d10a      	bne.n	8001670 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d03c      	beq.n	80016de <HAL_RCC_OscConfig+0x2f2>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d138      	bne.n	80016de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e1ba      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d019      	beq.n	80016ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001678:	4b27      	ldr	r3, [pc, #156]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800167a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 800167e:	2101      	movs	r1, #1
 8001680:	430a      	orrs	r2, r1
 8001682:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fb2a 	bl	8000cdc <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168e:	f7ff fb25 	bl	8000cdc <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e1a2      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a0:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a4:	2202      	movs	r2, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d0f1      	beq.n	800168e <HAL_RCC_OscConfig+0x2a2>
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ac:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fb10 	bl	8000cdc <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fb0b 	bl	8000cdc <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e188      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x2fe>
 80016e8:	e0c6      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	231f      	movs	r3, #31
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2238      	movs	r2, #56	; 0x38
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b20      	cmp	r3, #32
 80016fc:	d11e      	bne.n	800173c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016fe:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x32c>)
 8001700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001702:	2202      	movs	r2, #2
 8001704:	4013      	ands	r3, r2
 8001706:	d100      	bne.n	800170a <HAL_RCC_OscConfig+0x31e>
 8001708:	e0b6      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d000      	beq.n	8001714 <HAL_RCC_OscConfig+0x328>
 8001712:	e0b1      	b.n	8001878 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e166      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
 8001718:	40021000 	.word	0x40021000
 800171c:	fffeffff 	.word	0xfffeffff
 8001720:	fffbffff 	.word	0xfffbffff
 8001724:	ffff80ff 	.word	0xffff80ff
 8001728:	ffffc7ff 	.word	0xffffc7ff
 800172c:	00f42400 	.word	0x00f42400
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800173c:	4bac      	ldr	r3, [pc, #688]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800173e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001740:	2380      	movs	r3, #128	; 0x80
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	4013      	ands	r3, r2
 8001746:	d101      	bne.n	800174c <HAL_RCC_OscConfig+0x360>
 8001748:	2301      	movs	r3, #1
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x362>
 800174c:	2300      	movs	r3, #0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d011      	beq.n	8001776 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4ba7      	ldr	r3, [pc, #668]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001756:	4ba6      	ldr	r3, [pc, #664]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001758:	2180      	movs	r1, #128	; 0x80
 800175a:	0549      	lsls	r1, r1, #21
 800175c:	430a      	orrs	r2, r1
 800175e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001760:	4ba3      	ldr	r3, [pc, #652]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001762:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	055b      	lsls	r3, r3, #21
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800176e:	231f      	movs	r3, #31
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001776:	4b9f      	ldr	r3, [pc, #636]	; (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4013      	ands	r3, r2
 8001780:	d11a      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001782:	4b9c      	ldr	r3, [pc, #624]	; (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b9b      	ldr	r3, [pc, #620]	; (80019f4 <HAL_RCC_OscConfig+0x608>)
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	0049      	lsls	r1, r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001790:	f7ff faa4 	bl	8000cdc <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800179a:	f7ff fa9f 	bl	8000cdc <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e11c      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ac:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x608>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4013      	ands	r3, r2
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d106      	bne.n	80017ce <HAL_RCC_OscConfig+0x3e2>
 80017c0:	4b8b      	ldr	r3, [pc, #556]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80017cc:	e01c      	b.n	8001808 <HAL_RCC_OscConfig+0x41c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10c      	bne.n	80017f0 <HAL_RCC_OscConfig+0x404>
 80017d6:	4b86      	ldr	r3, [pc, #536]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017da:	4b85      	ldr	r3, [pc, #532]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017dc:	2104      	movs	r1, #4
 80017de:	430a      	orrs	r2, r1
 80017e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e6:	4b82      	ldr	r3, [pc, #520]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ee:	e00b      	b.n	8001808 <HAL_RCC_OscConfig+0x41c>
 80017f0:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017f4:	4b7e      	ldr	r3, [pc, #504]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017f6:	2101      	movs	r1, #1
 80017f8:	438a      	bics	r2, r1
 80017fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80017fc:	4b7c      	ldr	r3, [pc, #496]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80017fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001802:	2104      	movs	r1, #4
 8001804:	438a      	bics	r2, r1
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d014      	beq.n	800183a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fa64 	bl	8000cdc <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001818:	e009      	b.n	800182e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fa5f 	bl	8000cdc <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	4a74      	ldr	r2, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0x60c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e0db      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182e:	4b70      	ldr	r3, [pc, #448]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x42e>
 8001838:	e013      	b.n	8001862 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183a:	f7ff fa4f 	bl	8000cdc <HAL_GetTick>
 800183e:	0003      	movs	r3, r0
 8001840:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001842:	e009      	b.n	8001858 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f7ff fa4a 	bl	8000cdc <HAL_GetTick>
 8001848:	0002      	movs	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x60c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e0c6      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	4b65      	ldr	r3, [pc, #404]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001862:	231f      	movs	r3, #31
 8001864:	18fb      	adds	r3, r7, r3
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800186c:	4b60      	ldr	r3, [pc, #384]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800186e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001870:	4b5f      	ldr	r3, [pc, #380]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001872:	4962      	ldr	r1, [pc, #392]	; (80019fc <HAL_RCC_OscConfig+0x610>)
 8001874:	400a      	ands	r2, r1
 8001876:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x496>
 8001880:	e0b0      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001882:	4b5b      	ldr	r3, [pc, #364]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2238      	movs	r2, #56	; 0x38
 8001888:	4013      	ands	r3, r2
 800188a:	2b10      	cmp	r3, #16
 800188c:	d100      	bne.n	8001890 <HAL_RCC_OscConfig+0x4a4>
 800188e:	e078      	b.n	8001982 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d153      	bne.n	8001940 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b55      	ldr	r3, [pc, #340]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b54      	ldr	r3, [pc, #336]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800189e:	4958      	ldr	r1, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x614>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fa1a 	bl	8000cdc <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fa15 	bl	8000cdc <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e092      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c0:	4b4b      	ldr	r3, [pc, #300]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	4a4c      	ldr	r2, [pc, #304]	; (8001a04 <HAL_RCC_OscConfig+0x618>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	0019      	movs	r1, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1a      	ldr	r2, [r3, #32]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	021b      	lsls	r3, r3, #8
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	431a      	orrs	r2, r3
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b3d      	ldr	r3, [pc, #244]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b3c      	ldr	r3, [pc, #240]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001900:	2180      	movs	r1, #128	; 0x80
 8001902:	0449      	lsls	r1, r1, #17
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001908:	4b39      	ldr	r3, [pc, #228]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800190e:	2180      	movs	r1, #128	; 0x80
 8001910:	0549      	lsls	r1, r1, #21
 8001912:	430a      	orrs	r2, r1
 8001914:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff f9e1 	bl	8000cdc <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f9dc 	bl	8000cdc <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e059      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	049b      	lsls	r3, r3, #18
 800193a:	4013      	ands	r3, r2
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x534>
 800193e:	e051      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001946:	492e      	ldr	r1, [pc, #184]	; (8001a00 <HAL_RCC_OscConfig+0x614>)
 8001948:	400a      	ands	r2, r1
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f9c6 	bl	8000cdc <HAL_GetTick>
 8001950:	0003      	movs	r3, r0
 8001952:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f9c1 	bl	8000cdc <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e03e      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	049b      	lsls	r3, r3, #18
 8001970:	4013      	ands	r3, r2
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001974:	4b1e      	ldr	r3, [pc, #120]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 800197a:	4923      	ldr	r1, [pc, #140]	; (8001a08 <HAL_RCC_OscConfig+0x61c>)
 800197c:	400a      	ands	r2, r1
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	e030      	b.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e02b      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800198e:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x604>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2203      	movs	r2, #3
 8001998:	401a      	ands	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d11e      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2270      	movs	r2, #112	; 0x70
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d117      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	23fe      	movs	r3, #254	; 0xfe
 80019b4:	01db      	lsls	r3, r3, #7
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019bc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10e      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	23f8      	movs	r3, #248	; 0xf8
 80019c6:	039b      	lsls	r3, r3, #14
 80019c8:	401a      	ands	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d106      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	0f5b      	lsrs	r3, r3, #29
 80019d6:	075a      	lsls	r2, r3, #29
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b008      	add	sp, #32
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	00001388 	.word	0x00001388
 80019fc:	efffffff 	.word	0xefffffff
 8001a00:	feffffff 	.word	0xfeffffff
 8001a04:	1fc1808c 	.word	0x1fc1808c
 8001a08:	effefffc 	.word	0xeffefffc

08001a0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0e9      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2207      	movs	r2, #7
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d91e      	bls.n	8001a6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2207      	movs	r2, #7
 8001a34:	4393      	bics	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a40:	f7ff f94c 	bl	8000cdc <HAL_GetTick>
 8001a44:	0003      	movs	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4a:	f7ff f947 	bl	8000cdc <HAL_GetTick>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0ca      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a5e:	4b67      	ldr	r3, [pc, #412]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ee      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2202      	movs	r2, #2
 8001a72:	4013      	ands	r3, r2
 8001a74:	d015      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d006      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a80:	4b60      	ldr	r3, [pc, #384]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	4b5f      	ldr	r3, [pc, #380]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a86:	21e0      	movs	r1, #224	; 0xe0
 8001a88:	01c9      	lsls	r1, r1, #7
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	4a5d      	ldr	r2, [pc, #372]	; (8001c08 <HAL_RCC_ClockConfig+0x1fc>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d057      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	029b      	lsls	r3, r3, #10
 8001abc:	4013      	ands	r3, r2
 8001abe:	d12b      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e097      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001acc:	4b4d      	ldr	r3, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	049b      	lsls	r3, r3, #18
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d11f      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e08b      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae4:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	4013      	ands	r3, r2
 8001aee:	d113      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e07f      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b00:	2202      	movs	r2, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e074      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0a:	4b3e      	ldr	r3, [pc, #248]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e06d      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4393      	bics	r3, r2
 8001b20:	0019      	movs	r1, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685a      	ldr	r2, [r3, #4]
 8001b26:	4b37      	ldr	r3, [pc, #220]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b2c:	f7ff f8d6 	bl	8000cdc <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b34:	e009      	b.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b36:	f7ff f8d1 	bl	8000cdc <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e054      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	401a      	ands	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d1ec      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d21e      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4393      	bics	r3, r2
 8001b72:	0019      	movs	r1, r3
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b7c:	f7ff f8ae 	bl	8000cdc <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b84:	e009      	b.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b86:	f7ff f8a9 	bl	8000cdc <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_RCC_ClockConfig+0x1f4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e02c      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b9a:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2207      	movs	r2, #7
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1ee      	bne.n	8001b86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2204      	movs	r2, #4
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <HAL_RCC_ClockConfig+0x200>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001bc6:	f000 f829 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8001bca:	0001      	movs	r1, r0
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_ClockConfig+0x1f8>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <HAL_RCC_ClockConfig+0x204>)
 8001bd8:	0092      	lsls	r2, r2, #2
 8001bda:	58d3      	ldr	r3, [r2, r3]
 8001bdc:	221f      	movs	r2, #31
 8001bde:	4013      	ands	r3, r2
 8001be0:	000a      	movs	r2, r1
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x208>)
 8001be6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_ClockConfig+0x20c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff f819 	bl	8000c24 <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
}
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b004      	add	sp, #16
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40022000 	.word	0x40022000
 8001c00:	00001388 	.word	0x00001388
 8001c04:	40021000 	.word	0x40021000
 8001c08:	fffff0ff 	.word	0xfffff0ff
 8001c0c:	ffff8fff 	.word	0xffff8fff
 8001c10:	080040a8 	.word	0x080040a8
 8001c14:	20000000 	.word	0x20000000
 8001c18:	20000004 	.word	0x20000004

08001c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2238      	movs	r2, #56	; 0x38
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d10f      	bne.n	8001c4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c2c:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0adb      	lsrs	r3, r3, #11
 8001c32:	2207      	movs	r2, #7
 8001c34:	4013      	ands	r3, r2
 8001c36:	2201      	movs	r2, #1
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	0013      	movs	r3, r2
 8001c3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c3e:	6839      	ldr	r1, [r7, #0]
 8001c40:	4835      	ldr	r0, [pc, #212]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c42:	f7fe fa5d 	bl	8000100 <__udivsi3>
 8001c46:	0003      	movs	r3, r0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	e05d      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4c:	4b31      	ldr	r3, [pc, #196]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2238      	movs	r2, #56	; 0x38
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	e054      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2238      	movs	r2, #56	; 0x38
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b10      	cmp	r3, #16
 8001c68:	d138      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c74:	4b27      	ldr	r3, [pc, #156]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	3301      	adds	r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d10d      	bne.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	4824      	ldr	r0, [pc, #144]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001c8c:	f7fe fa38 	bl	8000100 <__udivsi3>
 8001c90:	0003      	movs	r3, r0
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	227f      	movs	r2, #127	; 0x7f
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	434b      	muls	r3, r1
 8001ca0:	617b      	str	r3, [r7, #20]
        break;
 8001ca2:	e00d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	481c      	ldr	r0, [pc, #112]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ca8:	f7fe fa2a 	bl	8000100 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	; 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0f5b      	lsrs	r3, r3, #29
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	4013      	ands	r3, r2
 8001cca:	3301      	adds	r3, #1
 8001ccc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	6978      	ldr	r0, [r7, #20]
 8001cd2:	f7fe fa15 	bl	8000100 <__udivsi3>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e015      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2238      	movs	r2, #56	; 0x38
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d103      	bne.n	8001cf0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	021b      	lsls	r3, r3, #8
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00b      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2238      	movs	r2, #56	; 0x38
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b18      	cmp	r3, #24
 8001cfa:	d103      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001cfc:	23fa      	movs	r3, #250	; 0xfa
 8001cfe:	01db      	lsls	r3, r3, #7
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	b006      	add	sp, #24
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200

08001d20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	20000000 	.word	0x20000000

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b5b0      	push	{r4, r5, r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	f7ff fb49 	bl	80013d4 <LL_RCC_GetAPB1Prescaler>
 8001d42:	0003      	movs	r3, r0
 8001d44:	0b1a      	lsrs	r2, r3, #12
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d48:	0092      	lsls	r2, r2, #2
 8001d4a:	58d3      	ldr	r3, [r2, r3]
 8001d4c:	221f      	movs	r2, #31
 8001d4e:	4013      	ands	r3, r2
 8001d50:	40dc      	lsrs	r4, r3
 8001d52:	0023      	movs	r3, r4
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bdb0      	pop	{r4, r5, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	080040e8 	.word	0x080040e8

08001d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001d68:	2313      	movs	r3, #19
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d70:	2312      	movs	r3, #18
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001d84:	e0a3      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2011      	movs	r0, #17
 8001d88:	183b      	adds	r3, r7, r0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d8e:	4b86      	ldr	r3, [pc, #536]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	055b      	lsls	r3, r3, #21
 8001d96:	4013      	ands	r3, r2
 8001d98:	d110      	bne.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4b83      	ldr	r3, [pc, #524]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9e:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	430a      	orrs	r2, r1
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da8:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	183b      	adds	r3, r7, r0
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dbc:	4b7b      	ldr	r3, [pc, #492]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b7a      	ldr	r3, [pc, #488]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dc2:	2180      	movs	r1, #128	; 0x80
 8001dc4:	0049      	lsls	r1, r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dca:	f7fe ff87 	bl	8000cdc <HAL_GetTick>
 8001dce:	0003      	movs	r3, r0
 8001dd0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dd2:	e00b      	b.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7fe ff82 	bl	8000cdc <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d904      	bls.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001de2:	2313      	movs	r3, #19
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2203      	movs	r2, #3
 8001de8:	701a      	strb	r2, [r3, #0]
        break;
 8001dea:	e005      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dec:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0ed      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001df8:	2313      	movs	r3, #19
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d154      	bne.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e02:	4b69      	ldr	r3, [pc, #420]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d019      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d014      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	4a63      	ldr	r2, [pc, #396]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e28:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2c:	4b5e      	ldr	r3, [pc, #376]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e2e:	2180      	movs	r1, #128	; 0x80
 8001e30:	0249      	lsls	r1, r1, #9
 8001e32:	430a      	orrs	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3a:	4b5b      	ldr	r3, [pc, #364]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e3c:	495d      	ldr	r1, [pc, #372]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001e3e:	400a      	ands	r2, r1
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d016      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ff44 	bl	8000cdc <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e58:	e00c      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7fe ff3f 	bl	8000cdc <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4a54      	ldr	r2, [pc, #336]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d904      	bls.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001e6a:	2313      	movs	r3, #19
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2203      	movs	r2, #3
 8001e70:	701a      	strb	r2, [r3, #0]
            break;
 8001e72:	e004      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e74:	4b4c      	ldr	r3, [pc, #304]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d0ed      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001e7e:	2313      	movs	r3, #19
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10a      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e88:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8c:	4a48      	ldr	r2, [pc, #288]	; (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699a      	ldr	r2, [r3, #24]
 8001e96:	4b44      	ldr	r3, [pc, #272]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e9c:	e00c      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	2213      	movs	r2, #19
 8001ea4:	18ba      	adds	r2, r7, r2
 8001ea6:	7812      	ldrb	r2, [r2, #0]
 8001ea8:	701a      	strb	r2, [r3, #0]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eac:	2312      	movs	r3, #18
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2213      	movs	r2, #19
 8001eb2:	18ba      	adds	r2, r7, r2
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eb8:	2311      	movs	r3, #17
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d105      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ec6:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ec8:	493c      	ldr	r1, [pc, #240]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eca:	400a      	ands	r2, r1
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ed8:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	2203      	movs	r2, #3
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ef6:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	220c      	movs	r2, #12
 8001efc:	4393      	bics	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b28      	ldr	r3, [pc, #160]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f06:	430a      	orrs	r2, r1
 8001f08:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	4013      	ands	r3, r2
 8001f12:	d009      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f14:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	01db      	lsls	r3, r3, #7
 8001f30:	4013      	ands	r3, r2
 8001f32:	d015      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	0899      	lsrs	r1, r3, #2
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f42:	430a      	orrs	r2, r1
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695a      	ldr	r2, [r3, #20]
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	05db      	lsls	r3, r3, #23
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d106      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	0249      	lsls	r1, r1, #9
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	4013      	ands	r3, r2
 8001f6a:	d016      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	0019      	movs	r1, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f8c:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0249      	lsls	r1, r1, #9
 8001f96:	430a      	orrs	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f9a:	2312      	movs	r3, #18
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
}
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b006      	add	sp, #24
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	fffffcff 	.word	0xfffffcff
 8001fb4:	fffeffff 	.word	0xfffeffff
 8001fb8:	00001388 	.word	0x00001388
 8001fbc:	efffffff 	.word	0xefffffff
 8001fc0:	ffffcfff 	.word	0xffffcfff
 8001fc4:	ffff3fff 	.word	0xffff3fff

08001fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e046      	b.n	8002068 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2288      	movs	r2, #136	; 0x88
 8001fde:	589b      	ldr	r3, [r3, r2]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d107      	bne.n	8001ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2284      	movs	r2, #132	; 0x84
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7fe fc6e 	bl	80008d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2288      	movs	r2, #136	; 0x88
 8001ff8:	2124      	movs	r1, #36	; 0x24
 8001ffa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	438a      	bics	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 fe0e 	bl	8002c38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fc66 	bl	80028f0 <UART_SetConfig>
 8002024:	0003      	movs	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e01c      	b.n	8002068 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	490d      	ldr	r1, [pc, #52]	; (8002070 <HAL_UART_Init+0xa8>)
 800203a:	400a      	ands	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	212a      	movs	r1, #42	; 0x2a
 800204a:	438a      	bics	r2, r1
 800204c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2101      	movs	r1, #1
 800205a:	430a      	orrs	r2, r1
 800205c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	0018      	movs	r0, r3
 8002062:	f000 fe9d 	bl	8002da0 <UART_CheckIdleState>
 8002066:	0003      	movs	r3, r0
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b002      	add	sp, #8
 800206e:	bd80      	pop	{r7, pc}
 8002070:	ffffb7ff 	.word	0xffffb7ff

08002074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	; 0x28
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	1dbb      	adds	r3, r7, #6
 8002082:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2288      	movs	r2, #136	; 0x88
 8002088:	589b      	ldr	r3, [r3, r2]
 800208a:	2b20      	cmp	r3, #32
 800208c:	d000      	beq.n	8002090 <HAL_UART_Transmit+0x1c>
 800208e:	e090      	b.n	80021b2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_UART_Transmit+0x2a>
 8002096:	1dbb      	adds	r3, r7, #6
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e088      	b.n	80021b4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	2380      	movs	r3, #128	; 0x80
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d109      	bne.n	80020c2 <HAL_UART_Transmit+0x4e>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	d001      	beq.n	80020c2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e078      	b.n	80021b4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2290      	movs	r2, #144	; 0x90
 80020c6:	2100      	movs	r1, #0
 80020c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2288      	movs	r2, #136	; 0x88
 80020ce:	2121      	movs	r1, #33	; 0x21
 80020d0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020d2:	f7fe fe03 	bl	8000cdc <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1dba      	adds	r2, r7, #6
 80020de:	2154      	movs	r1, #84	; 0x54
 80020e0:	8812      	ldrh	r2, [r2, #0]
 80020e2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1dba      	adds	r2, r7, #6
 80020e8:	2156      	movs	r1, #86	; 0x56
 80020ea:	8812      	ldrh	r2, [r2, #0]
 80020ec:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d108      	bne.n	800210c <HAL_UART_Transmit+0x98>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d104      	bne.n	800210c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	e003      	b.n	8002114 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002114:	e030      	b.n	8002178 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	0013      	movs	r3, r2
 8002120:	2200      	movs	r2, #0
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	f000 fee6 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d005      	beq.n	8002138 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2288      	movs	r2, #136	; 0x88
 8002130:	2120      	movs	r1, #32
 8002132:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e03d      	b.n	80021b4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	001a      	movs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	05d2      	lsls	r2, r2, #23
 800214a:	0dd2      	lsrs	r2, r2, #23
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	3302      	adds	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
 8002154:	e007      	b.n	8002166 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	781a      	ldrb	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	3301      	adds	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2256      	movs	r2, #86	; 0x56
 800216a:	5a9b      	ldrh	r3, [r3, r2]
 800216c:	b29b      	uxth	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	b299      	uxth	r1, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2256      	movs	r2, #86	; 0x56
 8002176:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2256      	movs	r2, #86	; 0x56
 800217c:	5a9b      	ldrh	r3, [r3, r2]
 800217e:	b29b      	uxth	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1c8      	bne.n	8002116 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	0013      	movs	r3, r2
 800218e:	2200      	movs	r2, #0
 8002190:	2140      	movs	r1, #64	; 0x40
 8002192:	f000 feaf 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002196:	1e03      	subs	r3, r0, #0
 8002198:	d005      	beq.n	80021a6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2288      	movs	r2, #136	; 0x88
 800219e:	2120      	movs	r1, #32
 80021a0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e006      	b.n	80021b4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2288      	movs	r2, #136	; 0x88
 80021aa:	2120      	movs	r1, #32
 80021ac:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80021b2:	2302      	movs	r3, #2
  }
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b008      	add	sp, #32
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	1dbb      	adds	r3, r7, #6
 80021c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	228c      	movs	r2, #140	; 0x8c
 80021ce:	589b      	ldr	r3, [r3, r2]
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d145      	bne.n	8002260 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_UART_Receive_IT+0x26>
 80021da:	1dbb      	adds	r3, r7, #6
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e03d      	b.n	8002262 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d109      	bne.n	8002206 <HAL_UART_Receive_IT+0x4a>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	d001      	beq.n	8002206 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e02d      	b.n	8002262 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	041b      	lsls	r3, r3, #16
 8002216:	4013      	ands	r3, r2
 8002218:	d019      	beq.n	800224e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221a:	f3ef 8310 	mrs	r3, PRIMASK
 800221e:	613b      	str	r3, [r7, #16]
  return(result);
 8002220:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	2301      	movs	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f383 8810 	msr	PRIMASK, r3
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	04c9      	lsls	r1, r1, #19
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f383 8810 	msr	PRIMASK, r3
}
 800224c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800224e:	1dbb      	adds	r3, r7, #6
 8002250:	881a      	ldrh	r2, [r3, #0]
 8002252:	68b9      	ldr	r1, [r7, #8]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	0018      	movs	r0, r3
 8002258:	f000 febc 	bl	8002fd4 <UART_Start_Receive_IT>
 800225c:	0003      	movs	r3, r0
 800225e:	e000      	b.n	8002262 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002260:	2302      	movs	r3, #2
  }
}
 8002262:	0018      	movs	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	b008      	add	sp, #32
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b0aa      	sub	sp, #168	; 0xa8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	22a4      	movs	r2, #164	; 0xa4
 800227c:	18b9      	adds	r1, r7, r2
 800227e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	20a0      	movs	r0, #160	; 0xa0
 8002288:	1839      	adds	r1, r7, r0
 800228a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	249c      	movs	r4, #156	; 0x9c
 8002294:	1939      	adds	r1, r7, r4
 8002296:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002298:	0011      	movs	r1, r2
 800229a:	18bb      	adds	r3, r7, r2
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4aa2      	ldr	r2, [pc, #648]	; (8002528 <HAL_UART_IRQHandler+0x2bc>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	2298      	movs	r2, #152	; 0x98
 80022a4:	18bd      	adds	r5, r7, r2
 80022a6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80022a8:	18bb      	adds	r3, r7, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11a      	bne.n	80022e6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2220      	movs	r2, #32
 80022b6:	4013      	ands	r3, r2
 80022b8:	d015      	beq.n	80022e6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80022ba:	183b      	adds	r3, r7, r0
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2220      	movs	r2, #32
 80022c0:	4013      	ands	r3, r2
 80022c2:	d105      	bne.n	80022d0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80022c4:	193b      	adds	r3, r7, r4
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	055b      	lsls	r3, r3, #21
 80022cc:	4013      	ands	r3, r2
 80022ce:	d00a      	beq.n	80022e6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d100      	bne.n	80022da <HAL_UART_IRQHandler+0x6e>
 80022d8:	e2dc      	b.n	8002894 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	0010      	movs	r0, r2
 80022e2:	4798      	blx	r3
      }
      return;
 80022e4:	e2d6      	b.n	8002894 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022e6:	2398      	movs	r3, #152	; 0x98
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d100      	bne.n	80022f2 <HAL_UART_IRQHandler+0x86>
 80022f0:	e122      	b.n	8002538 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80022f2:	239c      	movs	r3, #156	; 0x9c
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a8c      	ldr	r2, [pc, #560]	; (800252c <HAL_UART_IRQHandler+0x2c0>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	d106      	bne.n	800230c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80022fe:	23a0      	movs	r3, #160	; 0xa0
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a8a      	ldr	r2, [pc, #552]	; (8002530 <HAL_UART_IRQHandler+0x2c4>)
 8002306:	4013      	ands	r3, r2
 8002308:	d100      	bne.n	800230c <HAL_UART_IRQHandler+0xa0>
 800230a:	e115      	b.n	8002538 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800230c:	23a4      	movs	r3, #164	; 0xa4
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2201      	movs	r2, #1
 8002314:	4013      	ands	r3, r2
 8002316:	d012      	beq.n	800233e <HAL_UART_IRQHandler+0xd2>
 8002318:	23a0      	movs	r3, #160	; 0xa0
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d00b      	beq.n	800233e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2290      	movs	r2, #144	; 0x90
 8002332:	589b      	ldr	r3, [r3, r2]
 8002334:	2201      	movs	r2, #1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2190      	movs	r1, #144	; 0x90
 800233c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800233e:	23a4      	movs	r3, #164	; 0xa4
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d011      	beq.n	800236e <HAL_UART_IRQHandler+0x102>
 800234a:	239c      	movs	r3, #156	; 0x9c
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	d00b      	beq.n	800236e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2202      	movs	r2, #2
 800235c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2290      	movs	r2, #144	; 0x90
 8002362:	589b      	ldr	r3, [r3, r2]
 8002364:	2204      	movs	r2, #4
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2190      	movs	r1, #144	; 0x90
 800236c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800236e:	23a4      	movs	r3, #164	; 0xa4
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2204      	movs	r2, #4
 8002376:	4013      	ands	r3, r2
 8002378:	d011      	beq.n	800239e <HAL_UART_IRQHandler+0x132>
 800237a:	239c      	movs	r3, #156	; 0x9c
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d00b      	beq.n	800239e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2204      	movs	r2, #4
 800238c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2290      	movs	r2, #144	; 0x90
 8002392:	589b      	ldr	r3, [r3, r2]
 8002394:	2202      	movs	r2, #2
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2190      	movs	r1, #144	; 0x90
 800239c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800239e:	23a4      	movs	r3, #164	; 0xa4
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2208      	movs	r2, #8
 80023a6:	4013      	ands	r3, r2
 80023a8:	d017      	beq.n	80023da <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80023aa:	23a0      	movs	r3, #160	; 0xa0
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2220      	movs	r2, #32
 80023b2:	4013      	ands	r3, r2
 80023b4:	d105      	bne.n	80023c2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80023b6:	239c      	movs	r3, #156	; 0x9c
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5b      	ldr	r2, [pc, #364]	; (800252c <HAL_UART_IRQHandler+0x2c0>)
 80023be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2208      	movs	r2, #8
 80023c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2290      	movs	r2, #144	; 0x90
 80023ce:	589b      	ldr	r3, [r3, r2]
 80023d0:	2208      	movs	r2, #8
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2190      	movs	r1, #144	; 0x90
 80023d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023da:	23a4      	movs	r3, #164	; 0xa4
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	2380      	movs	r3, #128	; 0x80
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d013      	beq.n	8002410 <HAL_UART_IRQHandler+0x1a4>
 80023e8:	23a0      	movs	r3, #160	; 0xa0
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	04db      	lsls	r3, r3, #19
 80023f2:	4013      	ands	r3, r2
 80023f4:	d00c      	beq.n	8002410 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	0112      	lsls	r2, r2, #4
 80023fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2290      	movs	r2, #144	; 0x90
 8002404:	589b      	ldr	r3, [r3, r2]
 8002406:	2220      	movs	r2, #32
 8002408:	431a      	orrs	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2190      	movs	r1, #144	; 0x90
 800240e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2290      	movs	r2, #144	; 0x90
 8002414:	589b      	ldr	r3, [r3, r2]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d100      	bne.n	800241c <HAL_UART_IRQHandler+0x1b0>
 800241a:	e23d      	b.n	8002898 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800241c:	23a4      	movs	r3, #164	; 0xa4
 800241e:	18fb      	adds	r3, r7, r3
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2220      	movs	r2, #32
 8002424:	4013      	ands	r3, r2
 8002426:	d015      	beq.n	8002454 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002428:	23a0      	movs	r3, #160	; 0xa0
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2220      	movs	r2, #32
 8002430:	4013      	ands	r3, r2
 8002432:	d106      	bne.n	8002442 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002434:	239c      	movs	r3, #156	; 0x9c
 8002436:	18fb      	adds	r3, r7, r3
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	055b      	lsls	r3, r3, #21
 800243e:	4013      	ands	r3, r2
 8002440:	d008      	beq.n	8002454 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	0010      	movs	r0, r2
 8002452:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2290      	movs	r2, #144	; 0x90
 8002458:	589b      	ldr	r3, [r3, r2]
 800245a:	2194      	movs	r1, #148	; 0x94
 800245c:	187a      	adds	r2, r7, r1
 800245e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	4013      	ands	r3, r2
 800246a:	2b40      	cmp	r3, #64	; 0x40
 800246c:	d004      	beq.n	8002478 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800246e:	187b      	adds	r3, r7, r1
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2228      	movs	r2, #40	; 0x28
 8002474:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002476:	d04c      	beq.n	8002512 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fece 	bl	800321c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2240      	movs	r2, #64	; 0x40
 8002488:	4013      	ands	r3, r2
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d13c      	bne.n	8002508 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800248e:	f3ef 8310 	mrs	r3, PRIMASK
 8002492:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	2090      	movs	r0, #144	; 0x90
 8002498:	183a      	adds	r2, r7, r0
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024a2:	f383 8810 	msr	PRIMASK, r3
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2140      	movs	r1, #64	; 0x40
 80024b4:	438a      	bics	r2, r1
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	183b      	adds	r3, r7, r0
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c0:	f383 8810 	msr	PRIMASK, r3
}
 80024c4:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	589b      	ldr	r3, [r3, r2]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2280      	movs	r2, #128	; 0x80
 80024d4:	589b      	ldr	r3, [r3, r2]
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <HAL_UART_IRQHandler+0x2c8>)
 80024d8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	; 0x80
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fd69 	bl	8000fb8 <HAL_DMA_Abort_IT>
 80024e6:	1e03      	subs	r3, r0, #0
 80024e8:	d01c      	beq.n	8002524 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	589b      	ldr	r3, [r3, r2]
 80024f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	5852      	ldr	r2, [r2, r1]
 80024f8:	0010      	movs	r0, r2
 80024fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024fc:	e012      	b.n	8002524 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 f9e1 	bl	80028c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002506:	e00d      	b.n	8002524 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 f9dc 	bl	80028c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002510:	e008      	b.n	8002524 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f9d7 	bl	80028c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2290      	movs	r2, #144	; 0x90
 800251e:	2100      	movs	r1, #0
 8002520:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002522:	e1b9      	b.n	8002898 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002524:	46c0      	nop			; (mov r8, r8)
    return;
 8002526:	e1b7      	b.n	8002898 <HAL_UART_IRQHandler+0x62c>
 8002528:	0000080f 	.word	0x0000080f
 800252c:	10000001 	.word	0x10000001
 8002530:	04000120 	.word	0x04000120
 8002534:	080032e9 	.word	0x080032e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d000      	beq.n	8002542 <HAL_UART_IRQHandler+0x2d6>
 8002540:	e13e      	b.n	80027c0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002542:	23a4      	movs	r3, #164	; 0xa4
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2210      	movs	r2, #16
 800254a:	4013      	ands	r3, r2
 800254c:	d100      	bne.n	8002550 <HAL_UART_IRQHandler+0x2e4>
 800254e:	e137      	b.n	80027c0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002550:	23a0      	movs	r3, #160	; 0xa0
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2210      	movs	r2, #16
 8002558:	4013      	ands	r3, r2
 800255a:	d100      	bne.n	800255e <HAL_UART_IRQHandler+0x2f2>
 800255c:	e130      	b.n	80027c0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2210      	movs	r2, #16
 8002564:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	4013      	ands	r3, r2
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d000      	beq.n	8002576 <HAL_UART_IRQHandler+0x30a>
 8002574:	e0a4      	b.n	80026c0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	589b      	ldr	r3, [r3, r2]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	217e      	movs	r1, #126	; 0x7e
 8002582:	187b      	adds	r3, r7, r1
 8002584:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002586:	187b      	adds	r3, r7, r1
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d100      	bne.n	8002590 <HAL_UART_IRQHandler+0x324>
 800258e:	e185      	b.n	800289c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	225c      	movs	r2, #92	; 0x5c
 8002594:	5a9b      	ldrh	r3, [r3, r2]
 8002596:	187a      	adds	r2, r7, r1
 8002598:	8812      	ldrh	r2, [r2, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d300      	bcc.n	80025a0 <HAL_UART_IRQHandler+0x334>
 800259e:	e17d      	b.n	800289c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	187a      	adds	r2, r7, r1
 80025a4:	215e      	movs	r1, #94	; 0x5e
 80025a6:	8812      	ldrh	r2, [r2, #0]
 80025a8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	589b      	ldr	r3, [r3, r2]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2220      	movs	r2, #32
 80025b6:	4013      	ands	r3, r2
 80025b8:	d170      	bne.n	800269c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ba:	f3ef 8310 	mrs	r3, PRIMASK
 80025be:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80025c4:	2301      	movs	r3, #1
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ca:	f383 8810 	msr	PRIMASK, r3
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	49b4      	ldr	r1, [pc, #720]	; (80028ac <HAL_UART_IRQHandler+0x640>)
 80025dc:	400a      	ands	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	f383 8810 	msr	PRIMASK, r3
}
 80025ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ec:	f3ef 8310 	mrs	r3, PRIMASK
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80025f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	677b      	str	r3, [r7, #116]	; 0x74
 80025f6:	2301      	movs	r3, #1
 80025f8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2101      	movs	r1, #1
 800260e:	438a      	bics	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002618:	f383 8810 	msr	PRIMASK, r3
}
 800261c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	673b      	str	r3, [r7, #112]	; 0x70
 8002628:	2301      	movs	r3, #1
 800262a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	438a      	bics	r2, r1
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002646:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	228c      	movs	r2, #140	; 0x8c
 8002654:	2120      	movs	r1, #32
 8002656:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265e:	f3ef 8310 	mrs	r3, PRIMASK
 8002662:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002664:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002666:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002668:	2301      	movs	r3, #1
 800266a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266e:	f383 8810 	msr	PRIMASK, r3
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2110      	movs	r1, #16
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002686:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800268a:	f383 8810 	msr	PRIMASK, r3
}
 800268e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	589b      	ldr	r3, [r3, r2]
 8002696:	0018      	movs	r0, r3
 8002698:	f7fe fc2c 	bl	8000ef4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	225c      	movs	r2, #92	; 0x5c
 80026a6:	5a9a      	ldrh	r2, [r3, r2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	215e      	movs	r1, #94	; 0x5e
 80026ac:	5a5b      	ldrh	r3, [r3, r1]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	0011      	movs	r1, r2
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f90d 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026be:	e0ed      	b.n	800289c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	225c      	movs	r2, #92	; 0x5c
 80026c4:	5a99      	ldrh	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	225e      	movs	r2, #94	; 0x5e
 80026ca:	5a9b      	ldrh	r3, [r3, r2]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	208e      	movs	r0, #142	; 0x8e
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	1a8a      	subs	r2, r1, r2
 80026d4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	225e      	movs	r2, #94	; 0x5e
 80026da:	5a9b      	ldrh	r3, [r3, r2]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <HAL_UART_IRQHandler+0x478>
 80026e2:	e0dd      	b.n	80028a0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80026e4:	183b      	adds	r3, r7, r0
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d100      	bne.n	80026ee <HAL_UART_IRQHandler+0x482>
 80026ec:	e0d8      	b.n	80028a0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ee:	f3ef 8310 	mrs	r3, PRIMASK
 80026f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026f4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80026f6:	2488      	movs	r4, #136	; 0x88
 80026f8:	193a      	adds	r2, r7, r4
 80026fa:	6013      	str	r3, [r2, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f383 8810 	msr	PRIMASK, r3
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4967      	ldr	r1, [pc, #412]	; (80028b0 <HAL_UART_IRQHandler+0x644>)
 8002714:	400a      	ands	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	193b      	adds	r3, r7, r4
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f383 8810 	msr	PRIMASK, r3
}
 8002724:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002726:	f3ef 8310 	mrs	r3, PRIMASK
 800272a:	61bb      	str	r3, [r7, #24]
  return(result);
 800272c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800272e:	2484      	movs	r4, #132	; 0x84
 8002730:	193a      	adds	r2, r7, r4
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	f383 8810 	msr	PRIMASK, r3
}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	495a      	ldr	r1, [pc, #360]	; (80028b4 <HAL_UART_IRQHandler+0x648>)
 800274c:	400a      	ands	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	193b      	adds	r3, r7, r4
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f383 8810 	msr	PRIMASK, r3
}
 800275c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	228c      	movs	r2, #140	; 0x8c
 8002762:	2120      	movs	r1, #32
 8002764:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002772:	f3ef 8310 	mrs	r3, PRIMASK
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800277a:	2480      	movs	r4, #128	; 0x80
 800277c:	193a      	adds	r2, r7, r4
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	2301      	movs	r3, #1
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	f383 8810 	msr	PRIMASK, r3
}
 800278a:	46c0      	nop			; (mov r8, r8)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2110      	movs	r1, #16
 8002798:	438a      	bics	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	193b      	adds	r3, r7, r4
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	f383 8810 	msr	PRIMASK, r3
}
 80027a8:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027b0:	183b      	adds	r3, r7, r0
 80027b2:	881a      	ldrh	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 f88d 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80027be:	e06f      	b.n	80028a0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80027c0:	23a4      	movs	r3, #164	; 0xa4
 80027c2:	18fb      	adds	r3, r7, r3
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	035b      	lsls	r3, r3, #13
 80027ca:	4013      	ands	r3, r2
 80027cc:	d010      	beq.n	80027f0 <HAL_UART_IRQHandler+0x584>
 80027ce:	239c      	movs	r3, #156	; 0x9c
 80027d0:	18fb      	adds	r3, r7, r3
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	03db      	lsls	r3, r3, #15
 80027d8:	4013      	ands	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2280      	movs	r2, #128	; 0x80
 80027e2:	0352      	lsls	r2, r2, #13
 80027e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	0018      	movs	r0, r3
 80027ea:	f001 fab5 	bl	8003d58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027ee:	e05a      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80027f0:	23a4      	movs	r3, #164	; 0xa4
 80027f2:	18fb      	adds	r3, r7, r3
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	4013      	ands	r3, r2
 80027fa:	d016      	beq.n	800282a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80027fc:	23a0      	movs	r3, #160	; 0xa0
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	4013      	ands	r3, r2
 8002806:	d106      	bne.n	8002816 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002808:	239c      	movs	r3, #156	; 0x9c
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	4013      	ands	r3, r2
 8002814:	d009      	beq.n	800282a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800281a:	2b00      	cmp	r3, #0
 800281c:	d042      	beq.n	80028a4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	0010      	movs	r0, r2
 8002826:	4798      	blx	r3
    }
    return;
 8002828:	e03c      	b.n	80028a4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800282a:	23a4      	movs	r3, #164	; 0xa4
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	4013      	ands	r3, r2
 8002834:	d00a      	beq.n	800284c <HAL_UART_IRQHandler+0x5e0>
 8002836:	23a0      	movs	r3, #160	; 0xa0
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	4013      	ands	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fd66 	bl	8003316 <UART_EndTransmit_IT>
    return;
 800284a:	e02c      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800284c:	23a4      	movs	r3, #164	; 0xa4
 800284e:	18fb      	adds	r3, r7, r3
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d00b      	beq.n	8002872 <HAL_UART_IRQHandler+0x606>
 800285a:	23a0      	movs	r3, #160	; 0xa0
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	05db      	lsls	r3, r3, #23
 8002864:	4013      	ands	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	0018      	movs	r0, r3
 800286c:	f001 fa84 	bl	8003d78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002870:	e019      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002872:	23a4      	movs	r3, #164	; 0xa4
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	045b      	lsls	r3, r3, #17
 800287c:	4013      	ands	r3, r2
 800287e:	d012      	beq.n	80028a6 <HAL_UART_IRQHandler+0x63a>
 8002880:	23a0      	movs	r3, #160	; 0xa0
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	da0d      	bge.n	80028a6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f001 fa6b 	bl	8003d68 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002892:	e008      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	e006      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002898:	46c0      	nop			; (mov r8, r8)
 800289a:	e004      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
      return;
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	e002      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
      return;
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	e000      	b.n	80028a6 <HAL_UART_IRQHandler+0x63a>
    return;
 80028a4:	46c0      	nop			; (mov r8, r8)
  }
}
 80028a6:	46bd      	mov	sp, r7
 80028a8:	b02a      	add	sp, #168	; 0xa8
 80028aa:	bdb0      	pop	{r4, r5, r7, pc}
 80028ac:	fffffeff 	.word	0xfffffeff
 80028b0:	fffffedf 	.word	0xfffffedf
 80028b4:	effffffe 	.word	0xeffffffe

080028b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	000a      	movs	r2, r1
 80028e2:	1cbb      	adds	r3, r7, #2
 80028e4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f8:	231a      	movs	r3, #26
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	4313      	orrs	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4abc      	ldr	r2, [pc, #752]	; (8002c10 <UART_SetConfig+0x320>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	430a      	orrs	r2, r1
 800292c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4ab7      	ldr	r2, [pc, #732]	; (8002c14 <UART_SetConfig+0x324>)
 8002936:	4013      	ands	r3, r2
 8002938:	0019      	movs	r1, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	4313      	orrs	r3, r2
 8002954:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4aae      	ldr	r2, [pc, #696]	; (8002c18 <UART_SetConfig+0x328>)
 800295e:	4013      	ands	r3, r2
 8002960:	0019      	movs	r1, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	430a      	orrs	r2, r1
 800296a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	220f      	movs	r2, #15
 8002974:	4393      	bics	r3, r2
 8002976:	0019      	movs	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4aa4      	ldr	r2, [pc, #656]	; (8002c1c <UART_SetConfig+0x32c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d127      	bne.n	80029de <UART_SetConfig+0xee>
 800298e:	4ba4      	ldr	r3, [pc, #656]	; (8002c20 <UART_SetConfig+0x330>)
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	2203      	movs	r2, #3
 8002994:	4013      	ands	r3, r2
 8002996:	2b03      	cmp	r3, #3
 8002998:	d017      	beq.n	80029ca <UART_SetConfig+0xda>
 800299a:	d81b      	bhi.n	80029d4 <UART_SetConfig+0xe4>
 800299c:	2b02      	cmp	r3, #2
 800299e:	d00a      	beq.n	80029b6 <UART_SetConfig+0xc6>
 80029a0:	d818      	bhi.n	80029d4 <UART_SetConfig+0xe4>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0xbc>
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d00a      	beq.n	80029c0 <UART_SetConfig+0xd0>
 80029aa:	e013      	b.n	80029d4 <UART_SetConfig+0xe4>
 80029ac:	231b      	movs	r3, #27
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	2200      	movs	r2, #0
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e058      	b.n	8002a68 <UART_SetConfig+0x178>
 80029b6:	231b      	movs	r3, #27
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	2202      	movs	r2, #2
 80029bc:	701a      	strb	r2, [r3, #0]
 80029be:	e053      	b.n	8002a68 <UART_SetConfig+0x178>
 80029c0:	231b      	movs	r3, #27
 80029c2:	18fb      	adds	r3, r7, r3
 80029c4:	2204      	movs	r2, #4
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e04e      	b.n	8002a68 <UART_SetConfig+0x178>
 80029ca:	231b      	movs	r3, #27
 80029cc:	18fb      	adds	r3, r7, r3
 80029ce:	2208      	movs	r2, #8
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e049      	b.n	8002a68 <UART_SetConfig+0x178>
 80029d4:	231b      	movs	r3, #27
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	2210      	movs	r2, #16
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e044      	b.n	8002a68 <UART_SetConfig+0x178>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a90      	ldr	r2, [pc, #576]	; (8002c24 <UART_SetConfig+0x334>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d127      	bne.n	8002a38 <UART_SetConfig+0x148>
 80029e8:	4b8d      	ldr	r3, [pc, #564]	; (8002c20 <UART_SetConfig+0x330>)
 80029ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ec:	220c      	movs	r2, #12
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d017      	beq.n	8002a24 <UART_SetConfig+0x134>
 80029f4:	d81b      	bhi.n	8002a2e <UART_SetConfig+0x13e>
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d00a      	beq.n	8002a10 <UART_SetConfig+0x120>
 80029fa:	d818      	bhi.n	8002a2e <UART_SetConfig+0x13e>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <UART_SetConfig+0x116>
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00a      	beq.n	8002a1a <UART_SetConfig+0x12a>
 8002a04:	e013      	b.n	8002a2e <UART_SetConfig+0x13e>
 8002a06:	231b      	movs	r3, #27
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e02b      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a10:	231b      	movs	r3, #27
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e026      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a1a:	231b      	movs	r3, #27
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2204      	movs	r2, #4
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e021      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a24:	231b      	movs	r3, #27
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2208      	movs	r2, #8
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e01c      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a2e:	231b      	movs	r3, #27
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2210      	movs	r2, #16
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e017      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <UART_SetConfig+0x338>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d104      	bne.n	8002a4c <UART_SetConfig+0x15c>
 8002a42:	231b      	movs	r3, #27
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e00d      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a76      	ldr	r2, [pc, #472]	; (8002c2c <UART_SetConfig+0x33c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d104      	bne.n	8002a60 <UART_SetConfig+0x170>
 8002a56:	231b      	movs	r3, #27
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e003      	b.n	8002a68 <UART_SetConfig+0x178>
 8002a60:	231b      	movs	r3, #27
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2210      	movs	r2, #16
 8002a66:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	021b      	lsls	r3, r3, #8
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d000      	beq.n	8002a76 <UART_SetConfig+0x186>
 8002a74:	e065      	b.n	8002b42 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002a76:	231b      	movs	r3, #27
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d015      	beq.n	8002aac <UART_SetConfig+0x1bc>
 8002a80:	dc18      	bgt.n	8002ab4 <UART_SetConfig+0x1c4>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00d      	beq.n	8002aa2 <UART_SetConfig+0x1b2>
 8002a86:	dc15      	bgt.n	8002ab4 <UART_SetConfig+0x1c4>
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <UART_SetConfig+0x1a2>
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d005      	beq.n	8002a9c <UART_SetConfig+0x1ac>
 8002a90:	e010      	b.n	8002ab4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a92:	f7ff f94f 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002a96:	0003      	movs	r3, r0
 8002a98:	617b      	str	r3, [r7, #20]
        break;
 8002a9a:	e012      	b.n	8002ac2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a9c:	4b64      	ldr	r3, [pc, #400]	; (8002c30 <UART_SetConfig+0x340>)
 8002a9e:	617b      	str	r3, [r7, #20]
        break;
 8002aa0:	e00f      	b.n	8002ac2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7ff f8bb 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	617b      	str	r3, [r7, #20]
        break;
 8002aaa:	e00a      	b.n	8002ac2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	021b      	lsls	r3, r3, #8
 8002ab0:	617b      	str	r3, [r7, #20]
        break;
 8002ab2:	e006      	b.n	8002ac2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002ab8:	231a      	movs	r3, #26
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
        break;
 8002ac0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d100      	bne.n	8002aca <UART_SetConfig+0x1da>
 8002ac8:	e08d      	b.n	8002be6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	4b59      	ldr	r3, [pc, #356]	; (8002c34 <UART_SetConfig+0x344>)
 8002ad0:	0052      	lsls	r2, r2, #1
 8002ad2:	5ad3      	ldrh	r3, [r2, r3]
 8002ad4:	0019      	movs	r1, r3
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7fd fb12 	bl	8000100 <__udivsi3>
 8002adc:	0003      	movs	r3, r0
 8002ade:	005a      	lsls	r2, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	18d2      	adds	r2, r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	0019      	movs	r1, r3
 8002aee:	0010      	movs	r0, r2
 8002af0:	f7fd fb06 	bl	8000100 <__udivsi3>
 8002af4:	0003      	movs	r3, r0
 8002af6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	d91c      	bls.n	8002b38 <UART_SetConfig+0x248>
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	025b      	lsls	r3, r3, #9
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d217      	bcs.n	8002b38 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	200e      	movs	r0, #14
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	210f      	movs	r1, #15
 8002b12:	438a      	bics	r2, r1
 8002b14:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	b299      	uxth	r1, r3
 8002b22:	183b      	adds	r3, r7, r0
 8002b24:	183a      	adds	r2, r7, r0
 8002b26:	8812      	ldrh	r2, [r2, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	183a      	adds	r2, r7, r0
 8002b32:	8812      	ldrh	r2, [r2, #0]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	e056      	b.n	8002be6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002b38:	231a      	movs	r3, #26
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	e051      	b.n	8002be6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b42:	231b      	movs	r3, #27
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	d015      	beq.n	8002b78 <UART_SetConfig+0x288>
 8002b4c:	dc18      	bgt.n	8002b80 <UART_SetConfig+0x290>
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d00d      	beq.n	8002b6e <UART_SetConfig+0x27e>
 8002b52:	dc15      	bgt.n	8002b80 <UART_SetConfig+0x290>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <UART_SetConfig+0x26e>
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d005      	beq.n	8002b68 <UART_SetConfig+0x278>
 8002b5c:	e010      	b.n	8002b80 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b5e:	f7ff f8e9 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8002b62:	0003      	movs	r3, r0
 8002b64:	617b      	str	r3, [r7, #20]
        break;
 8002b66:	e012      	b.n	8002b8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b68:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <UART_SetConfig+0x340>)
 8002b6a:	617b      	str	r3, [r7, #20]
        break;
 8002b6c:	e00f      	b.n	8002b8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6e:	f7ff f855 	bl	8001c1c <HAL_RCC_GetSysClockFreq>
 8002b72:	0003      	movs	r3, r0
 8002b74:	617b      	str	r3, [r7, #20]
        break;
 8002b76:	e00a      	b.n	8002b8e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	617b      	str	r3, [r7, #20]
        break;
 8002b7e:	e006      	b.n	8002b8e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002b84:	231a      	movs	r3, #26
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
        break;
 8002b8c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d028      	beq.n	8002be6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b98:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <UART_SetConfig+0x344>)
 8002b9a:	0052      	lsls	r2, r2, #1
 8002b9c:	5ad3      	ldrh	r3, [r2, r3]
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	6978      	ldr	r0, [r7, #20]
 8002ba2:	f7fd faad 	bl	8000100 <__udivsi3>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	001a      	movs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	18d2      	adds	r2, r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	0010      	movs	r0, r2
 8002bba:	f7fd faa1 	bl	8000100 <__udivsi3>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2b0f      	cmp	r3, #15
 8002bc6:	d90a      	bls.n	8002bde <UART_SetConfig+0x2ee>
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	025b      	lsls	r3, r3, #9
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d205      	bcs.n	8002bde <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60da      	str	r2, [r3, #12]
 8002bdc:	e003      	b.n	8002be6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002bde:	231a      	movs	r3, #26
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	226a      	movs	r2, #106	; 0x6a
 8002bea:	2101      	movs	r1, #1
 8002bec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2268      	movs	r2, #104	; 0x68
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002c02:	231a      	movs	r3, #26
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781b      	ldrb	r3, [r3, #0]
}
 8002c08:	0018      	movs	r0, r3
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b008      	add	sp, #32
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	cfff69f3 	.word	0xcfff69f3
 8002c14:	ffffcfff 	.word	0xffffcfff
 8002c18:	11fff4ff 	.word	0x11fff4ff
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40004400 	.word	0x40004400
 8002c28:	40004800 	.word	0x40004800
 8002c2c:	40004c00 	.word	0x40004c00
 8002c30:	00f42400 	.word	0x00f42400
 8002c34:	08004108 	.word	0x08004108

08002c38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	2208      	movs	r2, #8
 8002c46:	4013      	ands	r3, r2
 8002c48:	d00b      	beq.n	8002c62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a4a      	ldr	r2, [pc, #296]	; (8002d7c <UART_AdvFeatureConfig+0x144>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2201      	movs	r2, #1
 8002c68:	4013      	ands	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4a43      	ldr	r2, [pc, #268]	; (8002d80 <UART_AdvFeatureConfig+0x148>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	0019      	movs	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d00b      	beq.n	8002ca6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a3b      	ldr	r2, [pc, #236]	; (8002d84 <UART_AdvFeatureConfig+0x14c>)
 8002c96:	4013      	ands	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2204      	movs	r2, #4
 8002cac:	4013      	ands	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a34      	ldr	r2, [pc, #208]	; (8002d88 <UART_AdvFeatureConfig+0x150>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00b      	beq.n	8002cea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	4a2c      	ldr	r2, [pc, #176]	; (8002d8c <UART_AdvFeatureConfig+0x154>)
 8002cda:	4013      	ands	r3, r2
 8002cdc:	0019      	movs	r1, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	2220      	movs	r2, #32
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d00b      	beq.n	8002d0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	; (8002d90 <UART_AdvFeatureConfig+0x158>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	4013      	ands	r3, r2
 8002d14:	d01d      	beq.n	8002d52 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <UART_AdvFeatureConfig+0x15c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	0019      	movs	r1, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	035b      	lsls	r3, r3, #13
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10b      	bne.n	8002d52 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <UART_AdvFeatureConfig+0x160>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d00b      	beq.n	8002d74 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <UART_AdvFeatureConfig+0x164>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	0019      	movs	r1, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  }
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	ffff7fff 	.word	0xffff7fff
 8002d80:	fffdffff 	.word	0xfffdffff
 8002d84:	fffeffff 	.word	0xfffeffff
 8002d88:	fffbffff 	.word	0xfffbffff
 8002d8c:	ffffefff 	.word	0xffffefff
 8002d90:	ffffdfff 	.word	0xffffdfff
 8002d94:	ffefffff 	.word	0xffefffff
 8002d98:	ff9fffff 	.word	0xff9fffff
 8002d9c:	fff7ffff 	.word	0xfff7ffff

08002da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b092      	sub	sp, #72	; 0x48
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2290      	movs	r2, #144	; 0x90
 8002dac:	2100      	movs	r1, #0
 8002dae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002db0:	f7fd ff94 	bl	8000cdc <HAL_GetTick>
 8002db4:	0003      	movs	r3, r0
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2208      	movs	r2, #8
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d12d      	bne.n	8002e22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	0391      	lsls	r1, r2, #14
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <UART_CheckIdleState+0x14c>)
 8002dd0:	9200      	str	r2, [sp, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f000 f88e 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002dd8:	1e03      	subs	r3, r0, #0
 8002dda:	d022      	beq.n	8002e22 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ddc:	f3ef 8310 	mrs	r3, PRIMASK
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002de4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de6:	2301      	movs	r3, #1
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	f383 8810 	msr	PRIMASK, r3
}
 8002e0c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2288      	movs	r2, #136	; 0x88
 8002e12:	2120      	movs	r1, #32
 8002e14:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2284      	movs	r2, #132	; 0x84
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e060      	b.n	8002ee4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2204      	movs	r2, #4
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d146      	bne.n	8002ebe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	03d1      	lsls	r1, r2, #15
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <UART_CheckIdleState+0x14c>)
 8002e3a:	9200      	str	r2, [sp, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f000 f859 	bl	8002ef4 <UART_WaitOnFlagUntilTimeout>
 8002e42:	1e03      	subs	r3, r0, #0
 8002e44:	d03b      	beq.n	8002ebe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e46:	f3ef 8310 	mrs	r3, PRIMASK
 8002e4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e50:	2301      	movs	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	f383 8810 	msr	PRIMASK, r3
}
 8002e5a:	46c0      	nop			; (mov r8, r8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4922      	ldr	r1, [pc, #136]	; (8002ef0 <UART_CheckIdleState+0x150>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e78:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e80:	633b      	str	r3, [r7, #48]	; 0x30
 8002e82:	2301      	movs	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f383 8810 	msr	PRIMASK, r3
}
 8002e8c:	46c0      	nop			; (mov r8, r8)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f383 8810 	msr	PRIMASK, r3
}
 8002ea8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	228c      	movs	r2, #140	; 0x8c
 8002eae:	2120      	movs	r1, #32
 8002eb0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2284      	movs	r2, #132	; 0x84
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e012      	b.n	8002ee4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2288      	movs	r2, #136	; 0x88
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	228c      	movs	r2, #140	; 0x8c
 8002eca:	2120      	movs	r1, #32
 8002ecc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2284      	movs	r2, #132	; 0x84
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b010      	add	sp, #64	; 0x40
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	01ffffff 	.word	0x01ffffff
 8002ef0:	fffffedf 	.word	0xfffffedf

08002ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	1dfb      	adds	r3, r7, #7
 8002f02:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f04:	e051      	b.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	d04e      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0c:	f7fd fee6 	bl	8000cdc <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d302      	bcc.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e051      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d03b      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d038      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b40      	cmp	r3, #64	; 0x40
 8002f3c:	d035      	beq.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	2208      	movs	r2, #8
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d111      	bne.n	8002f70 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2208      	movs	r2, #8
 8002f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	0018      	movs	r0, r3
 8002f58:	f000 f960 	bl	800321c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2290      	movs	r2, #144	; 0x90
 8002f60:	2108      	movs	r1, #8
 8002f62:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2284      	movs	r2, #132	; 0x84
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e02c      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69da      	ldr	r2, [r3, #28]
 8002f76:	2380      	movs	r3, #128	; 0x80
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d112      	bne.n	8002faa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	0112      	lsls	r2, r2, #4
 8002f8c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f943 	bl	800321c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2290      	movs	r2, #144	; 0x90
 8002f9a:	2120      	movs	r1, #32
 8002f9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2284      	movs	r2, #132	; 0x84
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e00f      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	425a      	negs	r2, r3
 8002fba:	4153      	adcs	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	001a      	movs	r2, r3
 8002fc0:	1dfb      	adds	r3, r7, #7
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d09e      	beq.n	8002f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b098      	sub	sp, #96	; 0x60
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	1dbb      	adds	r3, r7, #6
 8002fe0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	1dba      	adds	r2, r7, #6
 8002fec:	215c      	movs	r1, #92	; 0x5c
 8002fee:	8812      	ldrh	r2, [r2, #0]
 8002ff0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1dba      	adds	r2, r7, #6
 8002ff6:	215e      	movs	r1, #94	; 0x5e
 8002ff8:	8812      	ldrh	r2, [r2, #0]
 8002ffa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	015b      	lsls	r3, r3, #5
 800300a:	429a      	cmp	r2, r3
 800300c:	d10d      	bne.n	800302a <UART_Start_Receive_IT+0x56>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d104      	bne.n	8003020 <UART_Start_Receive_IT+0x4c>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2260      	movs	r2, #96	; 0x60
 800301a:	497b      	ldr	r1, [pc, #492]	; (8003208 <UART_Start_Receive_IT+0x234>)
 800301c:	5299      	strh	r1, [r3, r2]
 800301e:	e02e      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2260      	movs	r2, #96	; 0x60
 8003024:	21ff      	movs	r1, #255	; 0xff
 8003026:	5299      	strh	r1, [r3, r2]
 8003028:	e029      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10d      	bne.n	800304e <UART_Start_Receive_IT+0x7a>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <UART_Start_Receive_IT+0x70>
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2260      	movs	r2, #96	; 0x60
 800303e:	21ff      	movs	r1, #255	; 0xff
 8003040:	5299      	strh	r1, [r3, r2]
 8003042:	e01c      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2260      	movs	r2, #96	; 0x60
 8003048:	217f      	movs	r1, #127	; 0x7f
 800304a:	5299      	strh	r1, [r3, r2]
 800304c:	e017      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	055b      	lsls	r3, r3, #21
 8003056:	429a      	cmp	r2, r3
 8003058:	d10d      	bne.n	8003076 <UART_Start_Receive_IT+0xa2>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <UART_Start_Receive_IT+0x98>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2260      	movs	r2, #96	; 0x60
 8003066:	217f      	movs	r1, #127	; 0x7f
 8003068:	5299      	strh	r1, [r3, r2]
 800306a:	e008      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2260      	movs	r2, #96	; 0x60
 8003070:	213f      	movs	r1, #63	; 0x3f
 8003072:	5299      	strh	r1, [r3, r2]
 8003074:	e003      	b.n	800307e <UART_Start_Receive_IT+0xaa>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2260      	movs	r2, #96	; 0x60
 800307a:	2100      	movs	r1, #0
 800307c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2290      	movs	r2, #144	; 0x90
 8003082:	2100      	movs	r1, #0
 8003084:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	228c      	movs	r2, #140	; 0x8c
 800308a:	2122      	movs	r1, #34	; 0x22
 800308c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308e:	f3ef 8310 	mrs	r3, PRIMASK
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003094:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003098:	2301      	movs	r3, #1
 800309a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	f383 8810 	msr	PRIMASK, r3
}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030c4:	2380      	movs	r3, #128	; 0x80
 80030c6:	059b      	lsls	r3, r3, #22
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d150      	bne.n	800316e <UART_Start_Receive_IT+0x19a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2268      	movs	r2, #104	; 0x68
 80030d0:	5a9b      	ldrh	r3, [r3, r2]
 80030d2:	1dba      	adds	r2, r7, #6
 80030d4:	8812      	ldrh	r2, [r2, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d349      	bcc.n	800316e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d107      	bne.n	80030f6 <UART_Start_Receive_IT+0x122>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a46      	ldr	r2, [pc, #280]	; (800320c <UART_Start_Receive_IT+0x238>)
 80030f2:	675a      	str	r2, [r3, #116]	; 0x74
 80030f4:	e002      	b.n	80030fc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4a45      	ldr	r2, [pc, #276]	; (8003210 <UART_Start_Receive_IT+0x23c>)
 80030fa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d019      	beq.n	8003138 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003104:	f3ef 8310 	mrs	r3, PRIMASK
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800310a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800310c:	65bb      	str	r3, [r7, #88]	; 0x58
 800310e:	2301      	movs	r3, #1
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003114:	f383 8810 	msr	PRIMASK, r3
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0049      	lsls	r1, r1, #1
 8003128:	430a      	orrs	r2, r1
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003132:	f383 8810 	msr	PRIMASK, r3
}
 8003136:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003138:	f3ef 8310 	mrs	r3, PRIMASK
 800313c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003140:	657b      	str	r3, [r7, #84]	; 0x54
 8003142:	2301      	movs	r3, #1
 8003144:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	f383 8810 	msr	PRIMASK, r3
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	0549      	lsls	r1, r1, #21
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	f383 8810 	msr	PRIMASK, r3
}
 800316a:	46c0      	nop			; (mov r8, r8)
 800316c:	e047      	b.n	80031fe <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	015b      	lsls	r3, r3, #5
 8003176:	429a      	cmp	r2, r3
 8003178:	d107      	bne.n	800318a <UART_Start_Receive_IT+0x1b6>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d103      	bne.n	800318a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a23      	ldr	r2, [pc, #140]	; (8003214 <UART_Start_Receive_IT+0x240>)
 8003186:	675a      	str	r2, [r3, #116]	; 0x74
 8003188:	e002      	b.n	8003190 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <UART_Start_Receive_IT+0x244>)
 800318e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d019      	beq.n	80031cc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003198:	f3ef 8310 	mrs	r3, PRIMASK
 800319c:	61fb      	str	r3, [r7, #28]
  return(result);
 800319e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80031a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a2:	2301      	movs	r3, #1
 80031a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	f383 8810 	msr	PRIMASK, r3
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2190      	movs	r1, #144	; 0x90
 80031ba:	0049      	lsls	r1, r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	f383 8810 	msr	PRIMASK, r3
}
 80031ca:	e018      	b.n	80031fe <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031cc:	f3ef 8310 	mrs	r3, PRIMASK
 80031d0:	613b      	str	r3, [r7, #16]
  return(result);
 80031d2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80031d4:	653b      	str	r3, [r7, #80]	; 0x50
 80031d6:	2301      	movs	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2120      	movs	r1, #32
 80031ee:	430a      	orrs	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	f383 8810 	msr	PRIMASK, r3
}
 80031fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	0018      	movs	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	b018      	add	sp, #96	; 0x60
 8003206:	bd80      	pop	{r7, pc}
 8003208:	000001ff 	.word	0x000001ff
 800320c:	08003a11 	.word	0x08003a11
 8003210:	080036e1 	.word	0x080036e1
 8003214:	08003529 	.word	0x08003529
 8003218:	08003371 	.word	0x08003371

0800321c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	617b      	str	r3, [r7, #20]
  return(result);
 800322a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	2301      	movs	r3, #1
 8003230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4926      	ldr	r1, [pc, #152]	; (80032e0 <UART_EndRxTransfer+0xc4>)
 8003246:	400a      	ands	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f383 8810 	msr	PRIMASK, r3
}
 8003254:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003256:	f3ef 8310 	mrs	r3, PRIMASK
 800325a:	623b      	str	r3, [r7, #32]
  return(result);
 800325c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800325e:	633b      	str	r3, [r7, #48]	; 0x30
 8003260:	2301      	movs	r3, #1
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	491b      	ldr	r1, [pc, #108]	; (80032e4 <UART_EndRxTransfer+0xc8>)
 8003278:	400a      	ands	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	f383 8810 	msr	PRIMASK, r3
}
 8003286:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d118      	bne.n	80032c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003290:	f3ef 8310 	mrs	r3, PRIMASK
 8003294:	60bb      	str	r3, [r7, #8]
  return(result);
 8003296:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	2301      	movs	r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f383 8810 	msr	PRIMASK, r3
}
 80032a4:	46c0      	nop			; (mov r8, r8)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2110      	movs	r1, #16
 80032b2:	438a      	bics	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	f383 8810 	msr	PRIMASK, r3
}
 80032c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	228c      	movs	r2, #140	; 0x8c
 80032c6:	2120      	movs	r1, #32
 80032c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	46bd      	mov	sp, r7
 80032da:	b00e      	add	sp, #56	; 0x38
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	fffffedf 	.word	0xfffffedf
 80032e4:	effffffe 	.word	0xeffffffe

080032e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	225e      	movs	r2, #94	; 0x5e
 80032fa:	2100      	movs	r1, #0
 80032fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2256      	movs	r2, #86	; 0x56
 8003302:	2100      	movs	r1, #0
 8003304:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fadd 	bl	80028c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}

08003316 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	60bb      	str	r3, [r7, #8]
  return(result);
 8003324:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	2301      	movs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2140      	movs	r1, #64	; 0x40
 8003340:	438a      	bics	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2288      	movs	r2, #136	; 0x88
 8003354:	2120      	movs	r1, #32
 8003356:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f7ff faa9 	bl	80028b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	46bd      	mov	sp, r7
 800336a:	b006      	add	sp, #24
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b094      	sub	sp, #80	; 0x50
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003378:	204e      	movs	r0, #78	; 0x4e
 800337a:	183b      	adds	r3, r7, r0
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	2160      	movs	r1, #96	; 0x60
 8003380:	5a52      	ldrh	r2, [r2, r1]
 8003382:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	228c      	movs	r2, #140	; 0x8c
 8003388:	589b      	ldr	r3, [r3, r2]
 800338a:	2b22      	cmp	r3, #34	; 0x22
 800338c:	d000      	beq.n	8003390 <UART_RxISR_8BIT+0x20>
 800338e:	e0ba      	b.n	8003506 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003396:	214c      	movs	r1, #76	; 0x4c
 8003398:	187b      	adds	r3, r7, r1
 800339a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800339c:	187b      	adds	r3, r7, r1
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	183b      	adds	r3, r7, r0
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b2d9      	uxtb	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	400a      	ands	r2, r1
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	225e      	movs	r2, #94	; 0x5e
 80033c0:	5a9b      	ldrh	r3, [r3, r2]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b299      	uxth	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	225e      	movs	r2, #94	; 0x5e
 80033cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	225e      	movs	r2, #94	; 0x5e
 80033d2:	5a9b      	ldrh	r3, [r3, r2]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d000      	beq.n	80033dc <UART_RxISR_8BIT+0x6c>
 80033da:	e09c      	b.n	8003516 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033dc:	f3ef 8310 	mrs	r3, PRIMASK
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80033e6:	2301      	movs	r3, #1
 80033e8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ec:	f383 8810 	msr	PRIMASK, r3
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4948      	ldr	r1, [pc, #288]	; (8003520 <UART_RxISR_8BIT+0x1b0>)
 80033fe:	400a      	ands	r2, r1
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800340e:	f3ef 8310 	mrs	r3, PRIMASK
 8003412:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003414:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003416:	647b      	str	r3, [r7, #68]	; 0x44
 8003418:	2301      	movs	r3, #1
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	f383 8810 	msr	PRIMASK, r3
}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2101      	movs	r1, #1
 8003430:	438a      	bics	r2, r1
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003436:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343a:	f383 8810 	msr	PRIMASK, r3
}
 800343e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	228c      	movs	r2, #140	; 0x8c
 8003444:	2120      	movs	r1, #32
 8003446:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	041b      	lsls	r3, r3, #16
 800345e:	4013      	ands	r3, r2
 8003460:	d018      	beq.n	8003494 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003462:	f3ef 8310 	mrs	r3, PRIMASK
 8003466:	61bb      	str	r3, [r7, #24]
  return(result);
 8003468:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800346a:	643b      	str	r3, [r7, #64]	; 0x40
 800346c:	2301      	movs	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f383 8810 	msr	PRIMASK, r3
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4928      	ldr	r1, [pc, #160]	; (8003524 <UART_RxISR_8BIT+0x1b4>)
 8003484:	400a      	ands	r2, r1
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f383 8810 	msr	PRIMASK, r3
}
 8003492:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003498:	2b01      	cmp	r3, #1
 800349a:	d12f      	bne.n	80034fc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80034a8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034ac:	2301      	movs	r3, #1
 80034ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2110      	movs	r1, #16
 80034c4:	438a      	bics	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	2210      	movs	r2, #16
 80034dc:	4013      	ands	r3, r2
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d103      	bne.n	80034ea <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	225c      	movs	r2, #92	; 0x5c
 80034ee:	5a9a      	ldrh	r2, [r3, r2]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0011      	movs	r1, r2
 80034f4:	0018      	movs	r0, r3
 80034f6:	f7ff f9ef 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80034fa:	e00c      	b.n	8003516 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fd f95c 	bl	80007bc <HAL_UART_RxCpltCallback>
}
 8003504:	e007      	b.n	8003516 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2108      	movs	r1, #8
 8003512:	430a      	orrs	r2, r1
 8003514:	619a      	str	r2, [r3, #24]
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	46bd      	mov	sp, r7
 800351a:	b014      	add	sp, #80	; 0x50
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	fffffedf 	.word	0xfffffedf
 8003524:	fbffffff 	.word	0xfbffffff

08003528 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b094      	sub	sp, #80	; 0x50
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003530:	204e      	movs	r0, #78	; 0x4e
 8003532:	183b      	adds	r3, r7, r0
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	2160      	movs	r1, #96	; 0x60
 8003538:	5a52      	ldrh	r2, [r2, r1]
 800353a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	228c      	movs	r2, #140	; 0x8c
 8003540:	589b      	ldr	r3, [r3, r2]
 8003542:	2b22      	cmp	r3, #34	; 0x22
 8003544:	d000      	beq.n	8003548 <UART_RxISR_16BIT+0x20>
 8003546:	e0ba      	b.n	80036be <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800354e:	214c      	movs	r1, #76	; 0x4c
 8003550:	187b      	adds	r3, r7, r1
 8003552:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800355a:	187b      	adds	r3, r7, r1
 800355c:	183a      	adds	r2, r7, r0
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	4013      	ands	r3, r2
 8003564:	b29a      	uxth	r2, r3
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003568:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	225e      	movs	r2, #94	; 0x5e
 8003578:	5a9b      	ldrh	r3, [r3, r2]
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b299      	uxth	r1, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	225e      	movs	r2, #94	; 0x5e
 8003584:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	225e      	movs	r2, #94	; 0x5e
 800358a:	5a9b      	ldrh	r3, [r3, r2]
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d000      	beq.n	8003594 <UART_RxISR_16BIT+0x6c>
 8003592:	e09c      	b.n	80036ce <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003594:	f3ef 8310 	mrs	r3, PRIMASK
 8003598:	623b      	str	r3, [r7, #32]
  return(result);
 800359a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800359c:	647b      	str	r3, [r7, #68]	; 0x44
 800359e:	2301      	movs	r3, #1
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	f383 8810 	msr	PRIMASK, r3
}
 80035a8:	46c0      	nop			; (mov r8, r8)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4948      	ldr	r1, [pc, #288]	; (80036d8 <UART_RxISR_16BIT+0x1b0>)
 80035b6:	400a      	ands	r2, r1
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80035cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ce:	643b      	str	r3, [r7, #64]	; 0x40
 80035d0:	2301      	movs	r3, #1
 80035d2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	f383 8810 	msr	PRIMASK, r3
}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2101      	movs	r1, #1
 80035e8:	438a      	bics	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	228c      	movs	r2, #140	; 0x8c
 80035fc:	2120      	movs	r1, #32
 80035fe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	2380      	movs	r3, #128	; 0x80
 8003614:	041b      	lsls	r3, r3, #16
 8003616:	4013      	ands	r3, r2
 8003618:	d018      	beq.n	800364c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361a:	f3ef 8310 	mrs	r3, PRIMASK
 800361e:	617b      	str	r3, [r7, #20]
  return(result);
 8003620:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003624:	2301      	movs	r3, #1
 8003626:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4928      	ldr	r1, [pc, #160]	; (80036dc <UART_RxISR_16BIT+0x1b4>)
 800363c:	400a      	ands	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003642:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003650:	2b01      	cmp	r3, #1
 8003652:	d12f      	bne.n	80036b4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365a:	f3ef 8310 	mrs	r3, PRIMASK
 800365e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003662:	63bb      	str	r3, [r7, #56]	; 0x38
 8003664:	2301      	movs	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f383 8810 	msr	PRIMASK, r3
}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2110      	movs	r1, #16
 800367c:	438a      	bics	r2, r1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f383 8810 	msr	PRIMASK, r3
}
 800368a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	2210      	movs	r2, #16
 8003694:	4013      	ands	r3, r2
 8003696:	2b10      	cmp	r3, #16
 8003698:	d103      	bne.n	80036a2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2210      	movs	r2, #16
 80036a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	225c      	movs	r2, #92	; 0x5c
 80036a6:	5a9a      	ldrh	r2, [r3, r2]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7ff f913 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036b2:	e00c      	b.n	80036ce <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd f880 	bl	80007bc <HAL_UART_RxCpltCallback>
}
 80036bc:	e007      	b.n	80036ce <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2108      	movs	r1, #8
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b014      	add	sp, #80	; 0x50
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	fffffedf 	.word	0xfffffedf
 80036dc:	fbffffff 	.word	0xfbffffff

080036e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b0a0      	sub	sp, #128	; 0x80
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80036e8:	237a      	movs	r3, #122	; 0x7a
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	2160      	movs	r1, #96	; 0x60
 80036f0:	5a52      	ldrh	r2, [r2, r1]
 80036f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	228c      	movs	r2, #140	; 0x8c
 8003710:	589b      	ldr	r3, [r3, r2]
 8003712:	2b22      	cmp	r3, #34	; 0x22
 8003714:	d000      	beq.n	8003718 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003716:	e165      	b.n	80039e4 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003718:	236e      	movs	r3, #110	; 0x6e
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	2168      	movs	r1, #104	; 0x68
 8003720:	5a52      	ldrh	r2, [r2, r1]
 8003722:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003724:	e10c      	b.n	8003940 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800372c:	216c      	movs	r1, #108	; 0x6c
 800372e:	187b      	adds	r3, r7, r1
 8003730:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003732:	187b      	adds	r3, r7, r1
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b2da      	uxtb	r2, r3
 8003738:	237a      	movs	r3, #122	; 0x7a
 800373a:	18fb      	adds	r3, r7, r3
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	b2d9      	uxtb	r1, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	400a      	ands	r2, r1
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374e:	1c5a      	adds	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	225e      	movs	r2, #94	; 0x5e
 8003758:	5a9b      	ldrh	r3, [r3, r2]
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b299      	uxth	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	225e      	movs	r2, #94	; 0x5e
 8003764:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800376e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003770:	2207      	movs	r2, #7
 8003772:	4013      	ands	r3, r2
 8003774:	d049      	beq.n	800380a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003776:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
 800377c:	d010      	beq.n	80037a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800377e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4013      	ands	r3, r2
 8003786:	d00b      	beq.n	80037a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2201      	movs	r2, #1
 800378e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2290      	movs	r2, #144	; 0x90
 8003794:	589b      	ldr	r3, [r3, r2]
 8003796:	2201      	movs	r2, #1
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2190      	movs	r1, #144	; 0x90
 800379e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037a2:	2202      	movs	r2, #2
 80037a4:	4013      	ands	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80037a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2202      	movs	r2, #2
 80037b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2290      	movs	r2, #144	; 0x90
 80037bc:	589b      	ldr	r3, [r3, r2]
 80037be:	2204      	movs	r2, #4
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2190      	movs	r1, #144	; 0x90
 80037c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ca:	2204      	movs	r2, #4
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00f      	beq.n	80037f0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80037d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037d2:	2201      	movs	r2, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d00b      	beq.n	80037f0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2204      	movs	r2, #4
 80037de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2290      	movs	r2, #144	; 0x90
 80037e4:	589b      	ldr	r3, [r3, r2]
 80037e6:	2202      	movs	r2, #2
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2190      	movs	r1, #144	; 0x90
 80037ee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2290      	movs	r2, #144	; 0x90
 80037f4:	589b      	ldr	r3, [r3, r2]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f7ff f863 	bl	80028c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2290      	movs	r2, #144	; 0x90
 8003806:	2100      	movs	r1, #0
 8003808:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	225e      	movs	r2, #94	; 0x5e
 800380e:	5a9b      	ldrh	r3, [r3, r2]
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d000      	beq.n	8003818 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003816:	e093      	b.n	8003940 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003818:	f3ef 8310 	mrs	r3, PRIMASK
 800381c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003820:	66bb      	str	r3, [r7, #104]	; 0x68
 8003822:	2301      	movs	r3, #1
 8003824:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4970      	ldr	r1, [pc, #448]	; (80039fc <UART_RxISR_8BIT_FIFOEN+0x31c>)
 800383a:	400a      	ands	r2, r1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003840:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384a:	f3ef 8310 	mrs	r3, PRIMASK
 800384e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8003850:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003852:	667b      	str	r3, [r7, #100]	; 0x64
 8003854:	2301      	movs	r3, #1
 8003856:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4965      	ldr	r1, [pc, #404]	; (8003a00 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800386c:	400a      	ands	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	228c      	movs	r2, #140	; 0x8c
 8003880:	2120      	movs	r1, #32
 8003882:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	4013      	ands	r3, r2
 800389c:	d018      	beq.n	80038d0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389e:	f3ef 8310 	mrs	r3, PRIMASK
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038a6:	663b      	str	r3, [r7, #96]	; 0x60
 80038a8:	2301      	movs	r3, #1
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ae:	f383 8810 	msr	PRIMASK, r3
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4951      	ldr	r1, [pc, #324]	; (8003a04 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80038c0:	400a      	ands	r2, r1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ca:	f383 8810 	msr	PRIMASK, r3
}
 80038ce:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d12f      	bne.n	8003938 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	623b      	str	r3, [r7, #32]
  return(result);
 80038e4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038e8:	2301      	movs	r3, #1
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2110      	movs	r1, #16
 8003900:	438a      	bics	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003906:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2210      	movs	r2, #16
 8003918:	4013      	ands	r3, r2
 800391a:	2b10      	cmp	r3, #16
 800391c:	d103      	bne.n	8003926 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	225c      	movs	r2, #92	; 0x5c
 800392a:	5a9a      	ldrh	r2, [r3, r2]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0011      	movs	r1, r2
 8003930:	0018      	movs	r0, r3
 8003932:	f7fe ffd1 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
 8003936:	e003      	b.n	8003940 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7fc ff3e 	bl	80007bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003940:	236e      	movs	r3, #110	; 0x6e
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d004      	beq.n	8003954 <UART_RxISR_8BIT_FIFOEN+0x274>
 800394a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800394c:	2220      	movs	r2, #32
 800394e:	4013      	ands	r3, r2
 8003950:	d000      	beq.n	8003954 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003952:	e6e8      	b.n	8003726 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003954:	205a      	movs	r0, #90	; 0x5a
 8003956:	183b      	adds	r3, r7, r0
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	215e      	movs	r1, #94	; 0x5e
 800395c:	5a52      	ldrh	r2, [r2, r1]
 800395e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003960:	0001      	movs	r1, r0
 8003962:	187b      	adds	r3, r7, r1
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d044      	beq.n	80039f4 <UART_RxISR_8BIT_FIFOEN+0x314>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2268      	movs	r2, #104	; 0x68
 800396e:	5a9b      	ldrh	r3, [r3, r2]
 8003970:	187a      	adds	r2, r7, r1
 8003972:	8812      	ldrh	r2, [r2, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d23d      	bcs.n	80039f4 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	60bb      	str	r3, [r7, #8]
  return(result);
 800397e:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003980:	657b      	str	r3, [r7, #84]	; 0x54
 8003982:	2301      	movs	r3, #1
 8003984:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	491b      	ldr	r1, [pc, #108]	; (8003a08 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800399a:	400a      	ands	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80039ae:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b0:	f3ef 8310 	mrs	r3, PRIMASK
 80039b4:	617b      	str	r3, [r7, #20]
  return(result);
 80039b6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039b8:	653b      	str	r3, [r7, #80]	; 0x50
 80039ba:	2301      	movs	r3, #1
 80039bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2120      	movs	r1, #32
 80039d2:	430a      	orrs	r2, r1
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f383 8810 	msr	PRIMASK, r3
}
 80039e0:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039e2:	e007      	b.n	80039f4 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2108      	movs	r1, #8
 80039f0:	430a      	orrs	r2, r1
 80039f2:	619a      	str	r2, [r3, #24]
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b020      	add	sp, #128	; 0x80
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffffeff 	.word	0xfffffeff
 8003a00:	effffffe 	.word	0xeffffffe
 8003a04:	fbffffff 	.word	0xfbffffff
 8003a08:	efffffff 	.word	0xefffffff
 8003a0c:	08003371 	.word	0x08003371

08003a10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0a2      	sub	sp, #136	; 0x88
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003a18:	2382      	movs	r3, #130	; 0x82
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	2160      	movs	r1, #96	; 0x60
 8003a20:	5a52      	ldrh	r2, [r2, r1]
 8003a22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2284      	movs	r2, #132	; 0x84
 8003a2c:	18ba      	adds	r2, r7, r2
 8003a2e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	228c      	movs	r2, #140	; 0x8c
 8003a44:	589b      	ldr	r3, [r3, r2]
 8003a46:	2b22      	cmp	r3, #34	; 0x22
 8003a48:	d000      	beq.n	8003a4c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003a4a:	e16f      	b.n	8003d2c <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003a4c:	2376      	movs	r3, #118	; 0x76
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	2168      	movs	r1, #104	; 0x68
 8003a54:	5a52      	ldrh	r2, [r2, r1]
 8003a56:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003a58:	e114      	b.n	8003c84 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a60:	2174      	movs	r1, #116	; 0x74
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	2282      	movs	r2, #130	; 0x82
 8003a70:	18ba      	adds	r2, r7, r2
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	8812      	ldrh	r2, [r2, #0]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	1c9a      	adds	r2, r3, #2
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	225e      	movs	r2, #94	; 0x5e
 8003a8c:	5a9b      	ldrh	r3, [r3, r2]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b299      	uxth	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	225e      	movs	r2, #94	; 0x5e
 8003a98:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	2184      	movs	r1, #132	; 0x84
 8003aa2:	187a      	adds	r2, r7, r1
 8003aa4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003aa6:	187b      	adds	r3, r7, r1
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2207      	movs	r2, #7
 8003aac:	4013      	ands	r3, r2
 8003aae:	d04e      	beq.n	8003b4e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	d010      	beq.n	8003adc <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003aba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003abc:	2380      	movs	r3, #128	; 0x80
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2290      	movs	r2, #144	; 0x90
 8003ad0:	589b      	ldr	r3, [r3, r2]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2190      	movs	r1, #144	; 0x90
 8003ada:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003adc:	2384      	movs	r3, #132	; 0x84
 8003ade:	18fb      	adds	r3, r7, r3
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00f      	beq.n	8003b08 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aea:	2201      	movs	r2, #1
 8003aec:	4013      	ands	r3, r2
 8003aee:	d00b      	beq.n	8003b08 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2202      	movs	r2, #2
 8003af6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2290      	movs	r2, #144	; 0x90
 8003afc:	589b      	ldr	r3, [r3, r2]
 8003afe:	2204      	movs	r2, #4
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2190      	movs	r1, #144	; 0x90
 8003b06:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b08:	2384      	movs	r3, #132	; 0x84
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00f      	beq.n	8003b34 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003b14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b16:	2201      	movs	r2, #1
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2204      	movs	r2, #4
 8003b22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2290      	movs	r2, #144	; 0x90
 8003b28:	589b      	ldr	r3, [r3, r2]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2190      	movs	r1, #144	; 0x90
 8003b32:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2290      	movs	r2, #144	; 0x90
 8003b38:	589b      	ldr	r3, [r3, r2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7fe fec1 	bl	80028c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2290      	movs	r2, #144	; 0x90
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	225e      	movs	r2, #94	; 0x5e
 8003b52:	5a9b      	ldrh	r3, [r3, r2]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d000      	beq.n	8003b5c <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003b5a:	e093      	b.n	8003c84 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b64:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b66:	2301      	movs	r3, #1
 8003b68:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4971      	ldr	r1, [pc, #452]	; (8003d44 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8003b7e:	400a      	ands	r2, r1
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b84:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b88:	f383 8810 	msr	PRIMASK, r3
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b92:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	2301      	movs	r3, #1
 8003b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4966      	ldr	r1, [pc, #408]	; (8003d48 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bba:	f383 8810 	msr	PRIMASK, r3
}
 8003bbe:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	228c      	movs	r2, #140	; 0x8c
 8003bc4:	2120      	movs	r1, #32
 8003bc6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	4013      	ands	r3, r2
 8003be0:	d018      	beq.n	8003c14 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be2:	f3ef 8310 	mrs	r3, PRIMASK
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
 8003bec:	2301      	movs	r3, #1
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4952      	ldr	r1, [pc, #328]	; (8003d4c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003c04:	400a      	ands	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d12f      	bne.n	8003c7c <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c22:	f3ef 8310 	mrs	r3, PRIMASK
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c32:	f383 8810 	msr	PRIMASK, r3
}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2110      	movs	r1, #16
 8003c44:	438a      	bics	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d103      	bne.n	8003c6a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2210      	movs	r2, #16
 8003c68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	225c      	movs	r2, #92	; 0x5c
 8003c6e:	5a9a      	ldrh	r2, [r3, r2]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fe fe2f 	bl	80028d8 <HAL_UARTEx_RxEventCallback>
 8003c7a:	e003      	b.n	8003c84 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f7fc fd9c 	bl	80007bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003c84:	2376      	movs	r3, #118	; 0x76
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d006      	beq.n	8003c9c <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003c8e:	2384      	movs	r3, #132	; 0x84
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2220      	movs	r2, #32
 8003c96:	4013      	ands	r3, r2
 8003c98:	d000      	beq.n	8003c9c <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003c9a:	e6de      	b.n	8003a5a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003c9c:	205e      	movs	r0, #94	; 0x5e
 8003c9e:	183b      	adds	r3, r7, r0
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	215e      	movs	r1, #94	; 0x5e
 8003ca4:	5a52      	ldrh	r2, [r2, r1]
 8003ca6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003ca8:	0001      	movs	r1, r0
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <UART_RxISR_16BIT_FIFOEN+0x32c>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2268      	movs	r2, #104	; 0x68
 8003cb6:	5a9b      	ldrh	r3, [r3, r2]
 8003cb8:	187a      	adds	r2, r7, r1
 8003cba:	8812      	ldrh	r2, [r2, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d23d      	bcs.n	8003d3c <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cca:	2301      	movs	r3, #1
 8003ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	491b      	ldr	r1, [pc, #108]	; (8003d50 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
 8003ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ce8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003cf6:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cfe:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d00:	657b      	str	r3, [r7, #84]	; 0x54
 8003d02:	2301      	movs	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2120      	movs	r1, #32
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f383 8810 	msr	PRIMASK, r3
}
 8003d28:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d2a:	e007      	b.n	8003d3c <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2108      	movs	r1, #8
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	619a      	str	r2, [r3, #24]
}
 8003d3c:	46c0      	nop			; (mov r8, r8)
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b022      	add	sp, #136	; 0x88
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	fffffeff 	.word	0xfffffeff
 8003d48:	effffffe 	.word	0xeffffffe
 8003d4c:	fbffffff 	.word	0xfbffffff
 8003d50:	efffffff 	.word	0xefffffff
 8003d54:	08003529 	.word	0x08003529

08003d58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003d60:	46c0      	nop			; (mov r8, r8)
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b002      	add	sp, #8
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	b002      	add	sp, #8
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2284      	movs	r2, #132	; 0x84
 8003d94:	5c9b      	ldrb	r3, [r3, r2]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_UARTEx_EnableFifoMode+0x16>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e02d      	b.n	8003dfa <HAL_UARTEx_EnableFifoMode+0x72>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2284      	movs	r2, #132	; 0x84
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2288      	movs	r2, #136	; 0x88
 8003daa:	2124      	movs	r1, #36	; 0x24
 8003dac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	438a      	bics	r2, r1
 8003dc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2280      	movs	r2, #128	; 0x80
 8003dca:	0592      	lsls	r2, r2, #22
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	0592      	lsls	r2, r2, #22
 8003dd6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 f8ca 	bl	8003f7c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2288      	movs	r2, #136	; 0x88
 8003dec:	2120      	movs	r1, #32
 8003dee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2284      	movs	r2, #132	; 0x84
 8003df4:	2100      	movs	r1, #0
 8003df6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b004      	add	sp, #16
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2284      	movs	r2, #132	; 0x84
 8003e10:	5c9b      	ldrb	r3, [r3, r2]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d101      	bne.n	8003e1a <HAL_UARTEx_DisableFifoMode+0x16>
 8003e16:	2302      	movs	r3, #2
 8003e18:	e027      	b.n	8003e6a <HAL_UARTEx_DisableFifoMode+0x66>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2284      	movs	r2, #132	; 0x84
 8003e1e:	2101      	movs	r1, #1
 8003e20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2288      	movs	r2, #136	; 0x88
 8003e26:	2124      	movs	r1, #36	; 0x24
 8003e28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	438a      	bics	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a0b      	ldr	r2, [pc, #44]	; (8003e74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2288      	movs	r2, #136	; 0x88
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2284      	movs	r2, #132	; 0x84
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	dfffffff 	.word	0xdfffffff

08003e78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2284      	movs	r2, #132	; 0x84
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e02e      	b.n	8003eee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2284      	movs	r2, #132	; 0x84
 8003e94:	2101      	movs	r1, #1
 8003e96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2288      	movs	r2, #136	; 0x88
 8003e9c:	2124      	movs	r1, #36	; 0x24
 8003e9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	08d9      	lsrs	r1, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f854 	bl	8003f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2288      	movs	r2, #136	; 0x88
 8003ee0:	2120      	movs	r1, #32
 8003ee2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2284      	movs	r2, #132	; 0x84
 8003ee8:	2100      	movs	r1, #0
 8003eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2284      	movs	r2, #132	; 0x84
 8003f06:	5c9b      	ldrb	r3, [r3, r2]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e02f      	b.n	8003f70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2284      	movs	r2, #132	; 0x84
 8003f14:	2101      	movs	r1, #1
 8003f16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2288      	movs	r2, #136	; 0x88
 8003f1c:	2124      	movs	r1, #36	; 0x24
 8003f1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	438a      	bics	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4a0e      	ldr	r2, [pc, #56]	; (8003f78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	0019      	movs	r1, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f000 f813 	bl	8003f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2288      	movs	r2, #136	; 0x88
 8003f62:	2120      	movs	r1, #32
 8003f64:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2284      	movs	r2, #132	; 0x84
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	0018      	movs	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	b004      	add	sp, #16
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	f1ffffff 	.word	0xf1ffffff

08003f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d108      	bne.n	8003f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	226a      	movs	r2, #106	; 0x6a
 8003f90:	2101      	movs	r1, #1
 8003f92:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2268      	movs	r2, #104	; 0x68
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003f9c:	e043      	b.n	8004026 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003f9e:	260f      	movs	r6, #15
 8003fa0:	19bb      	adds	r3, r7, r6
 8003fa2:	2208      	movs	r2, #8
 8003fa4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003fa6:	200e      	movs	r0, #14
 8003fa8:	183b      	adds	r3, r7, r0
 8003faa:	2208      	movs	r2, #8
 8003fac:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	0e5b      	lsrs	r3, r3, #25
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	240d      	movs	r4, #13
 8003fba:	193b      	adds	r3, r7, r4
 8003fbc:	2107      	movs	r1, #7
 8003fbe:	400a      	ands	r2, r1
 8003fc0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	0f5b      	lsrs	r3, r3, #29
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	250c      	movs	r5, #12
 8003fce:	197b      	adds	r3, r7, r5
 8003fd0:	2107      	movs	r1, #7
 8003fd2:	400a      	ands	r2, r1
 8003fd4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fd6:	183b      	adds	r3, r7, r0
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	197a      	adds	r2, r7, r5
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	4914      	ldr	r1, [pc, #80]	; (8004030 <UARTEx_SetNbDataToProcess+0xb4>)
 8003fe0:	5c8a      	ldrb	r2, [r1, r2]
 8003fe2:	435a      	muls	r2, r3
 8003fe4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003fe6:	197b      	adds	r3, r7, r5
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	4a12      	ldr	r2, [pc, #72]	; (8004034 <UARTEx_SetNbDataToProcess+0xb8>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003fee:	0019      	movs	r1, r3
 8003ff0:	f7fc f910 	bl	8000214 <__divsi3>
 8003ff4:	0003      	movs	r3, r0
 8003ff6:	b299      	uxth	r1, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	226a      	movs	r2, #106	; 0x6a
 8003ffc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ffe:	19bb      	adds	r3, r7, r6
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	193a      	adds	r2, r7, r4
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	490a      	ldr	r1, [pc, #40]	; (8004030 <UARTEx_SetNbDataToProcess+0xb4>)
 8004008:	5c8a      	ldrb	r2, [r1, r2]
 800400a:	435a      	muls	r2, r3
 800400c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800400e:	193b      	adds	r3, r7, r4
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	4a08      	ldr	r2, [pc, #32]	; (8004034 <UARTEx_SetNbDataToProcess+0xb8>)
 8004014:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004016:	0019      	movs	r1, r3
 8004018:	f7fc f8fc 	bl	8000214 <__divsi3>
 800401c:	0003      	movs	r3, r0
 800401e:	b299      	uxth	r1, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2268      	movs	r2, #104	; 0x68
 8004024:	5299      	strh	r1, [r3, r2]
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b005      	add	sp, #20
 800402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	08004120 	.word	0x08004120
 8004034:	08004128 	.word	0x08004128

08004038 <memset>:
 8004038:	0003      	movs	r3, r0
 800403a:	1882      	adds	r2, r0, r2
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	7019      	strb	r1, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <__libc_init_array>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	2600      	movs	r6, #0
 800404c:	4c0c      	ldr	r4, [pc, #48]	; (8004080 <__libc_init_array+0x38>)
 800404e:	4d0d      	ldr	r5, [pc, #52]	; (8004084 <__libc_init_array+0x3c>)
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	42a6      	cmp	r6, r4
 8004056:	d109      	bne.n	800406c <__libc_init_array+0x24>
 8004058:	2600      	movs	r6, #0
 800405a:	f000 f819 	bl	8004090 <_init>
 800405e:	4c0a      	ldr	r4, [pc, #40]	; (8004088 <__libc_init_array+0x40>)
 8004060:	4d0a      	ldr	r5, [pc, #40]	; (800408c <__libc_init_array+0x44>)
 8004062:	1b64      	subs	r4, r4, r5
 8004064:	10a4      	asrs	r4, r4, #2
 8004066:	42a6      	cmp	r6, r4
 8004068:	d105      	bne.n	8004076 <__libc_init_array+0x2e>
 800406a:	bd70      	pop	{r4, r5, r6, pc}
 800406c:	00b3      	lsls	r3, r6, #2
 800406e:	58eb      	ldr	r3, [r5, r3]
 8004070:	4798      	blx	r3
 8004072:	3601      	adds	r6, #1
 8004074:	e7ee      	b.n	8004054 <__libc_init_array+0xc>
 8004076:	00b3      	lsls	r3, r6, #2
 8004078:	58eb      	ldr	r3, [r5, r3]
 800407a:	4798      	blx	r3
 800407c:	3601      	adds	r6, #1
 800407e:	e7f2      	b.n	8004066 <__libc_init_array+0x1e>
 8004080:	08004130 	.word	0x08004130
 8004084:	08004130 	.word	0x08004130
 8004088:	08004134 	.word	0x08004134
 800408c:	08004130 	.word	0x08004130

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
